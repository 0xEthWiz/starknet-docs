antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,52.885]],["name/1",[1,1.313]],["text/1",[2,2.14,3,4.878,4,4.878,5,3.074,6,6.537,7,3.796,8,4.878,9,3.315,10,3.338,11,2.862,12,3.198,13,3.688,14,3.134,15,4.388,16,5.242,17,4.388,18,5.242,19,7.025,20,2.645,21,3.198,22,4.878,23,4.207,24,4.878,25,3.917,26,5.242,27,3.266,28,5.795,29,5.795,30,5.242,31,5.795,32,3.796,33,3.017,34,3.796,35,1.773,36,4.052,37,3.917,38,2.862,39,3.415,40,2.309,41,2.199,42,3.017,43,5.795,44,5.242,45,4.052]],["component/1",[46,0.543]],["title/2-1",[47,38.42,48,39.75]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[48,39.75,49,34.322]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2",[47,32.394,48,33.515,49,28.938]],["name/2",[1,1.313]],["text/2",[2,2.058,11,3.238,21,2.508,35,1.39,39,2.678,40,3.355,41,1.724,47,5.692,48,5.379,49,5.791,50,1.766,51,3.825,52,2.618,53,2.744,54,5.585,55,5.931,56,3.611,57,4.111,58,3.071,59,2.744,60,2.561,61,2.678,62,4.545,63,3.299,64,3.038,65,4.545,66,2.826,67,2.949,68,3.071,69,2.678,70,3.071,71,3.41,72,2.977,73,2.906,74,3.825,75,2.411,76,3.071,77,3.441,78,3.071,79,2.074,80,2.323,81,2.323,82,2.618,83,2.866,84,2.904,85,6.693,86,4.965,87,2.906,88,4.111,89,2.074,90,2.744,91,2.977]],["component/2",[46,0.543]],["title/3-1",[92,52.885]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[12,26.451,93,24.954,94,30.5]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[95,34.797,96,33.515,97,29.685]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[98,32.745,99,24.844]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[99,18.107,100,26.365,101,27.14,102,27.14]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[40,22.648,99,24.844]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3",[2,10.124,93,21.571,94,26.365,99,18.107]],["name/3",[103,2.004]],["text/3",[2,2.237,9,2.806,11,2.625,14,1.087,20,1.566,21,1.894,25,1.358,35,2.423,38,1.695,40,2.917,41,3.006,45,1.405,50,2.971,59,2.072,60,1.132,63,1.459,64,1.59,66,1.479,71,1.992,73,1.992,78,1.358,83,1.5,84,1.863,92,1.521,93,2.339,94,1.279,96,1.405,97,1.244,98,1.157,99,4.177,100,1.279,101,2.943,102,3.91,104,3.142,105,2.248,106,2.889,107,3.292,108,2.492,109,3.292,110,3.961,111,2.184,112,1.459,113,1.894,114,1.787,115,1.132,116,1.132,117,1.817,118,1.316,119,1.521,120,1.459,121,2.767,122,2.599,123,1.597,124,1.597,125,1.244,126,1.087,127,1.817,128,2.728,129,1.405,130,1.691,131,1.213,132,1.213,133,0.976,134,1.521,135,1.817,136,2.339,137,1.459,138,1.691,139,1.521,140,1.724,141,1.817,142,2.32,143,2.009,144,1.405,145,1.691,146,1.977,147,4.065,148,1.817,149,3.209,150,1.977,151,1.817,152,2.43,153,2.728,154,1.403,155,1.817,156,1.459,157,1.787,158,1.691,159,1.817,160,2.072,161,1.358,162,4.024,163,0.866,164,1.691,165,1.977,166,0.931,167,1.459,168,1.817,169,1.213,170,2.009,171,2.009,172,1.316,173,1.691,174,1.279,175,1.521,176,1.316,177,2.009,178,1.817,179,1.459,180,2.072,181,1.521,182,1.316,183,2.009,184,2.889,185,2.009,186,2.4,187,1.358,188,2.009,189,1.521,190,1.691,191,1.459,192,1.157,193,0.712,194,2.126,195,2.009,196,2.126,197,1.459,198,1.244,199,1.459,200,1.691,201,1.351,202,1.459,203,1.894,204,1.132,205,1.691,206,0.96,207,1.817,208,1.279,209,1.027,210,1.817,211,1.459,212,1.521,213,1.459,214,2.009,215,1.817,216,1.817,217,1.691,218,1.691,219,1.817,220,1.691,221,1.597,222,1.358,223,1.459,224,1.358,225,1.244,226,1.459,227,1.817,228,1.597,229,1.817]],["component/3",[46,0.543]],["title/4-1",[2,10.124,230,30.079,231,23.865,232,22.864]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[230,41.271,233,25.944]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[234,45.178,235,34.322]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[150,32.745,230,41.271]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[113,31.372,211,24.169]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4",[174,23.217,230,26.487,236,33.004,237,33.004,238,36.487]],["name/4",[230,1.455]],["text/4",[2,1.422,5,1.169,9,3.712,10,0.369,21,0.354,22,0.539,25,0.433,30,0.58,35,1.971,37,0.821,38,0.316,40,1.204,41,1.632,42,0.902,44,1.099,45,1.212,50,0.674,52,0.998,53,0.387,54,0.465,60,0.685,73,0.284,79,0.292,80,0.886,82,0.369,83,0.963,87,0.539,89,0.555,93,1.147,94,0.773,97,0.397,99,2.815,101,0.42,107,0.753,108,1.599,109,0.753,110,0.347,113,1.216,114,0.633,115,0.685,116,0.977,119,0.485,120,0.465,121,1.37,122,0.485,123,0.509,125,0.397,126,0.937,129,0.448,133,2.336,134,0.92,140,0.871,142,0.433,150,0.7,152,0.347,154,1.235,160,2.755,161,0.821,163,1.134,165,0.369,166,0.563,167,0.882,174,1.402,179,0.465,187,0.433,194,0.753,197,1.258,201,0.682,202,0.465,203,0.957,204,0.361,206,1.257,211,0.737,213,0.465,224,0.433,230,2.694,231,1.947,232,0.671,233,0.791,234,4.485,235,4.655,236,0.58,237,0.58,239,2.214,240,1.854,241,1.395,242,1.099,243,1.216,244,0.85,245,0.539,246,1.723,247,0.509,248,0.641,249,0.539,250,0.957,251,0.773,252,0.539,253,2.544,254,1.099,255,0.408,256,0.485,257,1.733,258,0.34,259,0.966,260,0.539,261,0.645,262,0.509,263,0.378,264,0.58,265,0.465,266,0.796,267,0.773,268,0.641,269,0.58,270,0.539,271,0.734,272,0.796,273,1.364,274,0.539,275,0.641,276,0.641,277,0.641,278,1.215,279,0.408,280,0.58,281,0.6,282,5.644,283,0.92,284,1.568,285,1.103,286,0.465,287,0.465,288,1.778,289,1.099,290,1.099,291,0.42,292,1.023,293,0.485,294,0.58,295,0.882,296,0.58,297,0.539,298,2.899,299,0.641,300,0.641,301,0.641,302,0.58,303,0.433,304,0.539,305,0.539,306,0.641,307,0.539,308,0.58,309,0.58,310,0.61,311,0.641,312,0.919,313,0.92,314,0.882,315,0.641,316,1.046,317,1.099,318,0.641,319,0.641,320,0.509,321,1.023,322,0.821,323,1.285,324,0.821,325,0.645,326,0.539,327,0.34,328,4.917,329,0.966,330,1.733,331,1.668,332,0.966,333,0.509,334,0.645,335,0.882,336,0.645,337,0.7,338,0.465,339,0.509,340,0.465,341,0.641,342,0.641,343,0.58,344,0.408,345,1.216,346,0.641,347,0.773,348,2.572,349,0.641,350,4.809,351,4.17,352,0.734,353,0.641,354,0.641,355,3.712,356,0.882,357,0.919,358,3.022,359,2.362,360,2.431,361,2.431,362,2.362,363,1.099,364,1.215,365,0.58,366,1.099,367,3.712,368,1.733,369,2.217,370,0.641,371,3.381,372,0.641,373,0.641,374,2.333,375,1.215,376,0.85,377,1.871,378,1.871,379,0.58,380,1.215,381,1.215,382,1.099,383,0.509,384,0.641,385,0.966,386,1.023,387,0.641,388,1.099,389,0.465,390,0.641,391,0.58,392,0.856,393,0.58,394,0.882,395,0.408,396,0.641,397,0.641,398,0.539,399,0.641,400,0.369,401,0.448,402,1.099,403,1.023,404,1.215,405,0.716,406,0.509,407,0.58,408,0.92,409,0.448,410,0.633,411,1.103,412,1.733,413,0.465,414,3.381,415,0.641,416,2.631,417,0.641,418,1.518,419,1.312,420,0.58,421,3.022,422,4.017,423,2.631,424,0.966,425,1.733,426,1.215,427,0.306,428,0.85,429,1.215,430,2.631,431,0.641,432,1.733,433,1.733,434,1.215,435,0.641,436,0.641,437,0.641,438,1.215,439,1.298,440,1.828,441,2.203,442,0.539,443,0.641,444,0.641,445,1.215,446,0.641,447,1.312,448,1.215,449,1.215,450,1.733,451,0.641,452,1.215,453,0.937,454,0.641,455,0.641,456,0.641,457,0.882,458,0.509,459,0.58,460,0.641,461,0.641,462,0.641,463,0.641,464,0.641,465,0.641,466,0.58,467,0.641,468,0.408,469,0.641,470,1.215,471,1.215,472,2.203,473,1.215,474,0.641,475,1.215,476,0.641,477,0.408,478,0.465,479,0.641,480,0.465,481,1.215,482,1.215,483,1.215,484,0.465,485,0.641,486,0.641,487,0.58,488,1.733,489,0.641,490,0.641,491,0.397,492,1.733,493,0.633,494,0.58,495,0.641,496,1.377,497,0.641,498,0.58,499,0.34,500,0.539,501,0.509,502,0.685,503,1.215,504,0.361,505,1.468,506,0.485,507,0.306,508,0.641,509,2.631,510,0.42,511,2.631,512,0.509,513,0.753,514,0.509,515,0.408,516,0.966,517,0.966,518,0.58,519,0.977,520,0.539,521,0.465,522,0.311,523,1.023,524,0.301,525,0.408,526,0.539,527,0.433,528,0.433,529,0.485]],["component/4",[46,0.543]],["title/5-1",[154,16.931,258,21.978,522,20.126,530,27.14]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[201,22.369,405,33.505]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5",[35,14.664,201,18.86,491,29.685]],["name/5",[531,2.004]],["text/5",[2,1.272,9,3.648,10,0.791,23,1.786,35,2.929,40,2.074,41,2.542,42,1.74,49,0.829,50,0.534,59,0.829,63,0.997,64,1.14,68,0.929,73,0.609,80,0.702,83,2.928,84,0.429,87,2.307,89,1.525,90,0.829,98,1.925,104,0.961,110,0.743,112,2.426,114,0.715,121,2.119,126,2.201,131,0.829,133,1.977,142,1.663,146,1.417,154,2.95,160,2.827,163,2.018,165,1.925,169,1.486,172,1.612,193,0.872,201,3.485,203,1.358,204,1.387,206,2.488,211,1.73,222,1.663,225,1.524,226,2.426,233,0.627,241,0.729,246,0.9,250,0.758,253,3.24,258,1.305,261,0.729,266,0.9,281,0.679,285,0.874,310,0.69,323,1.991,325,2.159,328,3.96,336,1.773,337,0.791,338,0.997,344,0.874,345,0.758,347,0.874,348,2.933,351,3.758,357,0.729,359,0.874,362,2.59,374,2.661,394,1.786,400,0.791,401,0.961,405,3.768,409,0.961,411,0.874,413,0.997,418,1.236,424,1.092,440,1.807,447,1.863,459,1.243,484,0.997,491,2.9,499,1.305,505,1.977,507,1.176,510,2.666,522,0.667,524,1.572,530,0.9,532,1.092,533,1.243,534,1.156,535,5.471,536,1.092,537,1.374,538,1.374,539,1.374,540,1.612,541,1.786,542,2.521,543,1.374,544,0.929,545,3.342,546,2.461,547,1.374,548,2.533,549,2.226,550,2.226,551,1.374,552,1.156,553,1.092,554,0.997,555,2.461,556,0.715,557,3.342,558,2.461,559,5.471,560,1.106,561,3.342,562,2.226,563,2.017,564,0.9,565,0.961,566,1.04,567,1.215,568,0.584,569,1.243,570,1.374,571,3.426,572,0.961,573,1.566,574,1.243,575,2.918,576,0.874,577,1.243,578,0.874,579,0.961,580,2.226,581,0.851,582,1.374,583,2.656,584,1.243,585,0.9,586,1.374,587,1.374,588,1.374,589,0.81,590,1.374,591,1.156,592,1.374,593,1.374,594,1.374,595,2.226,596,2.461,597,1.374,598,1.156,599,0.874,600,1.243,601,1.374,602,1.092]],["component/5",[46,0.543]],["title/6-1",[603,52.885]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[604,52.885]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[605,63.179]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6-4",[71,25.198,180,34.322]],["name/6-4",[]],["text/6-4",[]],["component/6-4",[]],["title/6-5",[84,17.743,181,43.046]],["name/6-5",[]],["text/6-5",[]],["component/6-5",[]],["title/6-6",[606,55.505]],["name/6-6",[]],["text/6-6",[]],["component/6-6",[]],["title/6-7",[607,55.505]],["name/6-7",[]],["text/6-7",[]],["component/6-7",[]],["title/6-8",[608,58.786]],["name/6-8",[]],["text/6-8",[]],["component/6-8",[]],["title/6-9",[609,58.786]],["name/6-9",[]],["text/6-9",[]],["component/6-9",[]],["title/6-10",[610,52.885]],["name/6-10",[]],["text/6-10",[]],["component/6-10",[]],["title/6-11",[611,63.179]],["name/6-11",[]],["text/6-11",[]],["component/6-11",[]],["title/6-12",[612,58.786]],["name/6-12",[]],["text/6-12",[]],["component/6-12",[]],["title/6-13",[613,55.505]],["name/6-13",[]],["text/6-13",[]],["component/6-13",[]],["title/6-14",[614,52.885]],["name/6-14",[]],["text/6-14",[]],["component/6-14",[]],["title/6-15",[243,26.451,513,29.685,568,20.378]],["name/6-15",[]],["text/6-15",[]],["component/6-15",[]],["title/6",[81,24.506,109,29.685,110,25.924]],["name/6",[109,1.241]],["text/6",[1,0.377,2,1.298,9,3.839,11,0.284,12,0.318,20,0.263,27,0.886,35,1.443,39,0.339,40,0.437,41,1.517,42,0.571,49,0.347,50,2.134,53,2.248,64,1.286,66,0.473,67,1.674,70,0.742,71,1.23,72,0.377,73,0.697,75,0.305,79,0.916,80,0.294,81,0.294,82,0.332,83,0.687,84,2.311,87,0.255,89,0.718,98,0.632,99,0.252,102,1.03,109,0.68,110,2.014,113,0.606,114,0.3,118,1.315,119,1.191,121,1.253,126,1.501,131,1.212,132,1.212,136,1.253,140,0.289,149,2.711,152,2.873,153,3.569,154,1.402,155,1.423,157,1.786,160,0.95,162,0.436,163,1.343,165,0.332,166,1.589,180,1.453,181,1.823,182,0.377,184,2.026,186,1.404,187,1.063,189,0.831,190,0.924,191,1.747,192,0.906,193,1.815,196,1.243,201,1.673,203,0.318,206,1.489,209,0.294,211,1.324,225,0.974,233,1.565,240,0.484,241,1.472,243,2.346,247,0.457,249,0.484,250,0.318,253,1.302,258,0.582,261,0.834,263,0.647,264,0.521,267,0.366,273,0.356,281,0.542,298,1.893,310,0.289,312,0.305,322,0.389,323,1.18,327,0.834,328,1.929,334,1.065,336,0.582,344,0.698,351,0.819,352,1.212,357,2.12,369,0.975,374,1.026,376,0.402,392,0.284,400,0.906,410,0.571,418,0.289,427,1.78,440,1.302,477,0.698,480,0.418,493,1.253,502,0.618,504,0.324,505,1.169,507,0.275,513,3.174,519,1.564,523,0.484,524,1.132,527,1.063,528,1.357,530,0.377,535,0.993,540,1.577,541,0.418,548,3.146,556,2.338,560,0.707,564,0.719,567,0.284,568,3.112,573,0.698,575,0.501,576,1.001,581,0.974,589,2.355,599,0.366,603,1.191,604,0.436,605,0.993,606,0.457,607,0.457,608,0.484,609,0.484,610,0.436,611,0.521,612,0.484,613,0.457,614,0.436,615,1.445,616,2.703,617,3.379,618,4.895,619,2.901,620,2.022,621,4.265,622,2.008,623,1.573,624,2.008,625,0.742,626,1.386,627,0.576,628,0.576,629,0.576,630,0.521,631,0.576,632,1.816,633,2.531,634,0.927,635,0.457,636,0.418,637,0.289,638,0.79,639,0.831,640,0.594,641,0.576,642,0.402,643,0.521,644,0.797,645,0.993,646,1.142,647,0.831,648,1.098,649,1.975,650,3.368,651,3.103,652,0.993,653,2.177,654,0.872,655,3.103,656,0.993,657,3.103,658,1.098,659,1.423,660,0.402,661,0.576,662,0.436,663,1.573,664,1.573,665,0.457,666,0.576,667,0.576,668,0.576,669,2.336,670,0.484,671,0.347,672,0.576,673,0.576,674,0.457,675,0.576,676,2.105,677,0.484,678,0.366,679,1.573,680,2.775,681,1.098,682,1.816,683,2.205,684,1.098,685,1.098,686,2.51,687,2.775,688,1.098,689,0.576,690,0.576,691,1.573,692,0.576,693,1.423,694,1.098,695,1.098,696,0.457,697,0.521,698,0.719,699,0.831,700,0.993,701,1.098,702,1.098,703,1.098,704,0.436,705,0.457,706,1.098,707,0.366,708,0.576,709,0.576,710,0.576,711,0.68,712,0.542,713,0.402,714,0.457,715,0.457,716,1.573,717,0.576,718,0.576,719,0.924,720,0.993,721,0.576,722,0.576,723,0.576,724,0.993,725,0.576,726,0.484,727,0.576,728,0.521,729,0.993,730,0.576,731,1.1,732,0.576,733,1.573,734,1.098,735,1.098,736,2.407,737,0.457,738,0.576,739,0.576,740,0.484,741,0.576,742,1.098,743,1.098,744,0.767,745,0.68,746,0.484,747,0.521,748,1.25,749,1.03,750,1.191,751,0.366,752,0.698,753,0.719,754,0.576,755,0.457,756,0.521,757,0.521,758,0.831,759,0.576,760,0.576,761,0.339,762,0.576,763,0.576,764,0.576,765,0.576,766,0.576,767,0.576,768,0.576,769,0.457,770,0.576,771,1.098,772,0.576,773,1.098,774,0.576,775,1.098,776,0.576,777,0.576,778,0.576,779,0.576,780,0.576,781,0.576,782,0.576,783,1.1,784,0.576,785,0.831,786,0.576,787,0.576,788,0.418,789,0.521,790,0.318,791,0.377,792,0.521,793,0.993,794,1.098,795,0.418,796,0.576,797,1.098,798,0.576,799,0.436,800,0.457,801,0.521,802,0.576,803,0.521,804,0.324,805,0.457,806,0.484]],["component/6",[46,0.543]],["title/7",[761,41.163]],["name/7",[761,1.181]],["text/7",[2,1.852,9,3.614,10,1.801,35,3.007,40,3.361,41,2.324,50,1.215,64,1.448,83,1.366,84,0.976,87,2.715,93,1.627,105,2.048,118,2.048,121,2.572,126,1.691,133,2.975,136,1.627,140,1.57,149,1.887,150,1.801,152,1.691,154,2.844,156,2.269,193,1.75,196,1.936,203,1.725,206,1.494,211,2.1,233,1.427,253,1.186,261,1.658,281,1.544,310,1.57,323,2.1,337,1.801,347,1.989,348,3.451,351,3.946,359,3.143,360,3.236,361,4.012,362,3.143,374,2.526,410,1.627,411,1.989,440,3.312,493,1.627,505,1.518,507,2.927,515,1.989,573,1.989,575,2.254,589,1.842,620,1.842,637,1.57,638,1.57,704,2.367,712,1.544,761,5.434,807,3.126,808,2.269,809,5.53,810,3.126,811,2.367,812,2.113,813,2.631,814,2.484,815,2.113,816,2.828,817,2.828,818,2.269,819,4.468,820,3.126,821,3.126,822,2.828,823,3.126,824,3.126,825,2.186,826,4.94,827,4.94,828,2.828,829,4.468,830,2.269,831,1.936,832,3.126]],["component/7",[46,0.543]],["title/8",[199,34.797,804,27.011,833,30.5]],["name/8",[834,2.004]],["text/8",[2,1.342,7,1.148,9,3.553,11,0.865,33,2.522,35,2.653,40,1.614,41,2.083,42,2.859,50,1.185,64,1.413,66,2.366,67,1.821,79,0.8,83,2.4,87,2.147,89,1.848,98,1.757,104,2.133,105,1.148,115,0.987,126,1.65,131,1.841,133,0.851,139,1.327,154,1.655,159,1.585,163,1.314,166,1.413,169,1.841,193,1.435,200,4.078,201,2.549,203,0.967,204,0.987,206,1.936,208,1.115,211,1.297,226,4.703,227,1.585,231,3.163,241,1.618,253,1.838,310,2.035,322,1.184,323,0.745,324,1.184,328,3,335,1.272,336,0.929,344,1.115,345,0.967,347,1.115,348,2.73,351,4.437,359,2.577,360,2.653,361,3.173,362,2.577,374,2.807,386,1.475,400,2.333,413,1.272,418,0.88,428,2.832,440,2.191,499,1.618,505,1.482,507,1.458,510,2.653,540,1.998,553,3.219,556,1.588,559,2.759,560,1.821,562,1.585,563,1.058,569,1.585,572,2.133,573,1.941,575,2.506,581,1.085,583,3.219,589,2.855,591,2.567,595,3.664,620,2.855,646,2.94,676,4.073,704,1.327,756,1.585,761,2.387,804,4.056,812,2.061,818,1.272,830,1.272,833,4.58,835,1.752,836,2.759,837,1.009,838,1.585,839,1.585,840,2.832,841,1.752,842,3.05,843,1.752,844,1.752,845,4.05,846,3.05,847,3.664,848,3.664,849,3.664,850,3.05,851,3.05,852,3.05,853,3.05,854,1.752,855,1.752,856,1.752,857,1.225,858,3.05,859,1.752,860,3.05,861,1.752,862,1.184,863,1.115,864,3.05,865,3.711,866,1.752,867,1.475,868,4.967,869,2.567,870,1.585,871,1.585,872,1.752]],["component/8",[46,0.543]],["title/9-1",[33,24.954,40,19.096,201,18.86]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[35,17.392,41,21.571]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9",[35,18.75,40,16.506,491,25.66]],["name/9",[873,2.004]],["text/9",[2,1.46,9,3.679,20,0.689,33,2.598,35,2.806,40,3.62,41,2.66,42,0.786,50,1.695,59,0.912,60,0.851,64,0.7,68,1.021,79,0.689,81,0.772,82,0.87,83,1.576,84,1.125,87,2.821,89,2.519,90,1.616,91,2.362,93,1.394,95,1.096,105,0.989,107,1.658,110,0.817,114,0.786,115,0.851,118,0.989,121,2.271,126,0.817,131,0.912,133,1.751,140,0.759,146,0.87,152,0.817,154,3.436,157,0.786,163,1.88,167,1.096,169,0.912,193,1.277,201,2.35,204,0.851,206,2.855,211,0.642,244,1.056,253,1.016,261,1.42,266,0.989,310,2.191,323,1.138,335,1.944,336,1.42,337,0.87,347,1.704,348,3.111,351,4.301,359,1.704,360,1.754,361,2.362,362,1.704,369,0.734,374,2.23,408,2.027,409,1.056,418,0.759,427,0.722,440,1.448,468,0.961,484,1.096,491,0.935,493,0.786,499,0.801,502,1.509,505,1.751,507,1.723,510,0.989,513,0.935,548,2.986,549,1.366,556,1.394,560,2.686,564,0.989,572,1.056,575,2.519,581,3.091,589,3.253,591,1.271,620,0.89,633,0.851,637,1.345,644,1.944,649,2.928,660,1.056,678,1.704,737,2.128,740,2.253,751,0.961,761,3.253,805,1.2,809,2.865,817,3.262,818,1.096,819,5.758,822,1.366,825,1.056,828,1.366,829,3.262,831,0.935,863,0.961,874,1.366,875,2.422,876,2.422,877,1.366,878,1.944,879,1.754,880,2.865,881,0.935,882,1.366,883,1.2,884,0.89,885,2.677,886,1.271,887,2.677,888,1.366,889,0.989,890,1.366,891,1.056,892,1.51,893,3.606,894,1.144,895,4.362,896,1.51,897,1.51,898,1.51,899,1.51,900,1.51,901,1.51,902,1.51,903,1.51,904,1.51,905,1.51,906,1.51,907,1.51,908,1.51,909,1.51,910,1.2,911,3.606,912,1.51,913,2.677,914,2.677,915,2.677,916,1.51,917,1.144,918,1.51,919,1.51,920,1.51,921,2.677]],["component/9",[46,0.543]],["title/10",[649,37.049]],["name/10",[649,1.063]],["text/10",[2,2.014,9,3.68,35,2.725,40,1.602,41,2.274,50,2.002,53,1.464,64,1.863,75,1.286,79,1.835,80,1.24,81,1.24,83,1.757,84,1.255,87,1.782,89,1.106,100,3.278,110,1.311,111,2.559,116,2.266,124,1.927,125,2.49,133,1.178,149,1.464,152,2.786,153,1.927,154,1.643,157,3.121,160,2.427,161,1.639,163,1.045,166,1.123,182,1.588,193,1.424,201,1.582,203,1.338,206,1.159,211,1.031,235,3.619,250,1.338,251,1.543,253,1.526,261,2.733,263,1.429,272,1.588,281,1.197,298,1.338,310,1.218,312,2.733,323,1.031,324,1.639,327,2.133,328,2.49,333,1.927,337,1.396,348,1.366,351,2.093,357,1.286,363,3.637,374,1.24,410,3.121,427,1.159,440,1.311,477,1.543,499,1.286,502,1.366,505,1.953,507,1.922,513,1.502,522,1.178,540,4.354,548,1.311,550,2.193,556,1.262,560,1.09,563,1.464,565,1.695,567,1.197,589,2.37,604,1.836,615,2.093,616,2.919,618,2.041,633,1.366,637,2.02,649,4.967,660,2.811,678,4.56,753,1.588,758,1.836,785,1.836,791,1.588,795,1.76,800,1.927,815,1.639,825,1.695,871,2.193,889,3.374,894,3.9,922,5.151,923,1.836,924,4.021,925,2.425,926,4.021,927,4.021,928,4.021,929,4.021,930,1.927,931,2.425,932,2.193,933,2.425,934,2.425,935,2.041,936,2.041,937,2.193,938,3.637,939,2.425,940,1.639,941,2.425]],["component/10",[46,0.543]],["title/11",[250,31.372,530,37.239]],["name/11",[1,1.313]],["text/11",[2,2.278,3,5.543,4,5.543,6,5.543,8,5.543,10,3.793,11,3.252,12,3.634,13,4.19,14,3.562,16,5.957,17,4.986,18,5.957,19,5.957,20,3.005,21,3.634,22,5.543,23,4.781,24,5.543,25,4.45,27,3.711,35,2.015,40,3.365,108,4.781,204,3.711,232,3.634,345,3.634,392,3.252,522,3.199,942,3.634,943,6.586]],["component/11",[46,0.543]],["title/12-1",[35,17.392,392,28.076]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[21,26.451,944,32.394,945,34.797]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[35,17.392,507,27.172]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[258,30.156,505,27.614]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[2,10.124,35,12.675,87,18.365,115,23.349]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[2,10.124,35,12.675,40,16.506,115,23.349]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[35,17.392,113,31.372]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[328,35.208,513,35.208]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12",[2,11.712,35,14.664,345,26.451]],["name/12",[946,2.004]],["text/12",[2,1.987,5,1.141,9,3.437,10,1.557,14,0.442,20,0.982,21,0.451,25,0.552,27,0.861,33,1.12,35,2.679,37,0.552,38,2.745,40,1.883,41,2.496,42,1.12,49,0.493,50,1.954,52,0.88,53,0.922,58,0.552,59,0.493,63,1.109,64,1.481,71,0.362,73,1.416,75,0.433,76,0.552,79,2.294,80,1.382,83,2.197,84,2.105,87,1.789,89,1.458,90,1.632,92,0.618,93,1.664,94,1.72,98,1.557,99,0.94,101,1,104,0.571,105,1,107,1.332,108,1.562,109,0.946,110,2.183,111,0.52,113,0.843,114,1.407,115,1.212,116,0.46,117,0.739,119,0.618,120,0.593,121,2.617,122,1.156,123,0.649,124,0.649,125,0.506,126,1.967,129,1.504,131,1.299,132,0.922,133,0.742,140,1.827,142,1.032,144,0.571,146,0.88,149,3.035,150,0.88,152,1.728,154,1.797,160,1.929,163,0.927,165,1.239,166,0.707,169,0.493,174,0.52,179,0.593,192,1.239,193,2.052,201,1.859,202,0.593,203,1.187,204,0.861,206,1.028,208,0.52,209,0.781,211,0.347,213,0.593,218,0.687,220,0.687,222,0.552,232,0.451,233,2.42,241,2.332,243,0.451,244,1.504,246,0.535,250,0.451,251,0.52,253,2.865,258,1.141,259,0.649,261,0.81,265,0.593,266,0.535,267,0.52,271,0.493,273,2.499,274,0.687,287,0.593,298,1.764,302,0.739,310,0.767,312,1.695,316,0.922,321,0.687,323,2.254,324,1.032,325,0.433,328,3.113,334,0.433,336,0.433,337,0.88,338,0.593,345,1.764,347,1.72,348,1.212,351,2.289,352,0.922,357,0.81,359,2.034,360,1.771,361,1.409,362,1.72,374,1.634,385,0.649,388,2.891,392,1.062,394,1.562,400,1.239,401,1.068,405,1.593,410,1.407,411,1.369,427,0.39,439,1.268,440,1.462,453,0.442,468,0.52,477,0.52,484,0.593,491,0.506,499,2.332,502,0.46,505,1.313,506,1.156,507,2.769,513,1.674,515,1.369,521,0.593,522,1.552,524,0.384,528,1.827,529,1.156,534,0.687,536,0.649,540,2.88,541,1.963,542,2.253,548,1.163,552,0.687,556,0.425,560,0.967,563,0.493,564,0.535,565,0.571,566,0.618,568,0.649,575,2.007,578,1.369,579,1.068,589,1.268,600,0.739,616,1.109,617,0.649,618,0.687,630,0.739,633,2.05,634,0.9,635,0.649,636,1.109,640,0.442,642,0.571,698,0.535,699,2.047,700,1.381,712,0.403,713,0.571,720,0.739,744,0.571,749,0.535,751,0.52,753,1,769,0.649,783,0.571,789,1.381,791,0.535,795,0.593,811,0.618,812,2.16,815,0.552,818,0.593,831,1.332,837,0.88,863,0.52,878,0.593,889,0.535,917,2.42,923,1.156,944,1.454,945,2.93,947,1.527,948,0.817,949,1.629,950,1.156,951,0.739,952,0.687,953,0.817,954,0.618,955,0.817,956,0.506,957,0.618,958,1,959,0.687,960,1.381,961,0.649,962,0.817,963,1.109,964,0.571,965,1.156,966,0.817,967,0.817,968,0.817,969,0.687,970,0.739,971,0.817,972,0.817,973,0.817,974,1.629,975,0.618,976,1.527,977,0.739,978,0.739,979,0.618,980,1.454,981,0.817,982,0.739,983,2.151,984,0.817,985,0.739,986,0.687,987,0.739,988,0.817,989,0.552,990,1.214,991,1.285,992,0.817,993,0.739,994,0.817,995,0.817,996,2.445,997,0.817,998,0.739,999,0.739,1000,0.817,1001,1.527,1002,0.817,1003,0.649,1004,0.649,1005,0.571,1006,0.593,1007,0.571,1008,0.739,1009,0.535,1010,0.817]],["component/12",[46,0.543]],["title/13-1",[1011,69.847]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[11,23.672,66,20.658,67,21.554]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[11,23.672,66,20.658,67,21.554]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13-4",[174,26.365,176,27.14,211,17.615,235,25.015]],["name/13-4",[]],["text/13-4",[]],["component/13-4",[]],["title/13-5",[1012,69.847]],["name/13-5",[]],["text/13-5",[]],["component/13-5",[]],["title/13-6",[66,20.658,67,21.554,69,28.249]],["name/13-6",[]],["text/13-6",[]],["component/13-6",[]],["title/13-7",[66,20.658,67,21.554,439,28.249]],["name/13-7",[]],["text/13-7",[]],["component/13-7",[]],["title/13-8",[35,17.392,41,21.571]],["name/13-8",[]],["text/13-8",[]],["component/13-8",[]],["title/13-9",[67,21.554,71,21.245,180,28.938]],["name/13-9",[]],["text/13-9",[]],["component/13-9",[]],["title/13",[35,14.664,66,20.658,113,26.451]],["name/13",[645,1.813]],["text/13",[2,1.78,9,3.59,11,3.435,14,0.684,20,0.822,21,0.369,33,1.992,35,2.716,36,1.259,37,0.855,38,0.33,40,1.39,41,1.678,42,0.658,49,0.764,50,1.214,58,0.452,59,0.403,61,0.394,64,0.31,66,3.557,67,3.793,69,2.909,71,1.696,75,0.355,76,0.452,77,0.506,78,0.855,79,0.822,80,0.647,83,2.258,84,1.38,87,0.798,89,1.592,90,0.403,93,0.937,95,1.307,99,0.292,101,0.829,102,2.046,105,0.829,107,0.783,108,0.485,110,0.361,113,0.698,114,0.937,115,0.377,116,0.377,118,0.438,120,0.485,121,1.189,122,1.363,125,0.783,126,0.684,129,0.467,133,0.875,140,0.635,149,0.764,152,0.684,153,0.531,154,2.74,158,0.563,160,3.12,161,0.855,163,1.504,169,0.403,174,0.425,176,0.438,180,1.379,181,0.506,182,0.438,184,1.515,186,0.884,187,0.452,189,0.506,190,0.563,191,0.485,192,1.316,194,1.115,196,1.115,197,0.485,201,2.118,202,1.307,203,0.698,206,1.493,209,0.342,211,1.88,225,0.783,231,0.385,232,0.698,233,0.822,235,1.379,239,1.065,241,0.355,246,1.179,250,0.369,251,0.425,253,2.593,256,0.506,259,1.815,261,1.212,263,0.394,266,1.496,271,0.403,273,0.414,281,0.889,288,0.855,296,0.605,298,0.698,304,0.563,310,1.753,312,0.671,313,0.506,314,0.918,323,0.538,324,0.452,325,0.671,327,0.355,328,4.233,334,0.355,344,0.805,347,0.425,348,1.535,351,3.099,352,0.403,357,1.212,359,1.733,360,1.496,361,1.784,362,1.453,365,1.144,366,2.463,374,1.392,378,1.415,386,0.563,392,0.625,394,0.485,405,0.394,406,0.531,409,0.467,410,3.099,411,0.805,418,0.635,427,0.319,428,0.884,439,0.745,440,1.235,453,1.473,457,0.918,468,0.805,477,1.146,484,1.307,496,1.431,499,0.671,502,1.015,505,1.323,507,0.605,512,1.005,515,0.425,522,0.325,525,1.146,526,0.563,527,0.452,530,0.829,540,1.179,541,1.658,542,2.369,548,2.069,556,0.348,560,1.027,563,1.644,564,0.438,565,1.597,566,0.958,567,0.33,568,0.284,573,0.805,574,0.605,589,0.745,598,0.563,599,0.425,633,0.377,636,0.485,637,0.635,638,0.905,640,0.974,646,1.977,660,1.259,662,0.958,674,0.531,676,1.544,696,0.531,697,0.605,698,1.179,711,0.783,712,1.128,745,0.414,751,0.425,752,1.733,755,0.531,785,0.506,790,0.369,791,0.438,795,0.918,808,1.307,816,0.605,818,0.485,825,0.467,831,0.414,857,1.259,865,2.111,869,0.563,879,0.438,881,0.414,883,1.005,889,0.438,890,0.605,891,0.884,917,0.506,937,0.605,938,1.144,949,1.73,950,1.363,954,0.506,957,0.958,961,0.531,965,0.958,969,0.563,975,0.506,996,2.066,999,0.605,1003,0.531,1007,0.467,1009,0.438,1013,0.605,1014,0.605,1015,0.918,1016,0.563,1017,0.668,1018,0.668,1019,0.467,1020,1.801,1021,0.531,1022,1.179,1023,1.73,1024,0.605,1025,1.904,1026,0.605,1027,4.438,1028,0.668,1029,0.668,1030,2.892,1031,0.668,1032,0.563,1033,0.605,1034,1.005,1035,0.668,1036,0.605,1037,0.563,1038,0.605,1039,0.668,1040,1.144,1041,0.605,1042,1.629,1043,0.668,1044,1.265,1045,1.801,1046,1.265,1047,1.801,1048,1.144,1049,0.668,1050,0.668,1051,1.923,1052,0.668,1053,0.668,1054,0.668,1055,0.668,1056,0.958,1057,1.307,1058,1.265,1059,1.005,1060,1.065,1061,0.605,1062,0.605,1063,0.605,1064,0.605,1065,0.668,1066,0.668,1067,0.605,1068,0.467,1069,0.531,1070,0.668,1071,0.668,1072,0.563,1073,0.668,1074,0.668,1075,0.958,1076,0.605,1077,0.668,1078,0.605,1079,0.563,1080,1.265,1081,1.265,1082,2.723,1083,1.265,1084,0.605,1085,0.668,1086,3.826,1087,0.563,1088,0.506,1089,0.668,1090,0.605,1091,0.668,1092,1.265,1093,0.531,1094,0.668,1095,0.605,1096,0.668,1097,0.605,1098,0.668,1099,0.668,1100,0.668,1101,0.563,1102,0.506,1103,0.605,1104,0.668,1105,0.958,1106,1.065,1107,0.467,1108,0.605,1109,0.668,1110,0.506,1111,0.668,1112,0.668,1113,0.668]],["component/13",[46,0.543]],["title/14-1",[121,21.571,198,25.66,323,17.615,560,18.632]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[121,21.571,206,19.803,323,17.615,1114,28.001]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[206,22.909,620,28.249,884,28.249]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14-4",[203,22.864,620,24.419,1114,28.001,1115,32.927]],["name/14-4",[]],["text/14-4",[]],["component/14-4",[]],["title/14-5",[203,26.451,884,28.249,1114,32.394]],["name/14-5",[]],["text/14-5",[]],["component/14-5",[]],["title/14-6",[84,14.96,376,33.515,615,24.954]],["name/14-6",[]],["text/14-6",[]],["component/14-6",[]],["title/14-7",[493,24.954,568,20.378,731,33.515]],["name/14-7",[]],["text/14-7",[]],["component/14-7",[]],["title/14",[48,39.75,81,29.066]],["name/14",[1116,2.004]],["text/14",[2,1.351,5,0.623,9,3.811,35,1.105,36,2.052,39,0.692,41,1.592,42,0.611,50,1.826,59,0.709,60,0.661,61,0.692,64,1.36,66,0.506,71,0.52,73,0.946,76,0.793,83,0.933,84,1.93,89,0.536,95,0.852,99,0.933,114,1.881,115,0.661,121,1.111,126,2.541,133,1.037,136,1.528,146,1.229,154,1.2,163,1.557,165,0.676,169,0.709,193,0.416,201,2.312,203,2.315,206,2.808,208,0.747,211,1.783,253,2.098,262,0.933,273,0.727,281,0.58,285,0.747,287,0.852,291,0.769,293,0.889,295,0.852,298,2.315,303,0.793,310,1.072,312,0.623,323,0.907,325,0.623,327,2.727,336,0.623,340,3.411,345,0.648,347,1.358,348,3.116,351,4.779,352,1.289,359,1.868,360,1.398,361,1.398,362,1.358,369,3.262,374,3.305,376,0.821,378,1.322,392,1.45,394,0.852,400,0.676,405,1.258,406,0.933,409,2.052,410,3.616,411,0.747,427,2.005,440,2.541,468,1.358,477,0.747,478,0.852,493,0.611,505,1.426,519,2.648,522,1.037,524,0.552,542,2.598,548,1.588,554,0.852,556,1.881,560,1.625,567,0.58,568,1.536,572,1.492,573,0.747,615,0.611,616,0.852,619,0.852,620,0.692,625,1.984,626,1.229,633,0.661,638,0.59,640,0.635,654,3.734,696,0.933,699,2.223,707,1.358,712,0.58,719,0.988,731,2.527,745,0.727,751,0.747,752,1.358,790,1.62,803,1.062,804,3.311,831,0.727,833,0.747,838,1.062,878,0.852,883,3.334,884,3.259,894,0.889,956,0.727,1006,0.852,1009,0.769,1019,1.492,1025,0.821,1069,2.333,1110,1.616,1114,3.737,1115,3.334,1117,0.889,1118,1.931,1119,1.696,1120,0.821,1121,1.062,1122,1.174,1123,2.936,1124,1.174,1125,1.174,1126,1.174,1127,1.174,1128,2.134,1129,1.174,1130,1.174,1131,2.134,1132,1.174,1133,1.174,1134,1.062,1135,4.65,1136,4.195,1137,2.134,1138,1.174,1139,1.174,1140,2.134,1141,2.134,1142,1.174,1143,1.174,1144,1.931,1145,1.931,1146,2.134,1147,2.134,1148,2.052,1149,1.174,1150,0.933,1151,2.936,1152,2.936,1153,1.174,1154,1.174,1155,1.174,1156,1.174,1157,3.614,1158,1.174,1159,1.174,1160,1.174,1161,1.174,1162,1.696,1163,2.936,1164,1.174,1165,1.062,1166,1.174,1167,1.931,1168,0.821,1169,0.793,1170,0.933,1171,1.174,1172,1.174,1173,0.852,1174,0.793,1175,0.988,1176,1.174,1177,1.174,1178,1.174,1179,2.655,1180,3.269,1181,0.988,1182,0.988,1183,1.062,1184,1.174]],["component/14",[46,0.543]],["title/15-1",[40,22.648,507,27.172]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[35,17.392,113,31.372]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15",[136,29.597,1185,45.178]],["name/15",[1186,2.004]],["text/15",[2,1.331,9,3.681,13,1.327,20,0.952,25,1.41,34,2.321,35,2.278,38,2.282,40,1.412,41,2.067,42,2.405,50,1.796,67,2.078,79,0.952,80,1.812,82,1.201,83,0.912,84,1.106,87,1.571,89,0.952,95,1.514,99,1.549,116,1.175,126,1.128,132,1.259,136,4.042,140,1.048,152,1.128,154,1.448,156,3.354,157,3.455,160,3.289,163,1.991,169,2.139,172,1.366,182,1.366,193,1.636,198,1.292,201,0.821,211,1.507,212,3.498,231,1.201,253,1.753,263,1.229,281,1.75,286,2.573,288,1.41,291,2.321,310,2.737,312,1.106,314,1.514,316,3.289,328,2.861,335,1.514,337,1.201,348,1.175,351,3.177,357,1.88,359,1.327,360,1.366,361,2.321,362,1.327,374,1.066,378,1.292,392,1.03,410,3.455,418,1.048,427,1.694,440,1.128,453,1.128,468,1.327,478,1.514,499,1.88,502,1.175,504,1.175,505,1.721,507,1.694,532,1.658,540,3.026,542,2.195,548,1.128,554,1.514,560,0.938,563,2.139,567,1.03,589,2.088,599,1.327,626,1.201,711,1.292,719,1.756,752,1.327,791,1.366,795,2.573,800,2.816,818,1.514,825,1.458,889,1.366,923,1.579,930,3.671,949,1.579,950,1.579,1019,1.458,1033,1.887,1048,1.887,1051,1.756,1075,2.683,1168,4.267,1169,1.41,1173,2.573,1187,1.756,1188,1.658,1189,1.887,1190,1.41,1191,1.756,1192,1.756,1193,1.366,1194,3.544,1195,2.086,1196,2.086,1197,2.086,1198,4.62,1199,2.086,1200,2.086,1201,2.086,1202,2.086,1203,2.086,1204,2.086,1205,2.086,1206,2.086,1207,2.086,1208,2.086,1209,1.887,1210,1.514,1211,2.983,1212,2.086,1213,1.756,1214,3.544,1215,3.544,1216,3.544,1217,3.544,1218,1.887,1219,1.887,1220,2.086,1221,2.086,1222,3.544,1223,3.544,1224,3.544,1225,2.086,1226,2.086,1227,3.544,1228,2.086,1229,2.086,1230,2.086,1231,2.086,1232,3.544,1233,3.544,1234,3.544]],["component/15",[46,0.543]],["title/16",[223,34.797,345,26.451,517,38.092]],["name/16",[1235,2.004]],["text/16",[2,2.149,9,3.531,33,2.603,35,2.768,36,2.219,38,1.568,40,2.464,41,2.347,50,1.943,64,2.316,83,2.185,89,1.449,90,1.916,92,3.786,93,1.653,97,1.966,98,3.563,105,2.079,106,2.672,113,1.752,140,1.595,149,1.916,166,2.316,181,3.786,201,1.967,223,6.384,239,2.672,241,3.281,246,2.079,250,1.752,310,3.108,312,1.684,316,1.916,324,2.145,345,2.759,374,1.623,378,1.966,392,1.568,405,1.871,418,1.595,499,2.652,501,2.523,517,4.916,534,2.672,536,3.974,540,3.275,541,3.63,575,3.203,633,2.818,715,2.523,791,3.275,812,2.145,863,2.02,963,2.304,990,3.974,1068,2.219,1144,2.871,1236,2.871,1237,8.487,1238,3.174,1239,3.174,1240,5,1241,5,1242,3.174,1243,2.304,1244,3.174,1245,3.174,1246,3.174,1247,3.174,1248,3.174,1249,5,1250,2.871,1251,3.174,1252,3.174,1253,3.174,1254,7.635,1255,3.174,1256,3.174,1257,3.174,1258,5,1259,5,1260,3.174,1261,3.174,1262,3.174,1263,3.174,1264,3.174]],["component/16",[46,0.543]],["title/17-1",[323,24.169,352,34.322]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[154,19.587,530,31.397,1265,40.343]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[142,32.394,253,18.188,258,25.426]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[40,22.648,507,27.172]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[35,17.392,113,31.372]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17-6",[376,33.515,642,33.515,1210,34.797]],["name/17-6",[]],["text/17-6",[]],["component/17-6",[]],["title/17",[410,24.954,567,23.672,800,38.092]],["name/17",[1266,2.004]],["text/17",[2,1.45,9,3.695,12,0.508,20,0.42,27,0.518,34,0.603,35,2.533,38,1.179,40,1.187,41,1.33,42,1.242,50,1.159,51,4.287,53,1.8,56,0.731,58,0.622,64,0.791,67,1.785,71,0.756,75,0.488,79,0.42,80,0.872,81,0.872,82,0.53,83,2.36,84,1.59,87,0.756,89,0.42,93,0.479,98,0.53,99,1.734,107,0.57,109,1.057,110,0.498,111,1.519,114,0.888,116,1.68,118,0.603,119,0.697,120,0.668,121,1.824,126,0.498,131,1.03,132,0.555,136,0.479,140,0.462,147,0.832,149,0.555,152,0.923,154,2.321,156,1.239,157,2.066,160,3.857,163,1.285,165,0.53,166,2.031,168,0.832,172,1.118,180,1.03,182,0.603,193,0.604,196,0.57,197,0.668,198,0.57,199,0.668,201,2.857,204,0.518,206,1.675,209,0.47,212,0.697,225,1.057,233,0.42,241,2.105,243,0.508,247,1.897,253,2.342,255,0.585,261,0.905,263,0.542,273,1.057,281,0.454,310,1.199,312,0.905,316,0.555,317,0.832,322,1.153,323,1.267,324,1.153,328,3.956,334,0.488,345,0.508,347,1.086,348,2.236,351,3.326,352,1.8,357,0.905,359,1.897,360,2.295,361,2.295,362,2.525,374,2.029,376,1.669,379,1.544,392,0.843,405,0.542,406,0.731,410,3.702,411,0.585,413,0.668,418,0.857,424,3.154,427,1.141,440,1.612,453,0.923,458,0.731,468,0.585,491,1.478,496,1.897,499,1.859,501,0.731,505,1.702,507,1.141,513,2.458,515,0.585,523,1.436,524,1.123,528,0.622,529,0.697,540,2.599,541,1.733,542,2.458,548,1.612,552,0.774,556,0.479,560,1.576,563,0.555,567,0.843,568,0.391,572,0.643,576,0.585,584,0.832,589,1.006,614,1.292,615,0.479,625,1.153,636,1.733,642,1.193,683,0.731,704,3.005,707,1.519,715,1.356,745,0.57,785,3.857,791,0.603,792,0.832,793,1.544,795,0.668,799,1.807,812,0.622,825,0.643,831,0.57,833,1.086,917,0.697,930,1.356,945,1.239,949,1.807,950,1.292,951,0.832,952,5.194,956,0.57,975,0.697,979,1.292,1005,0.643,1007,0.643,1041,0.832,1042,2.696,1051,1.436,1056,1.292,1057,0.668,1060,2.949,1084,0.832,1097,0.832,1120,1.669,1169,0.622,1192,0.774,1210,1.239,1243,0.668,1265,0.774,1267,0.731,1268,0.832,1269,0.92,1270,0.697,1271,0.92,1272,0.832,1273,1.706,1274,1.544,1275,3.17,1276,0.92,1277,0.92,1278,1.706,1279,1.706,1280,3.504,1281,1.706,1282,1.706,1283,0.92,1284,0.92,1285,0.92,1286,0.92,1287,0.92,1288,0.603,1289,0.92,1290,0.92,1291,2.981,1292,4.757,1293,4.757,1294,5.96,1295,0.92,1296,0.92,1297,0.92,1298,1.706,1299,0.92,1300,2.981,1301,1.706,1302,1.706,1303,1.706,1304,1.706,1305,1.706,1306,1.356,1307,1.706,1308,2.387,1309,0.92,1310,1.706,1311,0.832,1312,0.92,1313,0.92,1314,0.92,1315,1.706,1316,1.706,1317,1.706,1318,0.92,1319,0.774,1320,2.981,1321,0.92,1322,0.774,1323,0.832,1324,0.92,1325,0.92,1326,0.92,1327,0.92,1328,0.92,1329,0.92,1330,0.92,1331,0.92,1332,0.92,1333,0.92,1334,0.697,1335,0.774]],["component/17",[46,0.543]],["title/18",[279,30.5,522,23.283,1336,38.092]],["name/18",[1337,2.004]],["text/18",[2,1.712,9,2.481,12,2.751,38,2.462,84,1.556,101,3.266,114,2.596,154,3.589,186,3.486,232,2.751,273,3.088,279,6.401,332,7.625,338,3.62,345,2.751,369,2.422,493,2.596,496,3.962,522,3.402,524,2.346,568,2.978,585,3.266,654,5.567,881,3.088,942,2.751,977,4.51,1110,3.775,1118,7.944,1162,3.962,1174,3.37,1191,4.197,1336,5.567,1338,3.62,1339,4.197,1340,4.986,1341,3.962,1342,4.51,1343,4.986,1344,4.986,1345,3.962,1346,4.986,1347,4.986,1348,4.986,1349,4.986,1350,4.197,1351,4.986,1352,8.783]],["component/18",[46,0.543]],["title/19-1",[1353,56.852,1354,43.046]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[567,34.494]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[61,41.163]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[89,25.944,1355,51.424]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19-5",[1356,63.179]],["name/19-5",[]],["text/19-5",[]],["component/19-5",[]],["title/19-6",[567,34.494]],["name/19-6",[]],["text/19-6",[]],["component/19-6",[]],["title/19-7",[61,41.163]],["name/19-7",[]],["text/19-7",[]],["component/19-7",[]],["title/19-8",[524,32.86]],["name/19-8",[]],["text/19-8",[]],["component/19-8",[]],["title/19-9",[89,25.944,1355,51.424]],["name/19-9",[]],["text/19-9",[]],["component/19-9",[]],["title/19-10",[1357,69.847]],["name/19-10",[]],["text/19-10",[]],["component/19-10",[]],["title/19-11",[61,41.163]],["name/19-11",[]],["text/19-11",[]],["component/19-11",[]],["title/19-12",[524,32.86]],["name/19-12",[]],["text/19-12",[]],["component/19-12",[]],["title/19-13",[1358,69.847]],["name/19-13",[]],["text/19-13",[]],["component/19-13",[]],["title/19-14",[567,34.494]],["name/19-14",[]],["text/19-14",[]],["component/19-14",[]],["title/19-15",[61,41.163]],["name/19-15",[]],["text/19-15",[]],["component/19-15",[]],["title/19-16",[1359,63.179]],["name/19-16",[]],["text/19-16",[]],["component/19-16",[]],["title/19-17",[242,63.179]],["name/19-17",[]],["text/19-17",[]],["component/19-17",[]],["title/19-18",[47,32.394,70,32.394,1360,40.343]],["name/19-18",[]],["text/19-18",[]],["component/19-18",[]],["title/19-19",[12,31.372,1361,45.178]],["name/19-19",[]],["text/19-19",[]],["component/19-19",[]],["title/19-20",[226,41.271,1288,37.239]],["name/19-20",[]],["text/19-20",[]],["component/19-20",[]],["title/19-21",[499,30.156,1360,47.849]],["name/19-21",[]],["text/19-21",[]],["component/19-21",[]],["title/19-22",[524,32.86]],["name/19-22",[]],["text/19-22",[]],["component/19-22",[]],["title/19-23",[61,41.163]],["name/19-23",[]],["text/19-23",[]],["component/19-23",[]],["title/19-24",[567,34.494]],["name/19-24",[]],["text/19-24",[]],["component/19-24",[]],["title/19-25",[52,27.609,1362,47.934,1363,38.092]],["name/19-25",[]],["text/19-25",[]],["component/19-25",[]],["title/19-26",[73,18.365,199,30.079,524,19.493,1364,32.927]],["name/19-26",[]],["text/19-26",[]],["component/19-26",[]],["title/19-27",[2,11.712,39,28.249,1365,40.343]],["name/19-27",[]],["text/19-27",[]],["component/19-27",[]],["title/19-28",[50,16.104,163,17.857,525,26.365,1366,34.873]],["name/19-28",[]],["text/19-28",[]],["component/19-28",[]],["title/19",[73,25.198,1367,47.849]],["name/19",[1368,1.813]],["text/19",[2,1.901,5,0.643,7,0.794,9,0.778,12,3.3,14,0.655,17,0.917,20,0.553,21,1.213,26,1.096,32,1.975,35,0.371,38,1.085,39,3.32,41,2.492,46,0.424,47,3.244,48,2.108,49,1.327,50,0.854,52,4.059,58,0.819,59,1.82,60,1.238,61,1.777,66,0.522,70,2.9,71,0.974,73,2.324,77,0.917,79,0.553,80,1.123,81,1.123,82,0.698,84,1.339,87,0.537,88,1.096,89,1.69,93,0.631,97,1.361,105,0.794,107,1.361,114,0.631,115,2.087,116,0.683,118,0.794,121,0.631,125,0.75,131,0.732,136,0.631,139,0.917,140,1.104,146,1.266,149,0.732,152,0.655,154,0.898,165,0.698,174,0.771,179,0.88,180,0.732,193,0.429,194,1.361,201,0.477,204,0.683,222,0.819,224,0.819,225,0.75,226,0.88,228,2.396,231,1.266,233,1.376,234,0.963,243,2.044,250,0.669,253,0.46,255,0.771,258,0.643,261,0.643,263,1.295,271,0.732,273,0.75,281,0.598,285,1.398,309,1.096,316,1.327,323,1.282,331,2.283,334,0.643,356,3.115,374,1.541,392,1.085,400,0.698,411,0.771,418,0.609,420,1.096,440,0.655,453,3.047,458,0.963,468,0.771,478,1.595,499,1.166,502,0.683,505,0.589,512,0.963,513,0.75,522,1.464,524,3.413,542,0.75,556,2.499,560,0.545,566,1.664,567,0.598,568,2.041,573,0.771,575,0.553,578,0.771,585,1.975,626,0.698,633,0.683,638,1.104,640,1.188,649,0.643,677,1.849,678,0.771,711,0.75,712,2.119,731,2.589,748,1.746,751,1.398,753,1.975,783,0.847,788,3.115,801,1.988,811,0.917,830,0.88,831,1.867,863,2.356,940,0.819,963,2.188,970,1.096,998,1.096,1008,1.096,1021,0.963,1034,0.963,1036,1.096,1090,1.096,1102,0.917,1117,2.283,1120,0.847,1168,0.847,1170,0.963,1174,2.503,1218,1.096,1288,3.144,1334,0.917,1335,1.02,1341,0.963,1354,0.917,1356,1.096,1359,2.727,1360,4.04,1361,0.963,1363,2.943,1364,3.814,1365,3.117,1366,1.849,1367,5.739,1368,1.988,1369,3.249,1370,1.02,1371,1.096,1372,1.212,1373,0.847,1374,1.212,1375,1.212,1376,1.212,1377,2.197,1378,4.04,1379,3.015,1380,1.212,1381,1.212,1382,1.212,1383,1.096,1384,1.212,1385,1.212,1386,1.212,1387,2.197,1388,2.197,1389,1.212,1390,1.212,1391,2.283,1392,3.703,1393,5.634,1394,1.02,1395,1.02,1396,3.015,1397,1.212,1398,1.485,1399,2.197,1400,3.882,1401,1.664,1402,1.212,1403,1.212,1404,1.212,1405,1.212,1406,1.212,1407,0.963,1408,1.096,1409,1.212,1410,4.292,1411,1.212,1412,1.212,1413,1.096,1414,1.212,1415,1.212,1416,5.096,1417,1.988,1418,3.015,1419,1.096,1420,2.197,1421,1.096,1422,4.292,1423,1.212,1424,1.212,1425,0.917,1426,2.197,1427,1.096,1428,1.212,1429,2.197,1430,3.806,1431,2.197,1432,1.212,1433,2.197,1434,1.212,1435,3.634,1436,1.664,1437,1.849,1438,1.212,1439,1.02,1440,1.212,1441,2.197,1442,1.02,1443,1.212,1444,1.212,1445,1.212,1446,2.197,1447,1.212,1448,1.212,1449,1.212,1450,1.212,1451,1.212,1452,1.212,1453,1.212,1454,1.212,1455,1.096,1456,1.212,1457,1.212,1458,1.212,1459,1.212,1460,1.212,1461,1.212,1462,3.35,1463,3.015,1464,2.197,1465,1.096,1466,1.212,1467,2.537,1468,1.212,1469,1.096,1470,1.212,1471,1.096,1472,1.212,1473,1.212,1474,1.212,1475,1.096,1476,1.212,1477,1.212,1478,1.212,1479,1.212]],["component/19",[46,0.543]],["title/20-1",[863,44.444]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[135,51.424,524,26.746]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[87,25.198,1480,51.424]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20-4",[84,17.743,671,34.322]],["name/20-4",[]],["text/20-4",[]],["component/20-4",[]],["title/20-5",[84,17.743,1481,41.271]],["name/20-5",[]],["text/20-5",[]],["component/20-5",[]],["title/20-6",[40,22.648,840,39.75]],["name/20-6",[]],["text/20-6",[]],["component/20-6",[]],["title/20-7",[233,25.944,749,37.239]],["name/20-7",[]],["text/20-7",[]],["component/20-7",[]],["title/20-8",[91,31.397,337,27.609,575,21.874]],["name/20-8",[]],["text/20-8",[]],["component/20-8",[]],["title/20-9",[33,21.571,89,18.908,201,16.303,813,34.873]],["name/20-9",[]],["text/20-9",[]],["component/20-9",[]],["title/20-10",[337,27.609,575,21.874,1481,34.797]],["name/20-10",[]],["text/20-10",[]],["component/20-10",[]],["title/20-11",[1383,63.179]],["name/20-11",[]],["text/20-11",[]],["component/20-11",[]],["title/20-12",[637,28.56,712,28.076]],["name/20-12",[]],["text/20-12",[]],["component/20-12",[]],["title/20-13",[524,26.746,940,38.42]],["name/20-13",[]],["text/20-13",[]],["component/20-13",[]],["title/20-14",[1288,37.239,1436,43.046]],["name/20-14",[]],["text/20-14",[]],["component/20-14",[]],["title/20-15",[1288,45.75]],["name/20-15",[]],["text/20-15",[]],["component/20-15",[]],["title/20-16",[524,22.551,1364,38.092,1373,33.515]],["name/20-16",[]],["text/20-16",[]],["component/20-16",[]],["title/20-17",[49,28.938,73,21.245,427,22.909]],["name/20-17",[]],["text/20-17",[]],["component/20-17",[]],["title/20-18",[67,21.554,71,21.245,1482,38.092]],["name/20-18",[]],["text/20-18",[]],["component/20-18",[]],["title/20-19",[46,19.915,1483,56.852]],["name/20-19",[]],["text/20-19",[]],["component/20-19",[]],["title/20-20",[453,30.747,1484,56.852]],["name/20-20",[]],["text/20-20",[]],["component/20-20",[]],["title/20-21",[91,31.397,337,27.609,575,21.874]],["name/20-21",[]],["text/20-21",[]],["component/20-21",[]],["title/20-22",[193,20.137,1485,51.424]],["name/20-22",[]],["text/20-22",[]],["component/20-22",[]],["title/20-23",[233,25.944,749,37.239]],["name/20-23",[]],["text/20-23",[]],["component/20-23",[]],["title/20-24",[637,28.56,712,28.076]],["name/20-24",[]],["text/20-24",[]],["component/20-24",[]],["title/20-25",[524,26.746,940,38.42]],["name/20-25",[]],["text/20-25",[]],["component/20-25",[]],["title/20",[2,11.712,86,36.294,232,26.451]],["name/20",[1486,2.004]],["text/20",[0,1.22,2,1.171,5,0.855,9,2.733,20,0.735,33,1.821,35,2.149,36,0.413,37,0.399,38,3.418,39,0.949,40,1.266,41,2.114,42,0.586,46,0.394,49,0.357,50,1.36,52,0.34,56,1.632,58,0.399,60,0.634,66,0.485,67,0.506,68,0.761,69,1.45,71,0.911,72,0.387,73,1.55,74,0.497,76,1.089,79,0.735,80,1.258,81,1.258,82,0.928,83,0.704,84,1.975,86,1.555,87,3.316,89,3.206,90,0.679,91,0.387,93,1.069,94,0.376,96,0.413,98,0.34,99,0.258,102,0.387,104,0.787,113,0.326,114,0.586,116,0.634,118,0.737,125,0.998,126,0.609,129,0.413,132,0.357,133,0.287,136,0.308,137,0.429,140,0.809,141,1.018,142,0.761,144,0.413,146,0.648,149,0.973,154,0.839,157,0.586,163,0.885,165,0.648,166,1.621,178,0.535,179,1.491,180,0.357,182,1.055,186,0.413,187,0.399,191,0.429,192,0.34,193,2.331,194,0.366,196,0.366,197,0.429,201,2.49,206,0.282,209,0.302,211,1.046,224,0.761,225,0.697,226,2.057,228,2.252,231,2.015,232,0.621,233,2.085,234,0.894,241,0.597,243,0.621,247,0.47,249,1.356,250,0.889,252,0.497,253,1.642,258,0.313,263,0.663,267,0.376,270,0.497,271,0.357,272,0.387,281,1.4,287,1.491,289,0.535,297,0.497,298,0.621,303,1.089,310,0.297,312,1.686,314,0.429,316,0.357,320,1.955,322,0.399,323,0.873,325,1.09,327,1.503,329,0.894,334,1.09,336,0.855,337,1.632,338,0.429,344,0.376,345,0.326,351,1.475,352,0.357,357,1.09,369,1.195,374,1.05,378,0.697,383,0.47,392,1.215,395,0.716,398,0.497,400,0.648,401,1.126,405,0.348,408,0.447,409,0.413,410,0.586,413,0.429,418,1.424,419,0.447,427,1.519,428,0.413,439,0.348,447,0.852,453,2.34,457,0.429,468,0.376,478,0.429,480,0.817,493,1.069,502,2.138,504,0.634,507,2.662,514,0.894,515,0.716,521,0.429,522,1.195,524,2.149,525,0.716,526,1.729,532,0.47,544,0.399,548,0.609,554,1.169,556,0.308,560,0.506,564,1.612,566,0.447,567,1.215,568,1.046,571,0.947,575,4.278,579,0.413,580,0.535,581,1.272,585,0.387,589,1.873,599,0.716,603,0.447,607,0.47,608,0.497,610,0.447,613,0.47,615,0.308,620,0.949,621,0.535,625,0.399,626,0.928,633,0.908,634,1.211,637,1.424,638,1.032,640,2.34,671,1.711,682,0.535,698,0.387,705,0.47,711,0.366,712,0.796,729,0.535,749,2.666,750,2.649,752,1.566,755,0.894,785,0.447,788,1.169,805,1.28,814,1.28,830,0.817,831,1.272,836,1.457,837,1.183,840,0.413,857,0.413,863,0.716,879,0.387,886,0.497,888,1.858,889,0.387,891,0.413,940,0.399,942,0.621,945,0.429,958,0.387,964,0.413,974,0.447,980,1.089,989,0.399,1006,0.817,1007,0.787,1009,0.737,1019,1.436,1057,0.429,1059,0.894,1068,0.413,1087,0.497,1088,1.863,1093,0.47,1105,0.852,1117,0.447,1168,0.787,1170,1.955,1182,0.497,1213,0.947,1243,0.429,1267,0.47,1268,0.535,1270,0.447,1288,0.737,1334,0.447,1338,0.429,1339,0.947,1342,0.535,1364,1.28,1369,0.852,1371,1.457,1373,1.126,1398,1.663,1401,0.852,1419,0.535,1427,0.535,1435,0.447,1436,0.852,1437,1.729,1439,1.356,1442,0.947,1467,0.497,1480,3.432,1481,0.429,1482,0.47,1485,2.875,1487,5.393,1488,0.817,1489,2.054,1490,0.591,1491,0.591,1492,0.591,1493,0.535,1494,0.535,1495,1.125,1496,4.794,1497,0.591,1498,4.07,1499,1.125,1500,0.47,1501,0.535,1502,1.611,1503,0.591,1504,0.591,1505,0.535,1506,0.591,1507,0.737,1508,0.947,1509,0.535,1510,0.591,1511,0.591,1512,0.591,1513,0.47,1514,0.591,1515,0.591,1516,0.535,1517,0.591,1518,1.018,1519,0.497,1520,0.535,1521,0.497,1522,0.591,1523,0.47,1524,0.591,1525,0.497,1526,1.22,1527,3.794,1528,0.591,1529,0.591,1530,0.591,1531,1.125,1532,0.497,1533,3.179,1534,1.457,1535,0.591,1536,0.47,1537,0.591,1538,0.497,1539,0.591,1540,0.497,1541,0.591,1542,0.535,1543,2.054,1544,1.755,1545,1.611,1546,2.054,1547,0.497,1548,0.47,1549,0.894,1550,2.054,1551,0.591,1552,0.894,1553,0.852,1554,1.457,1555,1.611,1556,1.125,1557,1.125,1558,0.535,1559,1.125,1560,2.461,1561,1.611,1562,0.591,1563,1.125,1564,0.591,1565,0.591,1566,1.125,1567,0.591,1568,0.591,1569,0.591,1570,0.535,1571,1.125,1572,0.591,1573,0.591,1574,0.497,1575,0.497,1576,0.947,1577,0.591,1578,0.535,1579,0.591,1580,0.535,1581,0.535,1582,0.737,1583,0.535,1584,0.591,1585,0.591,1586,0.535,1587,0.535,1588,0.535,1589,0.535,1590,0.591,1591,0.591,1592,1.018,1593,1.125,1594,0.591,1595,2.054,1596,0.535,1597,1.125,1598,0.591,1599,0.591,1600,0.47,1601,0.591,1602,0.535,1603,0.591,1604,0.591,1605,0.47,1606,0.447,1607,0.591,1608,0.591,1609,0.535,1610,0.591,1611,0.497,1612,0.591,1613,0.591,1614,0.591,1615,0.497,1616,0.497,1617,0.497,1618,0.497,1619,0.591,1620,0.591,1621,0.591,1622,0.591,1623,0.535,1624,0.535,1625,0.497,1626,0.447]],["component/20",[46,0.543]],["title/21-1",[2,13.891,107,35.208]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[2,10.124,86,31.373,1627,41.435,1628,41.435]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[2,8.915,1417,33.004,1629,36.487,1630,36.487,1631,26.487]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21-4",[52,27.609,163,20.658,1190,32.394]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["title/21-5",[2,8.915,1365,30.709,1631,26.487,1632,36.487,1633,36.487]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["title/21-6",[52,27.609,163,20.658,1190,32.394]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["title/21-7",[2,8.915,656,33.004,1631,26.487,1634,36.487,1635,36.487]],["name/21-7",[]],["text/21-7",[]],["component/21-7",[]],["title/21-8",[52,27.609,163,20.658,1190,32.394]],["name/21-8",[]],["text/21-8",[]],["component/21-8",[]],["title/21-9",[2,8.915,1631,26.487,1636,36.487,1637,36.487,1638,36.487]],["name/21-9",[]],["text/21-9",[]],["component/21-9",[]],["title/21-10",[52,27.609,163,20.658,1190,32.394]],["name/21-10",[]],["text/21-10",[]],["component/21-10",[]],["title/21-11",[2,8.915,340,26.487,1631,26.487,1639,36.487,1640,36.487]],["name/21-11",[]],["text/21-11",[]],["component/21-11",[]],["title/21-12",[52,27.609,163,20.658,1190,32.394]],["name/21-12",[]],["text/21-12",[]],["component/21-12",[]],["title/21-13",[2,8.915,1631,26.487,1641,36.487,1642,36.487,1643,36.487]],["name/21-13",[]],["text/21-13",[]],["component/21-13",[]],["title/21-14",[52,27.609,163,20.658,1190,32.394]],["name/21-14",[]],["text/21-14",[]],["component/21-14",[]],["title/21",[73,25.198,163,24.501]],["name/21",[1644,2.004]],["text/21",[2,1.767,5,1.916,7,0.627,9,3.056,10,0.551,12,0.528,13,0.609,20,1.648,21,0.528,27,0.998,33,0.922,34,1.16,35,2.342,38,2.868,39,3.712,40,2.509,41,2.744,47,0.647,49,1.859,50,0.688,52,0.551,56,1.407,58,1.197,61,1.456,64,0.82,66,0.763,67,0.796,69,1.044,71,2.163,73,3.272,74,0.806,75,0.508,76,1.197,78,0.647,79,1.405,80,1.263,81,2.088,82,1.02,83,1.08,84,2.464,86,0.725,87,2.163,89,2.055,90,1.069,91,0.627,93,0.498,96,0.669,98,0.551,99,2.281,104,0.669,109,1.53,110,1.336,111,1.572,114,0.498,116,3.888,118,0.627,121,0.498,126,0.958,130,0.806,131,1.859,136,1.88,139,0.725,140,0.481,144,0.669,145,0.806,150,0.551,151,0.866,154,1.258,158,1.49,161,0.647,162,1.871,163,0.413,166,2.418,167,0.695,169,1.069,172,0.627,180,0.578,192,0.551,193,1.595,194,1.097,198,1.097,199,1.286,201,0.697,205,1.49,206,0.458,207,0.866,208,1.572,209,1.263,211,0.753,223,0.695,225,0.593,228,1.407,231,0.551,233,1.127,241,1.916,243,0.977,246,0.627,250,0.528,251,0.609,253,2.097,255,0.609,259,0.761,261,0.508,266,0.627,271,0.578,272,0.627,281,0.875,286,0.695,291,1.618,293,0.725,298,1.699,303,0.647,310,0.481,312,1.31,316,0.578,323,0.753,325,0.939,327,1.633,332,0.761,334,0.939,336,0.508,337,1.02,345,0.528,348,1.735,351,1.88,357,1.31,369,0.86,374,2.669,383,0.761,389,1.286,391,0.866,392,0.875,395,0.609,401,2.152,405,0.564,411,0.609,418,1.546,427,0.458,453,0.958,477,0.609,493,0.498,494,0.866,499,0.939,502,0.54,504,0.54,507,1.471,521,0.695,524,3.246,542,1.097,553,0.761,560,0.431,563,0.578,564,0.627,567,0.473,568,1.915,573,0.609,575,2.382,576,0.609,579,1.238,581,0.593,585,1.618,607,0.761,609,0.806,612,0.806,613,0.761,615,2.345,625,0.647,626,1.02,633,0.998,634,1.044,638,0.481,639,0.725,640,0.958,669,0.806,676,1.197,686,0.866,711,0.593,728,0.866,731,1.238,745,0.593,749,0.627,752,1.127,753,1.618,783,2.152,788,1.793,804,1.392,808,0.695,833,0.609,840,0.669,863,1.127,867,0.806,876,0.866,881,0.593,923,2.331,940,2.76,942,0.977,954,0.725,957,1.341,958,0.627,959,0.806,963,0.695,989,1.67,1005,0.669,1009,0.627,1015,1.286,1022,0.627,1038,0.866,1068,1.238,1075,0.725,1105,0.725,1114,1.197,1115,1.963,1117,0.725,1134,0.866,1150,0.761,1168,0.669,1169,0.647,1170,1.407,1183,0.866,1185,0.761,1190,1.197,1250,0.866,1272,2.785,1288,0.627,1334,0.725,1341,0.761,1354,0.725,1363,1.407,1366,1.49,1378,0.806,1391,1.341,1394,0.806,1395,0.806,1401,0.725,1413,0.866,1436,0.725,1439,2.079,1442,1.49,1469,0.866,1482,1.963,1553,0.725,1558,0.866,1592,0.866,1596,2.235,1606,0.725,1609,0.866,1645,0.957,1646,0.957,1647,0.957,1648,0.957,1649,0.957,1650,0.957,1651,0.957,1652,2.47,1653,1.602,1654,1.771,1655,0.957,1656,1.771,1657,0.806,1658,0.957,1659,2.47,1660,0.957,1661,0.866,1662,0.957,1663,0.957,1664,0.725,1665,0.957,1666,0.866,1667,0.957,1668,0.866,1669,0.806,1670,0.695,1671,0.957,1672,0.866,1673,1.602,1674,0.957,1675,0.761,1676,0.957,1677,0.957,1678,0.957,1679,0.957,1680,0.957,1681,2.47,1682,0.761,1683,0.647,1684,0.866,1685,0.866,1686,0.725,1687,1.602,1688,0.957,1689,0.866,1690,1.407,1691,0.761,1692,0.957,1693,0.957,1694,0.957,1695,0.957,1696,0.761,1697,0.957,1698,0.957,1699,0.957,1700,0.866,1701,0.957,1702,0.957,1703,0.957,1704,0.957,1705,0.957,1706,0.866,1707,0.866,1708,0.957,1709,0.957,1710,0.866,1711,0.806,1712,0.957,1713,0.957,1714,0.957,1715,0.957,1716,0.957,1717,0.866,1718,0.957]],["component/21",[46,0.543]],["title/22",[2,11.712,500,40.343,568,20.378]],["name/22",[1719,2.004]],["text/22",[2,2.074,15,5.027,50,2.58,64,3.076,79,3.03,84,2.072,97,4.111,114,3.456,369,3.225,500,8.58,568,4.194,615,4.42,1101,7.145,1345,5.276,1435,5.027,1720,6.005,1721,6.639,1722,6.639,1723,6.639,1724,6.639,1725,6.639,1726,6.639,1727,6.639]],["component/22",[46,0.543]],["title/23-1",[2,11.712,232,26.451,1174,32.394]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[2,7.964,73,14.447,101,21.35,115,18.368,232,17.987,369,15.832]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23-3",[2,7.964,73,14.447,101,21.35,115,18.368,232,17.987,519,18.368]],["name/23-3",[]],["text/23-3",[]],["component/23-3",[]],["title/23-4",[176,37.239,235,34.322]],["name/23-4",[]],["text/23-4",[]],["component/23-4",[]],["title/23-5",[560,25.565,1728,43.046]],["name/23-5",[]],["text/23-5",[]],["component/23-5",[]],["title/23",[41,21.571,1581,51.424]],["name/23",[1,1.313]],["text/23",[2,2.232,9,3.136,11,2.699,35,2.708,38,1.758,41,1.351,50,2.125,64,2.532,66,2.356,115,2.006,133,1.729,154,3.908,176,5.569,235,5.345,291,2.332,298,3.016,316,4.017,320,2.829,327,3.53,334,1.888,339,4.344,340,3.968,369,1.729,410,1.853,493,1.853,499,1.888,522,3.912,560,1.601,634,2.098,640,3.599,790,3.016,862,2.406,940,4.497,965,2.695,1003,5.933,1025,4.653,1120,2.489,1174,2.406,1338,2.584,1373,2.489,1416,3.22,1435,5.038,1462,6.019,1467,2.996,1500,2.829,1728,2.695,1729,3.56,1730,3.56,1731,2.996,1732,3.56,1733,3.56,1734,5.466,1735,3.56,1736,3.56,1737,3.56,1738,3.56,1739,3.56,1740,3.56,1741,3.56,1742,5.466,1743,5.466,1744,3.56,1745,3.56,1746,3.56,1747,3.56,1748,3.56,1749,3.56,1750,3.22,1751,3.56]],["component/23",[46,0.543]],["title/24-1",[1173,41.271,1752,41.271]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24",[2,11.712,99,20.947,112,34.797]],["name/24",[1753,2.004]],["text/24",[2,1.912,9,1.844,14,2.816,23,2.426,27,1.883,35,2.394,41,2.426,45,2.337,50,1.299,60,1.883,68,2.259,71,1.481,79,1.525,80,1.709,81,1.709,84,2.442,96,2.337,97,3.224,99,4.108,112,3.779,128,2.656,130,2.813,131,2.018,134,2.531,136,1.74,144,3.64,150,1.925,163,1.44,164,2.813,166,1.548,192,1.925,193,1.184,204,1.883,224,2.259,231,1.925,253,1.268,267,3.313,272,2.189,283,2.531,297,2.813,298,1.844,310,2.615,313,4.842,325,2.762,336,2.762,418,1.679,522,1.623,573,3.313,576,2.127,579,2.337,626,5.414,638,1.679,647,2.531,671,3.143,744,2.337,805,2.656,808,2.426,809,2.656,811,2.531,814,2.656,830,2.426,877,3.023,878,2.426,879,2.189,889,2.189,958,2.189,1014,3.023,1015,2.426,1022,3.41,1025,2.337,1173,3.779,1185,2.656,1193,2.189,1210,2.426,1400,4.709,1482,2.656,1488,3.779,1507,2.189,1538,2.813,1600,2.656,1664,3.942,1669,4.382,1683,3.518,1689,3.023,1752,2.426,1754,2.813,1755,3.023,1756,3.023,1757,3.023,1758,4.709,1759,3.342,1760,3.023,1761,2.813,1762,3.342,1763,3.342,1764,3.342,1765,3.342,1766,3.342,1767,3.023,1768,3.342,1769,3.023,1770,3.342]],["component/24",[46,0.543]],["title/25-1",[14,25.924,99,20.947,671,28.938]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[99,24.844,1664,43.046]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[99,18.107,211,17.615,253,15.722,1430,30.079]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25",[99,30.523]],["name/25",[0,1.518]],["text/25",[2,0.48,5,1.787,7,3.432,9,1.856,10,1.132,12,1.859,13,2.144,14,3.717,17,1.489,25,2.277,35,2.103,41,1.988,42,1.024,45,2.356,60,1.108,61,1.159,69,3.087,71,1.96,72,1.288,75,1.043,78,1.329,79,0.897,81,1.005,84,2.528,96,3.091,99,4.288,113,2.44,116,1.108,126,1.063,127,1.778,128,5.462,134,1.489,136,3.068,137,1.427,138,4.409,140,0.988,146,2.546,150,2.546,154,1.377,156,2.446,157,2.727,165,1.132,169,2.034,174,1.251,196,1.218,198,1.218,201,0.774,204,1.108,211,1.432,212,2.551,221,1.562,222,1.329,235,2.034,241,1.043,253,1.988,261,1.043,265,1.427,266,1.288,272,1.288,274,1.655,279,1.251,281,0.971,283,3.348,287,3.209,303,2.277,305,1.655,308,1.778,312,2.345,325,1.787,326,1.655,376,1.375,392,0.971,395,1.251,400,1.132,409,2.356,410,1.024,418,0.988,457,1.427,491,1.218,498,1.778,522,0.955,524,0.925,525,1.251,563,1.187,565,1.375,576,1.251,579,1.375,626,3.017,633,1.108,712,1.664,751,2.144,788,1.427,808,3.209,857,1.375,870,1.778,879,3.432,936,1.655,944,2.277,963,1.427,974,1.489,1005,1.375,1009,1.288,1019,1.375,1022,2.207,1037,1.655,1057,3.209,1101,1.655,1102,1.489,1168,1.375,1169,1.329,1173,1.427,1193,1.288,1236,3.048,1270,2.551,1339,1.655,1361,1.562,1370,1.655,1391,1.489,1394,1.655,1398,2.988,1430,1.427,1455,1.778,1488,3.209,1500,1.562,1505,1.778,1523,2.677,1602,1.778,1626,1.489,1653,3.048,1664,6.441,1666,1.778,1669,3.721,1683,1.329,1752,1.427,1756,1.778,1757,1.778,1758,4.739,1771,1.966,1772,1.966,1773,1.966,1774,1.966,1775,3.369,1776,1.966,1777,1.966,1778,1.966,1779,1.966,1780,3.048,1781,1.778,1782,1.966,1783,1.966,1784,3.369,1785,1.966,1786,1.966,1787,1.966,1788,1.966,1789,1.966,1790,1.966,1791,1.966,1792,1.966,1793,3.369,1794,1.489,1795,1.966,1796,1.778,1797,1.966,1798,1.966,1799,3.369,1800,3.369,1801,1.966,1802,1.966,1803,1.966,1804,1.966,1805,1.966,1806,1.778,1807,1.966,1808,1.966]],["component/25",[46,0.543]],["title/26-1",[75,30.156,1809,51.424]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26",[84,14.96,1481,34.797,1810,47.934]],["name/26",[1811,2.004]],["text/26",[5,3.118,20,2.683,59,3.549,71,4.172,79,2.683,81,3.005,82,3.386,84,3.213,102,3.85,157,3.06,166,2.723,192,3.386,201,2.313,253,2.23,374,3.005,401,4.11,419,4.451,439,3.464,502,3.313,568,3.751,638,3.939,640,4.772,711,3.64,978,5.317,986,4.947,1350,4.947,1361,4.671,1507,3.85,1600,4.671,1690,4.671,1754,6.599,1812,4.671,1813,5.878,1814,5.878]],["component/26",[46,0.543]],["title/27-1",[5,30.156,253,21.571]],["name/27-1",[]],["text/27-1",[]],["component/27-1",[]],["title/27-2",[84,17.743,1169,38.42]],["name/27-2",[]],["text/27-2",[]],["component/27-2",[]],["title/27-3",[5,30.156,279,36.175]],["name/27-3",[]],["text/27-3",[]],["component/27-3",[]],["title/27-4",[166,26.338,253,21.571]],["name/27-4",[]],["text/27-4",[]],["component/27-4",[]],["title/27-5",[84,17.743,1210,41.271]],["name/27-5",[]],["text/27-5",[]],["component/27-5",[]],["title/27",[5,30.156,166,26.338]],["name/27",[1815,2.004]],["text/27",[2,0.825,5,3.414,9,1.859,10,1.135,14,1.826,17,1.492,21,1.863,27,1.111,35,1.033,39,1.161,45,1.378,50,1.312,58,2.993,59,2.674,60,1.903,68,1.332,69,1.99,71,2.616,75,1.045,76,1.332,77,1.492,84,2.911,93,1.758,94,2.148,99,3.637,116,1.111,126,1.066,134,1.492,136,1.026,137,1.431,138,2.842,139,1.492,140,0.99,146,1.135,150,1.135,157,1.026,161,1.332,165,1.135,166,1.564,174,2.148,187,1.332,189,1.492,196,2.091,198,1.22,201,1.743,211,1.435,224,2.282,233,0.899,243,1.087,246,1.291,250,1.087,253,3.158,260,1.659,261,1.045,266,1.291,270,1.659,271,1.19,279,3.339,281,2.187,283,1.492,312,1.045,323,1.435,325,1.045,333,1.566,336,1.045,369,0.957,418,0.99,427,0.942,442,2.842,453,1.066,480,1.431,484,1.431,493,1.026,515,1.254,522,1.64,524,0.927,525,1.254,530,1.291,560,0.886,568,1.883,573,1.254,578,1.254,585,1.291,626,1.135,633,1.903,638,2.636,640,4.252,643,1.783,647,1.492,671,1.19,705,1.566,744,1.378,751,1.254,752,2.818,758,1.492,804,1.111,808,2.451,809,3.52,814,1.566,815,1.332,825,1.378,831,2.743,857,1.378,878,2.451,879,1.291,889,1.291,942,1.087,956,2.091,974,1.492,987,1.783,989,1.332,1006,1.431,1013,1.783,1015,1.431,1022,1.291,1032,1.659,1034,1.566,1057,1.431,1059,2.683,1075,1.492,1119,1.566,1169,3.988,1182,1.659,1191,1.659,1193,3.437,1210,2.451,1211,5.417,1270,2.556,1338,1.431,1350,2.842,1370,2.842,1481,1.431,1488,1.431,1507,2.901,1516,1.783,1536,1.566,1538,2.842,1540,2.842,1576,1.659,1578,1.783,1600,6.247,1618,1.659,1626,1.492,1664,3.354,1670,1.431,1752,1.431,1754,5.417,1780,1.783,1796,1.783,1806,1.783,1809,1.783,1816,1.971,1817,1.783,1818,1.566,1819,1.659,1820,1.971,1821,1.971,1822,1.971,1823,1.971,1824,1.971,1825,1.971,1826,1.971,1827,1.971,1828,3.376,1829,1.783,1830,1.971,1831,1.971,1832,3.054,1833,1.971,1834,1.971,1835,1.659,1836,1.659,1837,1.971,1838,1.971,1839,1.971,1840,1.971,1841,1.971,1842,1.971,1843,1.783,1844,3.376,1845,1.971]],["component/27",[46,0.543]],["title/28-1",[568,24.169,1846,47.849]],["name/28-1",[]],["text/28-1",[]],["component/28-1",[]],["title/28-2",[193,20.137,568,24.169]],["name/28-2",[]],["text/28-2",[]],["component/28-2",[]],["title/28",[568,24.169,671,34.322]],["name/28",[1846,1.687]],["text/28",[1,1.994,2,1.471,9,3.668,13,1.937,20,1.39,41,2.602,50,1.183,54,2.21,60,1.716,64,1.411,73,1.35,83,1.331,84,2.606,98,3.467,133,2.924,136,1.585,149,1.838,154,1.244,166,1.411,193,2.958,231,1.754,233,1.39,261,1.615,295,2.21,298,2.67,327,3.193,337,1.754,395,1.937,427,3.277,493,3.134,568,4.039,599,1.937,619,2.21,634,1.794,637,2.43,638,1.53,640,2.617,649,3.193,705,2.42,724,4.376,726,4.072,731,2.129,746,2.563,748,2.42,749,4.492,750,2.305,752,1.937,790,1.68,837,2.787,958,1.994,965,5.192,1022,1.994,1181,4.072,1407,2.42,1425,6.031,1544,4.634,1547,4.072,1548,2.42,1846,4.072,1847,6.704,1848,2.754,1849,4.838,1850,3.045,1851,6.858,1852,4.838,1853,5.445,1854,3.045,1855,3.045,1856,3.045,1857,3.045,1858,2.754,1859,2.754,1860,3.045,1861,3.045,1862,2.563,1863,3.045,1864,3.045,1865,3.045,1866,2.563,1867,2.563,1868,2.563,1869,3.045]],["component/28",[46,0.543]],["title/29-1",[53,34.322,84,17.743]],["name/29-1",[]],["text/29-1",[]],["component/29-1",[]],["title/29-2",[1004,55.505]],["name/29-2",[]],["text/29-2",[]],["component/29-2",[]],["title/29-3",[439,41.163]],["name/29-3",[]],["text/29-3",[]],["component/29-3",[]],["title/29-4",[753,45.75]],["name/29-4",[]],["text/29-4",[]],["component/29-4",[]],["title/29-5",[1005,48.836]],["name/29-5",[]],["text/29-5",[]],["component/29-5",[]],["title/29-6",[528,47.202]],["name/29-6",[]],["text/29-6",[]],["component/29-6",[]],["title/29-7",[529,52.885]],["name/29-7",[]],["text/29-7",[]],["component/29-7",[]],["title/29-8",[568,24.169,753,37.239]],["name/29-8",[]],["text/29-8",[]],["component/29-8",[]],["title/29-9",[84,17.743,644,41.271]],["name/29-9",[]],["text/29-9",[]],["component/29-9",[]],["title/29",[84,17.743,1870,51.424]],["name/29",[84,0.245,1871,0.784,1872,0.784]],["text/29",[1,1.672,2,1.025,4,3.531,5,2.225,7,1.672,9,3.401,11,1.261,12,1.409,14,1.381,20,1.165,33,2.184,39,1.504,41,0.969,42,1.329,48,1.785,50,2.076,53,3.735,63,1.853,66,2.945,67,1.887,79,1.165,82,1.47,83,1.116,84,3.06,89,2.437,98,2.417,109,1.581,145,3.531,157,1.329,166,3.404,192,2.417,193,0.904,201,1.004,203,1.409,204,1.438,211,1.784,244,2.933,255,1.624,261,1.354,263,1.504,265,1.853,285,1.624,378,1.581,410,1.329,418,1.282,427,4.015,439,1.504,477,1.624,502,1.438,506,3.177,513,2.598,514,2.029,524,1.201,528,1.725,556,1.329,567,1.261,568,3.916,576,1.624,578,2.67,616,1.853,617,2.029,619,1.853,632,2.309,634,1.504,635,2.029,637,1.282,640,2.889,642,1.785,644,3.046,646,1.853,647,1.933,649,2.225,650,2.309,651,2.309,652,2.309,653,2.309,655,2.309,657,2.309,659,2.309,660,1.785,678,1.624,693,2.309,711,2.598,712,1.261,745,1.581,747,2.309,753,5.086,783,1.785,815,2.835,831,1.581,865,1.725,930,2.029,932,2.309,969,2.148,986,3.531,1005,4.325,1006,3.046,1007,1.785,1015,3.046,1021,2.029,1174,1.725,1193,1.672,1288,1.672,1369,1.933,1391,1.933,1465,2.309,1549,3.334,1606,3.177,1626,1.933,1670,1.853,1731,2.148,1761,2.148,1848,2.309,1873,2.553,1874,2.553,1875,2.553,1876,2.553,1877,2.553,1878,2.553,1879,2.553,1880,2.553,1881,2.029,1882,2.553,1883,2.553,1884,2.553,1885,2.553,1886,2.553,1887,2.553,1888,2.553,1889,2.553]],["component/29",[46,0.543]],["title/30-1",[73,25.198,84,17.743]],["name/30-1",[]],["text/30-1",[]],["component/30-1",[]],["title/30-2",[40,16.506,84,12.931,193,14.676,377,25.66]],["name/30-2",[]],["text/30-2",[]],["component/30-2",[]],["title/30-3",[83,24.844,84,17.743]],["name/30-3",[]],["text/30-3",[]],["component/30-3",[]],["title/30-4",[73,18.365,83,18.107,84,12.931,369,20.126]],["name/30-4",[]],["text/30-4",[]],["component/30-4",[]],["title/30-5",[73,18.365,83,18.107,84,12.931,427,19.803]],["name/30-5",[]],["text/30-5",[]],["component/30-5",[]],["title/30-6",[83,15.945,84,11.387,193,12.923,377,22.596,1552,28.995]],["name/30-6",[]],["text/30-6",[]],["component/30-6",[]],["title/30-7",[83,15.945,84,11.387,85,28.995,193,12.923,377,22.596]],["name/30-7",[]],["text/30-7",[]],["component/30-7",[]],["title/30-8",[84,17.743,87,25.198]],["name/30-8",[]],["text/30-8",[]],["component/30-8",[]],["title/30-9",[84,11.387,87,16.172,193,12.923,377,22.596,1552,28.995]],["name/30-9",[]],["text/30-9",[]],["component/30-9",[]],["title/30-10",[84,11.387,85,28.995,87,16.172,193,12.923,377,22.596]],["name/30-10",[]],["text/30-10",[]],["component/30-10",[]],["title/30-11",[136,36.362]],["name/30-11",[]],["text/30-11",[]],["component/30-11",[]],["title/30-12",[356,41.271,712,28.076]],["name/30-12",[]],["text/30-12",[]],["component/30-12",[]],["title/30",[84,17.743,671,34.322]],["name/30",[84,0.626]],["text/30",[2,1.63,5,1.793,9,3.305,12,2.446,13,0.685,15,0.815,20,2.553,27,1.112,32,0.705,34,0.705,35,1.97,37,0.728,38,0.532,39,1.609,40,1.939,41,2.613,47,1.845,49,3.17,50,1.891,52,1.136,54,1.982,60,1.539,64,1.265,71,1.21,73,3.219,78,1.845,79,2.396,80,1.009,81,0.55,82,1.136,83,2.295,84,3.084,85,1.568,87,1.747,89,2.023,90,1.191,91,0.705,99,0.471,114,0.561,115,0.607,132,0.65,136,2.052,137,0.782,140,0.541,146,1.946,150,0.62,154,1.381,156,0.782,166,0.499,179,2.453,192,2.27,193,2.912,194,2.441,201,0.424,203,1.089,206,0.943,209,0.55,225,3.014,231,0.62,233,0.491,243,1.507,251,1.737,253,1.282,272,0.705,286,0.782,288,4.352,298,3.413,313,0.815,327,3.852,331,0.815,334,0.571,356,3.533,357,2.091,369,1.326,377,2.441,392,0.532,405,0.635,418,0.541,427,2.822,493,0.561,504,0.607,519,0.607,522,1.326,524,1.59,527,2.284,548,1.477,560,2.516,563,2.04,568,0.458,575,2.023,578,0.685,615,1.759,620,1.163,625,1.845,626,1.946,634,2.323,638,0.541,676,0.728,712,2.403,761,0.635,788,0.782,790,0.594,791,0.705,799,0.815,804,0.607,833,0.685,837,2.27,958,2.214,959,1.66,964,1.379,982,0.974,1016,0.906,1022,0.705,1107,3.402,1175,1.66,1187,1.66,1188,0.856,1345,1.568,1425,0.815,1488,0.782,1513,0.856,1532,0.906,1534,1.785,1544,4.132,1552,0.856,1582,3.187,1606,0.815,1675,0.856,1696,2.686,1706,0.974,1818,0.856,1847,5.42,1862,3.317,1866,3.317,1867,0.906,1868,2.844,1881,0.856,1890,0.974,1891,3.379,1892,1.077,1893,1.077,1894,1.077,1895,3.941,1896,0.974,1897,1.077,1898,1.077,1899,5.061,1900,3.379,1901,3.356,1902,3.218,1903,0.974,1904,0.856,1905,2.298,1906,2.47,1907,0.974,1908,1.077,1909,1.973,1910,2.731,1911,1.973,1912,3.379,1913,1.785,1914,1.973,1915,1.077,1916,1.077,1917,1.077,1918,1.077,1919,1.973,1920,3.057,1921,1.973,1922,1.077,1923,1.077,1924,1.077,1925,1.077,1926,1.077,1927,1.077,1928,1.077,1929,1.077,1930,1.077,1931,1.077,1932,1.077,1933,1.077,1934,1.077,1935,1.077]],["component/30",[46,0.543]],["title/31",[35,17.392,505,27.614]],["name/31",[35,0.345,505,0.547]],["text/31",[2,0.939,9,3.994,35,1.516,50,0.892,64,4.774,112,1.667,133,1.115,152,4.005,157,1.195,211,0.976,223,2.789,251,1.461,253,2.646,258,2.038,291,2.517,293,1.738,295,1.667,298,5.686,351,4.871,369,1.866,410,1.195,427,1.836,440,3.772,505,2.814,507,1.836,519,1.294,542,2.379,637,1.153,649,2.038,670,1.932,699,1.738,707,1.461,761,2.264,804,4.547,881,2.379,884,2.264,990,1.824,991,1.932,1114,3.348,1121,2.077,1135,2.077,1150,3.053,1373,1.605,1500,1.824,1526,1.738,1728,1.738,1936,5.24,1937,2.296,1938,2.296,1939,2.296,1940,2.296,1941,2.296,1942,3.842,1943,2.296,1944,2.296]],["component/31",[46,0.543]],["title/32",[35,17.392,154,23.231]],["name/32",[35,0.345,154,0.46]],["text/32",[2,1.426,9,2.067,20,3.561,35,2.387,40,2.325,50,3.033,79,2.664,80,2.984,84,1.822,154,3.189,182,3.823,193,2.764,209,2.984,269,5.279,288,3.944,440,3.157,522,2.835,548,3.157,615,3.039,683,6.201,712,2.882,737,4.638,744,4.081,745,3.615,761,3.44,837,5.064,880,6.201,884,3.44,958,3.823,1582,3.823,1670,4.237,1696,4.638,1901,4.419,1902,4.237,1945,7.804,1946,5.279,1947,5.837,1948,4.912,1949,5.837,1950,5.279]],["component/32",[46,0.543]],["title/33-1",[41,21.571,575,25.944]],["name/33-1",[]],["text/33-1",[]],["component/33-1",[]],["title/33",[35,17.392,575,25.944]],["name/33",[35,0.345,575,0.514]],["text/33",[2,1.764,21,2.247,23,2.956,33,3.759,35,3.073,38,2.011,40,3.565,41,3.032,64,2.803,68,2.751,84,1.888,87,3.2,89,2.761,90,5.403,124,3.235,125,2.521,131,2.458,133,1.978,172,2.667,193,1.442,201,3.36,231,2.345,233,1.858,241,3.83,253,1.545,323,1.731,334,2.16,480,2.956,525,2.591,544,2.751,567,2.011,575,4.689,583,3.235,599,2.591,615,2.12,745,2.521,804,2.294,813,3.427,833,2.591,840,2.847,944,4.089,945,2.956,989,2.751,1209,3.683,1319,3.427,1398,2.751,1675,3.235,1755,3.683,1843,3.683,1867,5.092,1868,3.427,1951,6.05,1952,3.235,1953,4.071,1954,4.071,1955,3.683,1956,4.071,1957,3.683]],["component/33",[46,0.543]],["title/34-1",[544,38.42,575,25.944]],["name/34-1",[]],["text/34-1",[]],["component/34-1",[]],["title/34-2",[20,21.874,193,16.978,575,21.874]],["name/34-2",[]],["text/34-2",[]],["component/34-2",[]],["title/34",[193,20.137,575,25.944]],["name/34",[35,0.345,193,0.399]],["text/34",[2,1.207,9,3.266,20,2.795,38,1.544,41,1.186,50,1.92,64,2.289,66,1.347,73,2.19,79,2.795,81,1.598,82,1.801,84,0.976,87,1.386,104,2.186,110,1.691,111,1.989,114,1.627,126,1.691,132,1.887,133,2.4,140,1.57,149,1.887,152,2.672,193,3.388,201,1.23,204,1.762,208,1.989,209,1.598,231,1.801,250,1.725,253,2.324,281,1.544,312,1.658,327,2.62,336,3.249,377,1.936,392,1.544,395,1.989,427,2.361,499,1.658,505,2.975,507,3.326,510,2.048,520,2.631,522,2.4,544,2.113,575,3.677,633,1.762,676,4.703,712,2.44,714,3.926,745,1.936,761,2.911,783,2.186,790,2.726,804,3.922,833,4.428,837,1.801,857,2.186,865,2.113,884,5.155,940,2.113,944,5.702,993,2.828,1019,2.186,1373,2.186,1544,4.31,1582,3.236,1670,2.269,1672,4.468,1902,3.586,1936,5.54,1958,6.959,1959,6.125,1960,2.631,1961,3.126,1962,3.126,1963,3.126,1964,3.126,1965,3.126,1966,3.126,1967,3.126,1968,3.126,1969,3.126,1970,3.126]],["component/34",[46,0.543]],["title/35-1",[323,24.169,1971,56.852]],["name/35-1",[]],["text/35-1",[]],["component/35-1",[]],["title/35-2",[253,15.722,323,17.615,1682,32.927,1683,28.001]],["name/35-2",[]],["text/35-2",[]],["component/35-2",[]],["title/35-3",[121,29.597,323,24.169]],["name/35-3",[]],["text/35-3",[]],["component/35-3",[]],["title/35",[35,17.392,323,24.169]],["name/35",[35,0.345,323,0.479]],["text/35",[2,0.556,9,3.212,20,1.039,32,1.491,33,1.185,35,1.167,38,1.124,41,1.448,50,1.914,64,2.973,87,1.009,98,2.198,111,1.449,113,1.256,121,4.443,133,1.853,142,1.539,150,1.311,154,3.488,157,4.028,163,1.644,169,1.374,193,0.806,198,1.41,201,1.501,204,1.283,206,1.824,209,1.951,211,0.968,213,1.653,241,1.208,250,1.256,253,2.635,255,1.449,258,2.024,265,3.575,271,1.374,273,3.05,279,1.449,285,1.449,303,1.539,310,1.917,323,4.175,325,1.208,327,1.208,334,1.208,335,1.653,336,1.208,344,1.449,345,3.18,347,3.134,348,1.283,351,3.615,352,4.192,374,2.518,377,1.41,392,1.124,403,1.916,410,1.185,427,1.088,491,1.41,504,2.15,507,1.824,522,1.106,530,2.499,542,1.41,560,4.25,567,1.124,572,1.592,602,3.032,637,1.144,670,1.916,698,2.499,713,1.592,790,2.105,804,1.283,812,2.578,837,2.198,879,1.491,881,1.41,956,2.363,957,1.724,1032,1.916,1068,1.592,1114,2.578,1115,3.914,1120,2.668,1437,1.916,1544,3.569,1582,1.491,1750,3.451,1794,1.724,1836,3.211,1881,1.809,1902,1.653,1904,1.809,1948,1.916,1972,3.815,1973,2.059,1974,3.451,1975,4.925,1976,2.277,1977,5.763,1978,2.277,1979,3.815,1980,3.815,1981,4.925,1982,3.815,1983,3.815,1984,2.277,1985,2.277,1986,3.815,1987,4.85,1988,2.277,1989,2.277,1990,2.059,1991,2.277]],["component/35",[46,0.543]],["title/36-1",[1554,63.179]],["name/36-1",[]],["text/36-1",[]],["component/36-1",[]],["title/36-2",[40,27.825]],["name/36-2",[]],["text/36-2",[]],["component/36-2",[]],["title/36-3",[1992,58.786]],["name/36-3",[]],["text/36-3",[]],["component/36-3",[]],["title/36-4",[1179,63.179]],["name/36-4",[]],["text/36-4",[]],["component/36-4",[]],["title/36-5",[1180,63.179]],["name/36-5",[]],["text/36-5",[]],["component/36-5",[]],["title/36-6",[424,55.505]],["name/36-6",[]],["text/36-6",[]],["component/36-6",[]],["title/36-7",[571,58.786]],["name/36-7",[]],["text/36-7",[]],["component/36-7",[]],["title/36-8",[1993,69.847]],["name/36-8",[]],["text/36-8",[]],["component/36-8",[]],["title/36-9",[1994,69.847]],["name/36-9",[]],["text/36-9",[]],["component/36-9",[]],["title/36-10",[840,48.836]],["name/36-10",[]],["text/36-10",[]],["component/36-10",[]],["title/36-11",[868,63.179]],["name/36-11",[]],["text/36-11",[]],["component/36-11",[]],["title/36-12",[1023,52.885]],["name/36-12",[]],["text/36-12",[]],["component/36-12",[]],["title/36-13",[602,55.505]],["name/36-13",[]],["text/36-13",[]],["component/36-13",[]],["title/36-14",[1974,63.179]],["name/36-14",[]],["text/36-14",[]],["component/36-14",[]],["title/36",[33,29.597,201,22.369]],["name/36",[33,0.587,201,0.443]],["text/36",[2,0.86,7,0.511,9,3.539,10,0.844,14,0.422,15,2.336,20,0.356,23,0.567,27,0.825,33,3.056,34,0.511,35,2.451,36,0.546,37,0.528,38,1.021,39,0.46,40,0.824,41,2.055,45,1.024,50,0.804,53,0.884,54,4.261,66,2.225,67,1.918,68,1.398,69,0.863,71,0.346,73,0.346,75,0.777,79,1.784,81,1.799,82,0.45,83,0.341,84,1.691,87,0.917,89,0.356,90,0.471,93,1.077,97,1.281,99,0.64,108,0.567,112,0.567,121,2.035,133,0.711,136,0.406,146,0.844,150,1.5,152,0.422,154,2.763,157,3.439,165,1.191,166,1.207,172,0.511,193,0.923,196,1.911,201,3.275,202,1.063,203,0.431,206,2.993,209,0.399,211,1.312,222,2.085,224,0.528,233,0.668,250,0.431,252,0.657,253,1.483,258,0.777,273,0.907,281,0.386,284,0.706,310,0.392,312,0.414,323,2.662,325,0.414,329,0.621,331,0.591,337,0.45,345,1.437,348,3.308,351,5.009,356,0.567,357,0.777,369,1.265,374,3.67,378,1.911,389,4.546,395,0.932,400,0.45,403,4.94,405,3.459,408,0.591,427,0.7,428,1.024,439,0.46,447,0.591,453,0.422,491,1.613,493,2.82,502,0.44,504,1.165,512,0.621,519,1.982,521,0.567,522,0.711,527,0.528,530,2.561,548,1.903,553,0.621,554,1.501,556,0.406,560,3.386,568,1.496,575,2.231,576,1.658,578,0.932,581,0.484,583,0.621,589,2.073,602,0.621,615,2.545,619,1.063,620,3.331,637,2.949,638,0.736,640,1.118,646,0.567,649,2.074,662,2.336,665,1.164,676,1.76,678,1.316,683,1.164,707,1.316,711,0.484,712,0.386,726,1.233,731,1.024,737,1.643,740,1.233,761,0.46,790,0.808,840,0.546,847,3.182,848,3.182,849,3.182,862,0.99,863,0.497,865,2.642,874,0.706,875,1.325,878,0.567,880,0.621,881,2.421,882,0.706,883,0.621,884,0.863,889,0.511,891,1.446,935,1.233,944,0.528,949,0.591,950,0.591,954,1.109,963,0.567,964,0.546,1009,0.959,1023,0.591,1025,0.546,1030,1.024,1076,0.706,1107,0.546,1165,1.325,1167,0.706,1181,1.233,1188,0.621,1193,0.511,1408,0.706,1488,1.063,1507,0.511,1520,0.706,1521,0.657,1553,1.109,1570,1.325,1605,0.621,1616,3.864,1675,1.643,1683,0.99,1817,0.706,1829,0.706,1835,0.657,1890,0.706,1901,0.591,1905,0.657,1955,0.706,1992,0.657,1995,0.781,1996,0.781,1997,0.781,1998,0.781,1999,0.621,2000,0.781,2001,3.518,2002,0.781,2003,5.652,2004,0.781,2005,1.465,2006,1.465,2007,0.706,2008,0.706,2009,0.706,2010,0.706,2011,0.706,2012,0.706,2013,0.781,2014,0.781,2015,0.781,2016,0.781,2017,1.871,2018,0.781,2019,0.781,2020,0.781,2021,0.781,2022,0.657,2023,0.781,2024,0.781,2025,1.465,2026,0.781,2027,0.781,2028,0.781,2029,1.465,2030,0.781,2031,0.781,2032,0.781,2033,1.465,2034,0.781,2035,0.781]],["component/36",[46,0.543]],["title/37-1",[0,52.885]],["name/37-1",[]],["text/37-1",[]],["component/37-1",[]],["title/37-2",[1526,52.885]],["name/37-2",[]],["text/37-2",[]],["component/37-2",[]],["title/37-3",[211,29.693]],["name/37-3",[]],["text/37-3",[]],["component/37-3",[]],["title/37-4",[14,30.747,2036,51.424]],["name/37-4",[]],["text/37-4",[]],["component/37-4",[]],["title/37",[637,28.56,712,28.076]],["name/37",[637,0.566,712,0.557]],["text/37",[1,2.96,2,1.465,5,1.074,6,1.704,8,1.704,9,2.603,10,1.166,14,2.889,21,1.117,27,1.141,32,1.326,35,2.806,40,2.601,50,1.756,66,1.489,69,1.193,72,1.326,81,1.035,84,1.41,89,2.437,97,1.254,114,1.054,125,1.254,146,1.166,154,2.182,157,2.352,163,0.872,173,1.704,182,1.326,192,2.602,193,0.717,209,1.766,211,1.468,225,1.254,231,1.166,232,1.117,233,3.353,241,1.074,251,2.198,256,1.533,258,1.074,263,1.193,271,1.222,272,1.326,281,1.706,285,1.288,312,1.832,323,3.378,325,1.074,334,3.181,336,2.397,369,2.195,392,2.231,393,1.831,395,1.288,400,1.166,401,3.159,419,1.533,447,1.533,453,4.737,477,1.288,493,3.4,516,1.609,519,2.546,522,1.678,524,1.625,525,2.198,548,2.889,556,1.054,560,2.696,568,0.861,579,1.415,581,2.139,615,3.122,620,2.663,626,2.602,637,2.683,639,1.533,674,1.609,698,1.326,712,1.706,751,1.288,769,3.591,790,2.493,791,1.326,862,1.368,884,3.148,917,1.533,956,1.254,1006,1.469,1056,1.533,1072,1.704,1088,2.615,1093,1.609,1095,1.831,1103,1.831,1110,1.533,1117,1.533,1148,1.415,1162,1.609,1323,1.831,1335,1.704,1367,1.704,1369,1.533,1526,1.533,1536,1.609,1553,3.421,1582,3.498,1586,1.831,1587,1.831,1588,1.831,1589,1.831,1625,1.704,1661,4.087,1673,1.831,1686,4.54,1769,1.831,1812,1.609,1946,3.125,1950,1.831,2036,4.087,2037,2.024,2038,1.704,2039,3.125,2040,3.454,2041,2.024,2042,2.024,2043,1.831,2044,4.518,2045,3.454,2046,3.454,2047,3.454,2048,3.454,2049,2.024,2050,2.024,2051,2.024,2052,2.024,2053,2.024,2054,2.024,2055,2.024,2056,2.024,2057,2.024,2058,2.024,2059,3.454,2060,2.024,2061,2.024,2062,2.024,2063,2.024,2064,2.024,2065,2.024,2066,2.024,2067,3.454,2068,2.024,2069,1.831,2070,2.024]],["component/37",[46,0.543]],["title/38-1",[649,30.156,678,36.175]],["name/38-1",[]],["text/38-1",[]],["component/38-1",[]],["title/38-2",[505,27.614,649,30.156]],["name/38-2",[]],["text/38-2",[]],["component/38-2",[]],["title/38-3",[193,20.137,649,30.156]],["name/38-3",[]],["text/38-3",[]],["component/38-3",[]],["title/38",[2,13.891,649,30.156]],["name/38",[2,0.275,649,0.598]],["text/38",[1,2.23,9,3.767,33,1.036,35,1.365,41,2.252,50,1.323,53,2.055,64,2.75,79,0.908,80,1.017,84,0.621,116,1.121,133,2.565,154,0.813,157,4.347,163,0.858,166,0.922,193,2.102,201,0.783,209,1.017,211,1.897,241,1.055,253,1.693,258,1.055,272,1.303,281,0.983,291,1.303,293,1.507,295,2.471,298,3.275,310,1,325,1.806,327,3.148,334,1.055,336,1.806,348,1.918,351,4.235,357,1.806,369,2.565,378,4.282,389,1.444,395,1.266,427,0.951,505,1.653,507,0.951,519,3.646,544,1.345,556,2.322,560,0.895,568,0.846,572,1.391,578,1.266,615,1.036,634,4.297,637,4.087,638,1,644,1.444,649,5.059,660,1.391,678,4.844,698,1.303,704,1.507,707,3.777,711,1.232,745,2.763,790,1.878,804,2.514,812,1.345,837,1.146,881,1.232,884,1.173,891,3.119,935,2.865,956,1.232,957,1.507,964,1.391,989,1.345,1019,1.391,1030,2.38,1068,3.119,1108,1.8,1114,1.345,1148,1.391,1150,2.705,1430,2.471,1513,1.581,1544,3.676,1575,1.675,1582,1.303,1682,1.581,1683,2.301,1728,3.378,1794,1.507,1832,1.8,1835,1.675,1853,1.8,1896,3.079,1901,1.507,1902,1.444,1987,1.675,1992,3.755,1999,1.581,2008,1.8,2009,1.8,2010,3.079,2011,3.079,2012,1.8,2071,1.99,2072,1.8,2073,1.99,2074,1.99,2075,1.99,2076,4.461,2077,3.404,2078,1.99,2079,1.99,2080,1.99,2081,1.99,2082,1.99,2083,1.99,2084,3.404,2085,3.404,2086,1.8]],["component/38",[46,0.543]],["title/39-1",[0,52.885]],["name/39-1",[]],["text/39-1",[]],["component/39-1",[]],["title/39-2",[71,25.198,517,45.178]],["name/39-2",[]],["text/39-2",[]],["component/39-2",[]],["title/39-3",[71,14.447,329,25.902,1507,21.35,1683,22.028,2087,29.483,2088,32.595]],["name/39-3",[]],["text/39-3",[]],["component/39-3",[]],["title/39-4",[20,31.874]],["name/39-4",[]],["text/39-4",[]],["component/39-4",[]],["title/39-5",[21,31.372,208,36.175]],["name/39-5",[]],["text/39-5",[]],["component/39-5",[]],["title/39-6",[208,36.175,567,28.076]],["name/39-6",[]],["text/39-6",[]],["component/39-6",[]],["title/39-7",[42,29.597,504,32.037]],["name/39-7",[]],["text/39-7",[]],["component/39-7",[]],["title/39-8",[637,28.56,712,28.076]],["name/39-8",[]],["text/39-8",[]],["component/39-8",[]],["title/39-9",[323,24.169,453,30.747]],["name/39-9",[]],["text/39-9",[]],["component/39-9",[]],["title/39-10",[67,25.565,2089,45.178]],["name/39-10",[]],["text/39-10",[]],["component/39-10",[]],["title/39-11",[35,17.392,40,22.648]],["name/39-11",[]],["text/39-11",[]],["component/39-11",[]],["title/39-12",[71,25.198,2090,56.852]],["name/39-12",[]],["text/39-12",[]],["component/39-12",[]],["title/39-13",[71,25.198,1507,37.239]],["name/39-13",[]],["text/39-13",[]],["component/39-13",[]],["title/39",[71,25.198,75,30.156]],["name/39",[71,0.499,75,0.598]],["text/39",[2,0.998,9,3.214,11,1.784,13,1.572,20,0.808,21,0.528,24,0.806,27,0.54,32,3.804,35,1.378,36,1.238,38,2.73,40,1.226,41,0.672,42,0.498,50,1.197,51,0.806,60,1.392,64,0.444,66,2.714,67,1.836,71,3.499,72,2.95,73,0.785,75,1.31,76,0.647,78,0.647,79,1.127,80,0.489,81,0.905,84,2.427,89,0.437,91,1.16,94,2.298,99,0.774,100,0.609,102,0.627,132,0.578,133,0.465,136,0.498,140,0.481,146,0.551,154,0.724,157,1.88,160,0.578,163,0.763,165,1.02,166,2.087,172,0.627,174,0.609,180,1.859,186,3.65,187,0.647,189,1.341,192,0.551,193,1.09,194,1.097,196,0.593,198,0.593,208,3.322,209,0.489,211,1.736,225,0.593,232,0.528,233,0.808,240,0.806,243,0.528,244,0.669,245,1.49,246,1.618,254,0.866,255,0.609,260,0.806,263,0.564,267,0.609,279,1.572,285,0.609,288,0.647,290,0.866,292,0.806,294,0.866,298,0.528,303,0.647,307,0.806,310,0.481,314,2.235,316,0.578,320,2.446,323,1.736,324,1.197,325,0.939,327,1.633,331,0.725,332,2.446,333,0.761,334,2.389,335,0.695,336,1.31,339,0.761,340,2.965,357,0.508,377,0.593,378,0.593,382,0.866,383,0.761,392,0.473,400,1.423,402,0.866,407,0.866,408,1.341,410,0.498,418,0.89,439,0.564,442,0.806,453,3.523,466,0.866,493,2.718,502,0.998,504,0.54,510,0.627,516,1.963,519,0.998,520,1.49,521,0.695,524,0.45,525,0.609,527,0.647,548,0.518,554,0.695,560,1.111,564,0.627,568,1.05,575,0.437,576,1.127,578,0.609,581,1.907,585,0.627,599,0.609,615,1.286,620,1.814,625,1.197,634,0.564,637,1.814,638,1.241,639,1.341,640,2.64,647,1.341,654,1.407,662,1.871,669,4.393,674,0.761,696,1.407,698,0.627,712,0.875,744,2.525,752,0.609,757,3.267,758,0.725,769,2.446,790,0.977,811,0.725,833,1.127,837,2.811,839,0.866,862,0.647,867,0.806,879,0.627,881,1.097,891,0.669,894,0.725,910,0.761,936,0.806,942,2.693,944,0.647,956,1.53,961,0.761,964,0.669,980,1.197,989,0.647,1007,1.238,1015,0.695,1016,0.806,1021,0.761,1023,0.725,1024,0.866,1034,1.963,1069,1.407,1079,2.079,1093,0.761,1105,3.952,1107,1.238,1119,0.761,1120,1.727,1145,0.866,1148,0.669,1185,1.407,1187,0.806,1192,0.806,1193,0.627,1213,2.591,1267,0.761,1306,1.407,1319,0.806,1334,1.341,1354,0.725,1391,0.725,1398,0.647,1421,0.866,1471,0.866,1507,2.366,1508,0.806,1509,3.267,1518,0.866,1519,0.806,1526,0.725,1576,0.806,1606,0.725,1657,0.806,1686,0.725,1690,1.407,1691,1.407,1700,0.866,1720,0.866,1761,0.806,1794,0.725,1818,1.407,1836,1.49,1905,0.806,1906,0.866,1948,0.806,1952,2.446,1957,0.866,1987,1.49,1990,0.866,1999,0.761,2017,1.602,2022,0.806,2038,2.079,2089,1.963,2091,0.957,2092,0.957,2093,0.957,2094,0.957,2095,0.957,2096,0.957,2097,0.957,2098,0.957,2099,0.957,2100,0.957,2101,1.771,2102,0.957,2103,1.602,2104,0.957,2105,0.957,2106,0.957,2107,0.957,2108,0.957,2109,0.957,2110,0.957,2111,0.957,2112,0.957,2113,0.957,2114,0.957,2115,1.771,2116,2.47,2117,0.957,2118,1.771,2119,6.923,2120,0.957,2121,0.957,2122,0.957,2123,0.957,2124,0.957,2125,0.957,2126,1.771,2127,0.957,2128,1.771,2129,0.957,2130,0.957,2131,0.957,2132,0.866,2133,0.957,2134,1.771,2135,0.957,2136,3.079,2137,0.957,2138,0.957,2139,0.957,2140,0.957,2141,0.957,2142,0.957,2143,0.957,2144,0.957,2145,0.957,2146,0.957,2147,3.612,2148,0.957,2149,0.957,2150,0.957,2151,0.957,2152,2.47,2153,2.47,2154,0.957,2155,0.957,2156,0.957,2157,1.771,2158,2.47,2159,0.957,2160,0.957,2161,0.957,2162,0.957,2163,0.866,2164,0.957,2165,0.957,2166,0.957,2167,0.957,2168,0.957,2169,0.957,2170,0.957,2171,0.957,2172,0.957,2173,0.957,2174,0.957,2175,0.957,2176,0.957,2177,0.957,2178,0.957,2179,0.957,2180,0.957,2181,0.957,2182,0.866,2183,0.957,2184,0.957,2185,0.957,2186,0.957]],["component/39",[46,0.543]],["title/40-1",[1120,39.75,2187,56.852]],["name/40-1",[]],["text/40-1",[]],["component/40-1",[]],["title/40-2",[2,13.891,1904,45.178]],["name/40-2",[]],["text/40-2",[]],["component/40-2",[]],["title/40-3",[193,20.137,837,32.745]],["name/40-3",[]],["text/40-3",[]],["component/40-3",[]],["title/40-4",[34,37.239,286,41.271]],["name/40-4",[]],["text/40-4",[]],["component/40-4",[]],["title/40-5",[544,47.202]],["name/40-5",[]],["text/40-5",[]],["component/40-5",[]],["title/40-6",[193,20.137,884,33.505]],["name/40-6",[]],["text/40-6",[]],["component/40-6",[]],["title/40",[193,20.137,253,21.571]],["name/40",[193,0.399,253,0.428]],["text/40",[2,0.77,9,3.85,13,2.004,27,1.775,34,2.063,41,1.886,50,1.224,114,1.64,133,2.99,152,1.704,193,2.863,209,2.541,243,1.738,253,1.886,262,2.503,266,2.063,286,2.287,288,2.129,291,3.255,292,5.882,295,3.608,325,1.671,327,2.636,352,1.902,357,2.636,369,1.53,392,1.556,427,2.375,440,1.704,510,4.032,532,2.503,560,1.416,713,3.475,755,2.503,790,4.198,804,1.775,837,4.025,884,1.856,1088,4.661,1148,2.202,1188,2.503,1189,2.849,1306,3.949,1363,2.503,1544,5.006,1575,2.651,1682,3.949,1728,2.385,1903,4.495,1904,2.503,2087,4.495,2188,3.15,2189,4.97,2190,3.15,2191,3.15,2192,3.15,2193,3.15,2194,3.15,2195,4.495,2196,3.15,2197,3.15,2198,3.15,2199,3.15,2200,4.97,2201,3.15,2202,3.15,2203,3.15,2204,4.97,2205,4.97,2206,4.97,2207,4.97,2208,3.15,2209,3.15,2210,4.97,2211,3.15,2212,3.15,2213,3.15,2214,3.15,2215,3.15,2216,3.15,2217,3.15,2218,3.15,2219,3.15,2220,3.15,2221,6.155,2222,6.155,2223,3.15]],["component/40",[46,0.543]],["title/41-1",[9,14.676,11,20.462,66,17.857,67,18.632]],["name/41-1",[]],["text/41-1",[]],["component/41-1",[]],["title/41-2",[9,12.923,11,18.019,66,15.725,193,12.923,671,22.028]],["name/41-2",[]],["text/41-2",[]],["component/41-2",[]],["title/41-3",[9,14.676,11,20.462,66,17.857,67,18.632]],["name/41-3",[]],["text/41-3",[]],["component/41-3",[]],["title/41-4",[9,12.923,11,18.019,66,15.725,67,16.407,2224,33.004]],["name/41-4",[]],["text/41-4",[]],["component/41-4",[]],["title/41-5",[9,12.923,11,18.019,66,15.725,67,16.407,71,16.172]],["name/41-5",[]],["text/41-5",[]],["component/41-5",[]],["title/41-6",[9,12.923,11,18.019,66,15.725,193,12.923,671,22.028]],["name/41-6",[]],["text/41-6",[]],["component/41-6",[]],["title/41",[67,25.565,75,30.156]],["name/41",[67,0.507,75,0.598]],["text/41",[2,1.766,9,2.973,11,4.096,12,0.587,13,0.677,14,0.576,20,1.234,32,0.697,35,2.537,37,0.719,38,0.526,41,1.026,42,1.016,50,1.709,57,0.963,61,0.627,63,0.773,66,4.032,67,4.343,69,2.591,71,2.14,72,0.697,73,0.865,75,0.564,78,0.719,79,1.528,81,0.998,83,0.853,84,2.444,87,0.472,91,1.278,98,0.613,99,0.465,100,0.677,102,0.697,109,0.659,113,1.492,116,0.6,125,0.659,129,0.744,140,0.535,146,1.124,150,1.557,154,1.368,160,0.642,163,0.459,166,0.493,167,0.773,176,0.697,180,0.642,186,0.744,192,2.782,193,2.078,194,0.659,197,0.773,198,0.659,201,2.051,209,0.544,211,0.452,221,0.846,222,0.719,233,1.783,250,1.077,251,0.677,253,1.483,255,0.677,258,0.564,261,0.564,263,0.627,267,0.677,271,0.642,285,1.242,288,1.319,312,0.564,316,0.642,321,0.896,322,2.641,323,0.83,336,1.434,338,1.417,344,1.242,351,0.554,352,0.642,356,0.773,357,0.564,369,1.313,377,0.659,378,0.659,392,0.526,395,0.677,400,1.124,410,2.034,418,0.535,439,0.627,453,2.378,457,0.773,478,0.773,480,0.773,501,0.846,504,0.6,515,0.677,518,0.963,519,1.523,525,0.677,527,0.719,542,0.659,548,0.576,556,1.407,560,0.479,563,0.642,565,0.744,567,0.526,568,0.83,581,1.209,599,2.486,615,0.554,620,1.973,625,0.719,626,2.782,633,0.6,634,1.15,637,0.535,638,1.682,640,2.113,642,0.744,646,0.773,649,0.564,662,2.959,665,1.551,671,1.178,676,2.263,678,0.677,698,0.697,707,1.242,712,0.526,713,1.365,752,1.242,758,0.806,790,1.077,804,0.6,812,0.719,815,0.719,837,0.613,862,2.972,865,3.264,869,2.275,884,0.627,891,0.744,894,0.806,942,0.587,960,0.963,974,0.806,975,0.806,979,0.806,980,0.719,1009,0.697,1022,1.771,1023,1.478,1025,4.298,1026,0.963,1037,2.275,1040,0.963,1056,0.806,1059,0.846,1061,1.765,1062,0.963,1063,0.963,1064,0.963,1067,0.963,1075,1.478,1078,1.765,1079,0.896,1102,0.806,1105,0.806,1107,1.89,1148,0.744,1169,0.719,1175,0.896,1193,0.697,1211,0.896,1265,0.896,1345,2.148,1378,1.643,1395,0.896,1398,1.319,1425,3.657,1475,1.765,1481,2.431,1501,0.963,1507,0.697,1508,0.896,1513,1.551,1519,1.643,1523,1.551,1525,0.896,1536,1.551,1544,1.674,1574,0.896,1580,2.445,1582,0.697,1605,3.105,1611,0.896,1618,1.643,1624,0.963,1625,0.896,1670,1.417,1686,0.806,1696,0.846,1717,0.963,1752,0.773,1812,0.846,1819,1.643,1847,4.388,1862,0.896,1866,0.896,1899,0.963,1902,0.773,1907,0.963,1952,0.846,1999,1.551,2039,0.963,2043,0.963,2089,1.551,2132,0.963,2195,1.765,2224,2.445,2225,1.952,2226,2.818,2227,1.064,2228,1.064,2229,1.064,2230,1.064,2231,1.064,2232,1.064,2233,1.064,2234,1.064,2235,1.064,2236,1.952,2237,3.348,2238,3.348,2239,1.952,2240,1.952,2241,1.952,2242,1.064,2243,1.064,2244,0.963,2245,1.064,2246,1.064,2247,0.963,2248,1.064,2249,0.963,2250,1.064,2251,2.704,2252,1.064,2253,1.064,2254,1.064,2255,1.064,2256,0.963,2257,1.064,2258,1.064,2259,1.064,2260,1.064,2261,1.064,2262,1.064,2263,1.064,2264,1.064,2265,1.064,2266,1.952,2267,1.064,2268,1.064,2269,1.064,2270,1.064,2271,1.064]],["component/41",[46,0.543]],["title/42-1",[175,36.294,504,27.011,1521,40.343]],["name/42-1",[]],["text/42-1",[]],["component/42-1",[]],["title/42-2",[100,30.5,1030,33.515,1605,38.092]],["name/42-2",[]],["text/42-2",[]],["component/42-2",[]],["title/42-3",[66,14.047,201,12.825,253,12.368,369,15.832,942,17.987,1030,22.79]],["name/42-3",[]],["text/42-3",[]],["component/42-3",[]],["title/42-4",[2,8.915,519,20.561,942,20.134,1030,25.511,1336,28.995]],["name/42-4",[]],["text/42-4",[]],["component/42-4",[]],["title/42-5",[100,20.74,568,13.857,638,16.374,707,20.74,942,17.987,980,22.028]],["name/42-5",[]],["text/42-5",[]],["component/42-5",[]],["title/42-6",[100,30.5,1027,38.092,2089,38.092]],["name/42-6",[]],["text/42-6",[]],["component/42-6",[]],["title/42-7",[11,16.097,201,12.825,253,12.368,369,15.832,942,17.987,1027,25.902]],["name/42-7",[]],["text/42-7",[]],["component/42-7",[]],["title/42-8",[84,10.173,519,18.368,568,13.857,638,16.374,942,17.987,980,22.028]],["name/42-8",[]],["text/42-8",[]],["component/42-8",[]],["title/42-9",[66,15.725,100,23.217,161,24.658,707,23.217,942,20.134]],["name/42-9",[]],["text/42-9",[]],["component/42-9",[]],["title/42-10",[175,36.294,232,26.451,279,30.5]],["name/42-10",[]],["text/42-10",[]],["component/42-10",[]],["title/42",[9,14.676,175,31.373,176,27.14,235,25.015]],["name/42",[176,0.738,235,0.68]],["text/42",[2,1.677,3,1.332,5,1.48,7,1.037,9,0.989,10,0.912,11,3.029,12,0.874,14,1.509,20,0.722,27,2.543,32,1.037,34,1.037,35,1.876,39,0.933,41,1.059,42,0.824,53,1.685,55,1.432,66,3.55,67,2.933,69,1.645,72,1.037,73,0.702,75,0.84,77,1.199,79,1.274,80,1.913,84,1.773,99,0.692,100,4.725,102,4.017,114,0.824,129,1.107,132,0.956,150,1.608,154,2.506,160,3.703,161,3.478,163,1.203,166,0.733,167,2.026,175,2.113,176,5.282,201,2.025,209,1.427,232,2.49,233,2.059,235,4.626,243,0.874,244,1.107,246,1.037,253,2.327,255,1.776,261,1.985,262,1.258,267,1.776,271,0.956,279,3.902,281,0.782,287,2.026,298,1.54,303,1.07,304,1.332,305,1.332,307,1.332,313,1.199,316,0.956,322,2.529,326,1.332,328,0.98,334,0.84,339,4.513,340,4.123,344,1.007,369,1.356,394,1.149,400,0.912,410,2.957,418,0.795,428,2.617,439,0.933,453,2.44,457,1.149,458,1.258,487,1.432,504,0.892,516,1.258,519,0.892,524,0.745,528,1.07,560,1.255,565,1.107,568,1.918,576,1.007,585,1.037,598,1.332,599,1.776,640,3.072,649,0.84,678,1.007,711,2.318,751,1.007,815,1.07,831,0.98,857,1.107,862,3.049,865,1.07,942,3.134,956,1.728,961,1.258,975,1.199,979,2.113,980,1.886,1003,1.258,1004,1.258,1025,2.617,1027,4.874,1030,5.759,1057,2.026,1068,1.951,1072,2.349,1102,2.834,1107,1.107,1110,1.199,1119,2.218,1148,1.107,1162,1.258,1174,1.07,1193,2.452,1270,1.199,1336,1.258,1398,1.886,1494,1.432,1549,2.218,1574,2.349,1615,1.332,1623,1.432,1686,1.199,1690,2.218,1707,1.432,1760,1.432,1818,2.218,1819,1.332,2022,3.15,2119,4.655,2163,1.432,2226,4.332,2244,2.525,2247,1.432,2256,1.432,2272,1.583,2273,1.583,2274,1.583,2275,1.583,2276,1.583,2277,1.583,2278,1.583,2279,1.583,2280,1.583,2281,2.791,2282,1.583,2283,1.583,2284,1.583,2285,1.583,2286,1.583,2287,1.583,2288,1.583,2289,2.791,2290,2.791,2291,3.743,2292,2.791,2293,2.791,2294,2.791,2295,1.583,2296,1.583,2297,1.583,2298,1.583,2299,1.583,2300,1.583,2301,1.583]],["component/42",[46,0.543]],["title/43-1",[233,25.944,749,37.239]],["name/43-1",[]],["text/43-1",[]],["component/43-1",[]],["title/43-2",[750,36.294,1407,38.092,1548,38.092]],["name/43-2",[]],["text/43-2",[]],["component/43-2",[]],["title/43-3",[243,38.543]],["name/43-3",[]],["text/43-3",[]],["component/43-3",[]],["title/43",[2,13.891,233,25.944]],["name/43",[2,0.275,233,0.514]],["text/43",[2,0.696,7,0.741,9,3.771,10,0.652,14,1.54,20,0.516,27,0.638,32,0.741,33,0.589,35,2.213,40,0.451,41,0.783,50,1.107,60,0.638,61,1.217,69,1.678,73,0.502,80,1.056,83,0.494,84,1.893,87,0.502,89,0.516,90,0.683,93,0.589,94,0.72,97,1.279,99,0.494,125,1.279,128,0.899,132,1.246,133,1.003,137,0.821,140,0.568,144,0.791,154,1.436,157,0.589,163,1.514,166,1.319,173,0.952,192,1.189,193,1.779,194,2.176,196,0.701,206,0.541,209,0.579,211,1.21,233,2.769,241,0.6,243,0.624,244,0.791,253,1.333,255,0.72,256,0.857,258,2.87,271,0.683,281,0.559,285,0.72,291,1.352,323,1.494,325,0.6,327,1.864,334,1.095,336,1.51,343,1.024,344,0.72,352,2.121,357,1.864,369,3.514,385,0.899,392,0.559,413,0.821,418,1.037,419,1.563,427,4.486,453,0.612,491,0.701,493,0.589,510,0.741,515,0.72,519,3.244,522,0.55,527,0.765,533,3.696,544,2.374,556,1.075,560,0.928,563,0.683,567,0.559,575,2.093,589,0.667,615,1.075,626,3.316,633,0.638,637,1.43,638,0.568,639,0.857,642,0.791,671,0.683,677,1.738,707,1.314,713,1.991,744,0.791,746,1.738,748,4.3,749,3.29,750,4.805,761,0.667,790,1.571,799,0.857,804,0.638,830,0.821,833,0.72,837,1.189,879,0.741,881,0.701,910,0.899,942,0.624,956,0.701,958,2.301,964,0.791,965,0.857,980,0.765,985,1.024,1007,0.791,1022,0.741,1056,1.563,1069,4.3,1087,2.957,1088,2.156,1173,0.821,1243,5.112,1267,0.899,1306,2.263,1338,0.821,1369,4.805,1407,3.247,1425,1.563,1493,1.868,1542,1.024,1544,4.23,1547,2.957,1548,2.792,1549,2.263,1553,1.563,1582,2.301,1583,1.024,1611,0.952,1615,2.957,1616,0.952,1617,2.396,1683,1.395,1684,2.575,1687,1.024,1752,0.821,1767,2.575,1794,0.857,1858,2.575,1859,3.696,1881,1.641,1913,1.868,1920,1.868,2038,0.952,2069,1.024,2072,1.024,2086,1.024,2182,4.148,2249,1.024,2302,1.132,2303,1.132,2304,3.513,2305,5.024,2306,1.132,2307,2.065,2308,3.513,2309,2.065,2310,1.132,2311,1.132,2312,1.132,2313,4.585,2314,1.132,2315,1.132,2316,1.132,2317,2.065,2318,1.132,2319,2.065,2320,1.132,2321,2.065,2322,3.513,2323,2.065,2324,2.065,2325,1.132,2326,2.065,2327,2.065,2328,2.065,2329,2.065,2330,2.065,2331,2.065,2332,2.065,2333,1.132,2334,1.132,2335,1.132,2336,1.132,2337,1.132,2338,1.132,2339,1.132,2340,1.132,2341,1.132,2342,1.132,2343,1.132]],["component/43",[46,0.543]],["title/44-1",[110,22.409,111,26.365,265,30.079,389,30.079]],["name/44-1",[]],["text/44-1",[]],["component/44-1",[]],["title/44-2",[2,10.124,12,22.864,93,21.571,107,25.66]],["name/44-2",[]],["text/44-2",[]],["component/44-2",[]],["title/44-3",[93,24.954,1401,36.294,1430,34.797]],["name/44-3",[]],["text/44-3",[]],["component/44-3",[]],["title/44-4",[2,13.891,201,22.369]],["name/44-4",[]],["text/44-4",[]],["component/44-4",[]],["title/44-5",[2,13.891,87,25.198]],["name/44-5",[]],["text/44-5",[]],["component/44-5",[]],["title/44-6",[2,13.891,40,22.648]],["name/44-6",[]],["text/44-6",[]],["component/44-6",[]],["title/44-7",[2,13.891,162,43.046]],["name/44-7",[]],["text/44-7",[]],["component/44-7",[]],["title/44-8",[2,13.891,191,41.271]],["name/44-8",[]],["text/44-8",[]],["component/44-8",[]],["title/44-9",[2,13.891,1106,47.849]],["name/44-9",[]],["text/44-9",[]],["component/44-9",[]],["title/44-10",[2,13.891,610,43.046]],["name/44-10",[]],["text/44-10",[]],["component/44-10",[]],["title/44-11",[2,13.891,606,45.178]],["name/44-11",[]],["text/44-11",[]],["component/44-11",[]],["title/44-12",[2,13.891,614,43.046]],["name/44-12",[]],["text/44-12",[]],["component/44-12",[]],["title/44-13",[2,13.891,603,43.046]],["name/44-13",[]],["text/44-13",[]],["component/44-13",[]],["title/44-14",[2,13.891,604,43.046]],["name/44-14",[]],["text/44-14",[]],["component/44-14",[]],["title/44-15",[2,13.891,83,24.844]],["name/44-15",[]],["text/44-15",[]],["component/44-15",[]],["title/44-16",[2,13.891,636,41.271]],["name/44-16",[]],["text/44-16",[]],["component/44-16",[]],["title/44",[110,37.775]],["name/44",[110,1.084]],["text/44",[2,2.061,9,2.08,10,1.59,11,1.086,12,2.468,15,0.634,20,0.382,21,0.863,25,0.566,33,0.814,35,2.26,38,0.414,40,1.298,41,3.01,42,1.145,47,1.486,50,2.871,53,0.506,59,0.944,60,0.881,64,2.072,66,0.948,67,0.377,69,0.921,70,2.776,71,0.975,72,0.548,80,1.124,81,0.799,83,0.961,84,1.759,87,0.693,89,1.26,93,3.276,94,1.399,95,0.608,96,2.872,97,2.295,99,2.909,101,1.024,105,0.548,106,0.705,107,2.769,109,2.295,110,3.294,111,1.399,113,1.214,115,2.088,116,0.472,120,1.135,121,1.437,122,1.665,123,0.665,132,2.48,136,1.437,140,0.421,142,0.566,148,0.757,154,2.489,157,1.929,162,1.665,163,0.361,164,0.705,165,0.482,166,0.724,169,0.506,172,0.548,180,0.944,191,0.608,193,1.906,194,2.769,198,0.519,200,0.705,201,2.999,202,2.366,203,0.462,204,1.239,205,0.705,206,3.53,208,0.533,209,0.428,210,0.757,211,1.575,212,0.634,213,0.608,215,0.757,216,0.757,217,0.705,218,0.705,219,0.757,220,0.705,221,0.665,222,0.566,223,0.608,224,0.566,232,1.523,233,0.382,235,1.666,241,0.829,243,0.863,245,1.316,251,0.995,253,1.937,258,1.966,261,0.444,267,1.399,273,0.968,280,0.757,281,0.414,283,1.184,312,0.444,314,0.608,322,1.486,323,0.935,327,0.829,334,0.444,345,0.863,357,2.179,374,2.455,389,0.608,428,3.763,439,0.921,440,2.597,477,3.425,493,1.697,499,2.179,502,0.472,504,0.472,505,2.48,506,2.09,507,1.319,510,0.548,513,0.519,514,1.748,515,0.533,528,0.566,529,0.634,548,1.493,556,2.139,560,1.847,564,0.548,567,0.414,568,2.755,575,0.382,577,3.352,578,0.995,581,1.709,585,0.548,603,0.634,604,0.634,606,1.242,610,0.634,614,0.634,615,0.814,616,1.596,617,4.057,619,2.982,626,2.135,634,2.421,635,0.665,636,1.135,638,0.785,640,1.189,644,0.608,660,1.093,665,1.242,714,0.665,753,1.44,761,0.493,783,0.585,790,0.863,799,1.184,862,0.566,863,0.995,865,1.486,880,1.242,910,1.748,952,1.316,954,0.634,956,0.519,958,0.548,979,0.634,1004,0.665,1005,0.585,1009,1.024,1106,0.705,1107,0.585,1168,0.585,1174,3.637,1219,0.757,1243,3.246,1275,1.414,1288,2.691,1294,0.757,1311,0.757,1322,0.705,1338,0.608,1354,2.468,1373,2.872,1398,1.057,1401,2.806,1430,2.004,1435,2.09,1436,1.665,1523,4.277,1525,0.705,1532,0.705,1540,0.705,1617,0.705,1626,1.184,1657,0.705,1668,1.414,1731,2.323,1781,0.757,1812,0.665,1870,0.757,1901,0.634,1952,0.665,1973,2.948,2103,0.757,2226,0.705,2344,0.837,2345,0.837,2346,1.564,2347,1.564,2348,0.837,2349,1.564,2350,0.837,2351,1.564,2352,2.76,2353,2.76,2354,3.259,2355,1.564,2356,3.706,2357,1.564,2358,2.199,2359,0.837,2360,0.837,2361,1.564,2362,0.837,2363,0.837,2364,0.837,2365,0.837,2366,1.564,2367,0.837,2368,0.837]],["component/44",[46,0.543]],["title/45-1",[187,47.202]],["name/45-1",[]],["text/45-1",[]],["component/45-1",[]],["title/45-2",[211,29.693]],["name/45-2",[]],["text/45-2",[]],["component/45-2",[]],["title/45-3",[54,50.704]],["name/45-3",[]],["text/45-3",[]],["component/45-3",[]],["title/45-4",[206,27.172,1060,47.849]],["name/45-4",[]],["text/45-4",[]],["component/45-4",[]],["title/45-5",[499,37.049]],["name/45-5",[]],["text/45-5",[]],["component/45-5",[]],["title/45-6",[70,38.42,206,27.172]],["name/45-6",[]],["text/45-6",[]],["component/45-6",[]],["title/45-7",[806,47.849,1544,35.208]],["name/45-7",[]],["text/45-7",[]],["component/45-7",[]],["title/45-8",[505,37.241]],["name/45-8",[]],["text/45-8",[]],["component/45-8",[]],["title/45-9",[2369,63.179]],["name/45-9",[]],["text/45-9",[]],["component/45-9",[]],["title/45-10",[2370,63.179]],["name/45-10",[]],["text/45-10",[]],["component/45-10",[]],["title/45-11",[1711,58.786]],["name/45-11",[]],["text/45-11",[]],["component/45-11",[]],["title/45-12",[73,25.198,1691,45.178]],["name/45-12",[]],["text/45-12",[]],["component/45-12",[]],["title/45-13",[2371,69.352]],["name/45-13",[]],["text/45-13",[]],["component/45-13",[]],["title/45-14",[2372,69.352]],["name/45-14",[]],["text/45-14",[]],["component/45-14",[]],["title/45-15",[2373,63.179]],["name/45-15",[]],["text/45-15",[]],["component/45-15",[]],["title/45-16",[152,41.466]],["name/45-16",[]],["text/45-16",[]],["component/45-16",[]],["title/45-17",[1960,58.786]],["name/45-17",[]],["text/45-17",[]],["component/45-17",[]],["title/45-18",[2374,63.179]],["name/45-18",[]],["text/45-18",[]],["component/45-18",[]],["title/45-19",[2375,69.352]],["name/45-19",[]],["text/45-19",[]],["component/45-19",[]],["title/45-20",[2376,63.179]],["name/45-20",[]],["text/45-20",[]],["component/45-20",[]],["title/45",[2,10.124,70,28.001,267,26.365,507,19.803]],["name/45",[2,0.191,70,0.53,507,0.375]],["text/45",[2,1.799,5,1.563,9,3.601,35,2.402,38,1.455,41,1.118,50,2.289,59,1.779,64,2.183,67,1.325,73,1.306,79,1.345,92,2.231,99,1.288,107,1.825,110,2.549,111,1.875,121,1.534,131,1.779,133,1.431,144,2.06,152,4.458,166,1.365,199,2.139,206,1.408,211,1.253,213,2.139,217,4.958,229,2.665,241,1.563,253,1.118,256,3.569,258,2.5,263,1.736,281,1.455,310,1.48,325,1.563,327,1.563,385,2.342,398,2.48,405,1.736,411,1.875,468,1.875,493,1.534,499,4.805,504,1.66,505,3.576,506,2.231,507,4.221,536,2.342,556,1.534,575,2.688,615,3.504,634,3.471,638,2.368,699,3.569,713,2.06,714,2.342,715,3.745,745,2.919,806,4.958,815,1.991,881,1.825,886,2.48,923,2.231,942,1.626,944,1.991,945,3.422,989,1.991,990,3.745,991,3.967,1243,3.422,1274,2.665,1322,3.967,1341,2.342,1544,1.825,1685,2.665,1691,2.342,1710,5.328,1711,2.48,1960,2.48,2007,2.665,2369,2.665,2370,2.665,2371,4.263,2372,5.328,2373,4.263,2374,2.665,2375,4.263,2376,2.665,2377,2.947,2378,4.713,2379,2.947,2380,2.947,2381,2.947,2382,2.947,2383,2.947,2384,2.947,2385,2.947,2386,2.947]],["component/45",[46,0.543]]],"invertedIndex":[["",{"_index":9,"title":{"42":{},"41-1":{},"41-2":{},"41-3":{},"41-4":{},"41-5":{},"41-6":{}},"name":{},"text":{"1":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["0",{"_index":427,"title":{"20-17":{},"30-5":{}},"name":{},"text":{"4":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"21":{},"27":{},"28":{},"29":{},"30":{},"31":{},"34":{},"35":{},"36":{},"38":{},"40":{},"43":{}},"component":{}}],["0.000757",{"_index":702,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0.000822",{"_index":185,"title":{},"name":{},"text":{"3":{}},"component":{}}],["0.002082",{"_index":1112,"title":{},"name":{},"text":{"13":{}},"component":{}}],["0.01",{"_index":1096,"title":{},"name":{},"text":{"13":{}},"component":{}}],["0.05",{"_index":2144,"title":{},"name":{},"text":{"39":{}},"component":{}}],["0.10.0",{"_index":948,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0.10.3",{"_index":88,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["0.11.0",{"_index":74,"title":{},"name":{},"text":{"2":{},"20":{},"21":{}},"component":{}}],["0.25",{"_index":2137,"title":{},"name":{},"text":{"39":{}},"component":{}}],["0.8",{"_index":2148,"title":{},"name":{},"text":{"39":{}},"component":{}}],["000",{"_index":2119,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["000/10",{"_index":2129,"title":{},"name":{},"text":{"39":{}},"component":{}}],["000/20",{"_index":2138,"title":{},"name":{},"text":{"39":{}},"component":{}}],["000/500",{"_index":2126,"title":{},"name":{},"text":{"39":{}},"component":{}}],["001",{"_index":2123,"title":{},"name":{},"text":{"39":{}},"component":{}}],["01",{"_index":2343,"title":{},"name":{},"text":{"43":{}},"component":{}}],["02e5810fb9ecbb8d561bcb54b03cfcc3f1b88eda7043148291e2eb974e5ba16c",{"_index":774,"title":{},"name":{},"text":{"6":{}},"component":{}}],["05",{"_index":1638,"title":{"21-9":{}},"name":{},"text":{},"component":{}}],["06",{"_index":1643,"title":{"21-13":{}},"name":{},"text":{},"component":{}}],["0714e01d3a891f71aeaea0dc1af25958fdb71aa0566773e9e208c8ea1adfd3ab",{"_index":772,"title":{},"name":{},"text":{"6":{}},"component":{}}],["079354de0075c5c1f2a6af40c7dd70a92dc93c68b54ecc327b61c8426fea177c",{"_index":730,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x",{"_index":1558,"title":{},"name":{},"text":{"20":{},"21":{}},"component":{}}],["0x0",{"_index":618,"title":{},"name":{},"text":{"6":{},"10":{},"12":{}},"component":{}}],["0x039564c4f6d9f45a963a6dc8cf32737f0d51a08e446304626173fd838bd70e1c",{"_index":1001,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0x1",{"_index":621,"title":{},"name":{},"text":{"6":{},"20":{}},"component":{}}],["0x10e1",{"_index":931,"title":{},"name":{},"text":{"10":{}},"component":{}}],["0x125e4bc5251af8ee2664ea0d1495b36c593f25f78f1a78f637a3f7aafa9e22",{"_index":1002,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0x1271fa9e5d66cfb372e81591ccfa7107d6adfd4eea65a0023ced14be367a5d2",{"_index":760,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x14acf3b7e92f97adee4d5359a7de3d673582f0ce03d33879cdbdbf03ec7fa5d",{"_index":932,"title":{},"name":{},"text":{"10":{},"29":{}},"component":{}}],["0x15344d9ce0bd1aa5d7577885c0bef948494ac926a9b7080c45ef2754bb2a59a",{"_index":721,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x15511cc3694f64379908437d6d64458dc76d02482052bfb8a5b33a72c054c77",{"_index":681,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad",{"_index":688,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x162da33a4585851fe8d3af3c2a9c60b557814e221e0d4f30ff0b2189d9c7775",{"_index":695,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x174876e800",{"_index":723,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x19bbfaf06c332eda3d6a0f3bf45583d4312707435e8df265a02524853c7491",{"_index":725,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x1e2208b571b2cb68908f37a196ed5e391c8933a6db23bb3939acedee40d9b8a",{"_index":994,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0x1e3207935d3ab611b30bf486915b3d2f7ddb5eaa00c1fca2ec73343babbe434",{"_index":1530,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d",{"_index":736,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x2",{"_index":682,"title":{},"name":{},"text":{"6":{},"20":{}},"component":{}}],["0x208b7fff7fff7ffe",{"_index":717,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x23173d4e2d5c0ecc1376b8dbe345c028aa424048c67f68812a9a83873a2d87f",{"_index":1888,"title":{},"name":{},"text":{"29":{}},"component":{}}],["0x26ee1f973def2e6d5c7f32aaad96c84dab32df6a62ee0e8b530a72bc5478fe6",{"_index":628,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x28ffe4ff0f226a9107253e17a904099aa4f63a02a5621de0576e5aa71bc5194",{"_index":762,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x2902eb93dff1da1a2de652946319fafe27b03601628834219f8738fc9b361d7",{"_index":920,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0x2951dd06d31f492e8ed1e91da115dbcd3ffd7c688f39b4878db99d86995e4c",{"_index":718,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x29cd5db92729052b3268471cf1b2327b61523565adeaa1d659236e806bd4b97",{"_index":1327,"title":{},"name":{},"text":{"17":{}},"component":{}}],["0x3",{"_index":627,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x304a44f9c5a902743a96071794c89959bf2435bd8ebb24ee88bf55ed2b02c04",{"_index":780,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x310959e4d55cfe4712291a5f9787893fb392d1ffb96905aba549b21e91e9fc9",{"_index":727,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3216167b64f5daf104c820d7dfe5df93df158464b10cf5537ed898b2c5ddee7",{"_index":742,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x338027db29a197a7d5dbd49f1e15c9b6702d6a16758dda905efc751bb117153",{"_index":918,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320",{"_index":623,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3632c8d1265888e0eadb518cbf4a83d071d00cd8f946ec72fd661e69eea1963",{"_index":1318,"title":{},"name":{},"text":{"17":{}},"component":{}}],["0x36fcbf06cd96843058359e1a75928beacfac10727dab22a3972f0af8aa92895",{"_index":768,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x389d0bae9be71ceb3b6092dda9b76279543bc2bfe271c3d05a812c3dbeffeb7",{"_index":690,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x39564c4f6d9f45a963a6dc8cf32737f0d51a08e446304626173fd838bd70e1c",{"_index":692,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3a0c6f9001e69edf3c5750475455010ad36eecc6084ebe9ed2c0aa45d029281",{"_index":778,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3b28019ccfdbd30ffc65951d94bb85c9e2b8434111a000b5afd533ce65f57a4",{"_index":781,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3db3da4221c078e78bd987e54e1cc24570d89a7002cefa33e548d6c72c73f9d",{"_index":933,"title":{},"name":{},"text":{"10":{}},"component":{}}],["0x3e8",{"_index":664,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x3f187b7522320f1c87271772fedd6ad119f62595e2d9208824367463df94a5d",{"_index":1887,"title":{},"name":{},"text":{"29":{}},"component":{}}],["0x418a33a22ccba3c743d0a097bd61d749527f4d460bd3317e904762d91eebc05",{"_index":1531,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0x43507ba264f550a20f1957b0e63a8f55bff2648ced17e46f9724ef47c26472",{"_index":763,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x47312450b3ac8b5b8e247a6bb6d523e7605bdb60",{"_index":1730,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0x48127ffb7fff8000",{"_index":716,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x4c16242a45b33e2bf7517a2b757ceba7021d31d0f18b675e3670163ebbafec",{"_index":739,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x4d2",{"_index":624,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x4f508479b71268536367e6225a9afbba484c753706df0c00bd11b2380e8ce9f",{"_index":764,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x502b15e440cc2a8a1966f0c973015096715e366fde36a4659c56f84249688",{"_index":629,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x52371924f8c82221dd895d705eac391f7faefb57b9c55293ede92990355e086",{"_index":710,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x548245153813267af2d2793c6e5d60c40cb95f34d7404f2ce75550fafabede0",{"_index":1299,"title":{},"name":{},"text":{"17":{}},"component":{}}],["0x5d0a87ee7d3b7c70f8683a9f13c12f2fa36c83bbe2b0fa85f6dc9256faf6a",{"_index":741,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x5e797f7945a9a34ad6ab316302b5e752645e07e6d9dcc494fd4bb05da849520",{"_index":738,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x64e10e4399a5760d8db27ea20311380c2cb02063dbd34da731a083b3074c34",{"_index":782,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x6501fcc88705e138910cf5d8f88cedbc7b6ffde47da5562a94dbc834ce92f4",{"_index":709,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x65fced1e7b6b3cf219cda7611966f72068780ad9b514d9bc4e60226f3c30d28",{"_index":766,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x69d743891f69d758928e163eff1e3d7256752f549f134974d4aa8d26d5d7da8",{"_index":630,"title":{},"name":{},"text":{"6":{},"12":{}},"component":{}}],["0x6e4606a3c0f3bd0eac37ddfbf2645f62c04474e5eac51a2f6225ee7702996a",{"_index":689,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x703fad93522cd338891ce4e009ca3d71ff742a31fcf87c46d8a5f644e77fbe3",{"_index":770,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x706064eb9da21c692ef9a6b9f19d671b718e3bea99926ba6b6ad938c049fcb",{"_index":1535,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0x74acbf20e655c80c4fa16e3574489073e0093fd8b386d9614ab2d6cf5b866bf",{"_index":684,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x7569242709918b8929078d3178ed14588348fb5459b44a41f100eb9a67dbeb6",{"_index":919,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0x762e166dd3326b2e263eb5bcfdccd225dc88e067fdf7c92cf8ce5e4ea01f9f1",{"_index":995,"title":{},"name":{},"text":{"12":{}},"component":{}}],["0x76a7d396f5ac4275c97461763e4737829d81ce767aa4cf16d53f0a9ee89bcfc",{"_index":743,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x7797c6673a1a0aeebbcb1c726702e263e5138123124ddef7edd85cd925b11ec",{"_index":667,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x78d796e87cfa496bffad27be9ed42f2709bd6e32a6366f842fdf38664a1412d",{"_index":685,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x7a9e2c42b232648a4f974495cad18734c7d06c70b28f257715bf1d051d7ef38",{"_index":759,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x7dacca7a41e893630664a61f4d8ec05550ca1a212849c62417cb3ecf4bad863",{"_index":661,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x7f00beb6bd9ee1cb5bc6eaf824d0be2f2d5b3580955085c99ff0fc7228dcc07",{"_index":735,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0x8359e4b0152ed5a731162d3c7b0d8d56edb165a0",{"_index":1046,"title":{},"name":{},"text":{"13":{}},"component":{}}],["0x9e4c14403d7d9a8a782044e86a93cae09d7b2ac9",{"_index":666,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0xa4ed3ad27c294565cb0dcc993bddcc75432d498c",{"_index":1736,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0xab43ba48c9edf4c2c4bb01237348d1d7b28ef168",{"_index":1734,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0xbc614e",{"_index":663,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0xc662c410c0ecf747543f5ba90660f6abebd9c8c4",{"_index":1729,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0xde29d060d45901fb19ed6c6e959eb22d8626708",{"_index":1733,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0xf00de10171648ba2d82921388340bf47c83fe18921a7e71f4ded556099b5a5",{"_index":765,"title":{},"name":{},"text":{"6":{}},"component":{}}],["0xf99ee42792c",{"_index":1529,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0≤x<p",{"_index":1749,"title":{},"name":{},"text":{"23":{}},"component":{}}],["1",{"_index":369,"title":{"23-2":{},"30-4":{},"42-3":{},"42-7":{}},"name":{},"text":{"4":{},"6":{},"9":{},"14":{},"18":{},"20":{},"21":{},"22":{},"23":{},"27":{},"30":{},"31":{},"36":{},"37":{},"38":{},"40":{},"41":{},"42":{},"43":{}},"component":{}}],["1.0",{"_index":1487,"title":{},"name":{},"text":{"20":{}},"component":{}}],["1.1",{"_index":2243,"title":{},"name":{},"text":{"41":{}},"component":{}}],["1.2k",{"_index":1573,"title":{},"name":{},"text":{"20":{}},"component":{}}],["1.6",{"_index":2146,"title":{},"name":{},"text":{"39":{}},"component":{}}],["1/1000",{"_index":497,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1/40",{"_index":2127,"title":{},"name":{},"text":{"39":{}},"component":{}}],["10",{"_index":654,"title":{},"name":{},"text":{"6":{},"14":{},"18":{},"39":{}},"component":{}}],["100",{"_index":1162,"title":{},"name":{},"text":{"14":{},"18":{},"37":{},"42":{}},"component":{}}],["1000",{"_index":496,"title":{},"name":{},"text":{"4":{},"13":{},"17":{},"18":{}},"component":{}}],["1000.\\nunknown",{"_index":1303,"title":{},"name":{},"text":{"17":{}},"component":{}}],["10000",{"_index":562,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["100000000000",{"_index":190,"title":{},"name":{},"text":{"3":{},"6":{},"13":{}},"component":{}}],["100000000000000000",{"_index":1310,"title":{},"name":{},"text":{"17":{}},"component":{}}],["101",{"_index":2338,"title":{},"name":{},"text":{"43":{}},"component":{}}],["102",{"_index":2048,"title":{},"name":{},"text":{"37":{}},"component":{}}],["102.4",{"_index":2149,"title":{},"name":{},"text":{"39":{}},"component":{}}],["105",{"_index":732,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1110",{"_index":2057,"title":{},"name":{},"text":{"37":{}},"component":{}}],["12",{"_index":1630,"title":{"21-3":{}},"name":{},"text":{},"component":{}}],["1225578735933442828068102633747590437426782890965066746429241472187377583468",{"_index":1233,"title":{},"name":{},"text":{"15":{}},"component":{}}],["123",{"_index":832,"title":{},"name":{},"text":{"7":{}},"component":{}}],["12321",{"_index":597,"title":{},"name":{},"text":{"5":{}},"component":{}}],["1234",{"_index":700,"title":{},"name":{},"text":{"6":{},"12":{}},"component":{}}],["12345",{"_index":1225,"title":{},"name":{},"text":{"15":{}},"component":{}}],["1336043477925910602175429627555369551262229712266217887481529642650907574765",{"_index":2045,"title":{},"name":{},"text":{"37":{}},"component":{}}],["1351148242645005540004162531550805076995747746087542030095186557536641755046",{"_index":2066,"title":{},"name":{},"text":{"37":{}},"component":{}}],["1471584055184889701471507129567376607666785522455476394130774434754411633091",{"_index":2051,"title":{},"name":{},"text":{"37":{}},"component":{}}],["16",{"_index":2154,"title":{},"name":{},"text":{"39":{}},"component":{}}],["16/02/2021",{"_index":1484,"title":{"20-20":{}},"name":{},"text":{},"component":{}}],["1628448741648245036800002906075225705100596136133912895015035902954123957052",{"_index":1232,"title":{},"name":{},"text":{"15":{}},"component":{}}],["17*2^{192",{"_index":1751,"title":{},"name":{},"text":{"23":{}},"component":{}}],["17/11",{"_index":1478,"title":{},"name":{},"text":{"19":{}},"component":{}}],["1744303484486821561902174603220722448499782664094942993128426674277214273437",{"_index":1889,"title":{},"name":{},"text":{"29":{}},"component":{}}],["178",{"_index":1885,"title":{},"name":{},"text":{"29":{}},"component":{}}],["18446744073709551617",{"_index":2047,"title":{},"name":{},"text":{"37":{}},"component":{}}],["2",{"_index":519,"title":{"23-3":{},"42-4":{},"42-8":{}},"name":{},"text":{"4":{},"6":{},"14":{},"30":{},"31":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["2.1",{"_index":2245,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.2",{"_index":2246,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2.5m",{"_index":1346,"title":{},"name":{},"text":{"18":{}},"component":{}}],["2.starknet.io",{"_index":1738,"title":{},"name":{},"text":{"23":{}},"component":{}}],["20",{"_index":340,"title":{"21-11":{}},"name":{},"text":{"4":{},"14":{},"23":{},"39":{},"42":{}},"component":{}}],["200",{"_index":1110,"title":{},"name":{},"text":{"13":{},"14":{},"18":{},"37":{},"42":{}},"component":{}}],["2019172390095051323869047481075102003731246132997057518965927979101413600827",{"_index":2046,"title":{},"name":{},"text":{"37":{}},"component":{}}],["206",{"_index":708,"title":{},"name":{},"text":{"6":{}},"component":{}}],["20817",{"_index":1113,"title":{},"name":{},"text":{"13":{}},"component":{}}],["2081700000000000",{"_index":1111,"title":{},"name":{},"text":{"13":{}},"component":{}}],["20k",{"_index":2242,"title":{},"name":{},"text":{"41":{}},"component":{}}],["2111158214429736260101797453815341265658516118421387314850625535905115418634",{"_index":2049,"title":{},"name":{},"text":{"37":{}},"component":{}}],["22",{"_index":1631,"title":{"21-3":{},"21-5":{},"21-7":{},"21-9":{},"21-11":{},"21-13":{}},"name":{},"text":{},"component":{}}],["221246409693049874911156614478125967098431447433028390043893900771521609973",{"_index":2061,"title":{},"name":{},"text":{"37":{}},"component":{}}],["23",{"_index":1628,"title":{"21-2":{}},"name":{},"text":{},"component":{}}],["2333",{"_index":1092,"title":{},"name":{},"text":{"13":{}},"component":{}}],["24/11",{"_index":1479,"title":{},"name":{},"text":{"19":{}},"component":{}}],["2439272289032330041885427773916021390926903450917097317807468082958581062272",{"_index":2055,"title":{},"name":{},"text":{"37":{}},"component":{}}],["2472939307328371039455977650994226407024607754063562993856224077254594995194",{"_index":2044,"title":{},"name":{},"text":{"37":{}},"component":{}}],["248",{"_index":2208,"title":{},"name":{},"text":{"40":{}},"component":{}}],["25",{"_index":656,"title":{"21-7":{}},"name":{},"text":{"6":{}},"component":{}}],["250",{"_index":2194,"title":{},"name":{},"text":{"40":{}},"component":{}}],["251",{"_index":1087,"title":{},"name":{},"text":{"13":{},"20":{},"43":{}},"component":{}}],["256",{"_index":1986,"title":{},"name":{},"text":{"35":{}},"component":{}}],["29",{"_index":1633,"title":{"21-5":{}},"name":{},"text":{},"component":{}}],["2933",{"_index":1104,"title":{},"name":{},"text":{"13":{}},"component":{}}],["2\\ell\\right",{"_index":2181,"title":{},"name":{},"text":{"39":{}},"component":{}}],["2^{192}+1",{"_index":2191,"title":{},"name":{},"text":{"40":{}},"component":{}}],["2^{251",{"_index":1750,"title":{},"name":{},"text":{"23":{},"35":{}},"component":{}}],["2^{64}+1",{"_index":2068,"title":{},"name":{},"text":{"37":{}},"component":{}}],["2^{\\ell_r",{"_index":2335,"title":{},"name":{},"text":{"43":{}},"component":{}}],["2^{length",{"_index":2310,"title":{},"name":{},"text":{"43":{}},"component":{}}],["2m",{"_index":1348,"title":{},"name":{},"text":{"18":{}},"component":{}}],["2n+2m",{"_index":2160,"title":{},"name":{},"text":{"39":{}},"component":{}}],["3",{"_index":707,"title":{"42-5":{},"42-9":{}},"name":{},"text":{"6":{},"14":{},"17":{},"31":{},"36":{},"38":{},"41":{},"43":{}},"component":{}}],["3+\\text{payload_s",{"_index":2166,"title":{},"name":{},"text":{"39":{}},"component":{}}],["3.2",{"_index":2150,"title":{},"name":{},"text":{"39":{}},"component":{}}],["30",{"_index":1144,"title":{},"name":{},"text":{"14":{},"16":{}},"component":{}}],["300",{"_index":2065,"title":{},"name":{},"text":{"37":{}},"component":{}}],["309",{"_index":658,"title":{},"name":{},"text":{"6":{}},"component":{}}],["3141592653589793238462643383279502884197169399375105820974944592307816406665",{"_index":2202,"title":{},"name":{},"text":{"40":{}},"component":{}}],["32",{"_index":2152,"title":{},"name":{},"text":{"39":{}},"component":{}}],["32=512",{"_index":2156,"title":{},"name":{},"text":{"39":{}},"component":{}}],["3333",{"_index":1089,"title":{},"name":{},"text":{"13":{}},"component":{}}],["3423542542364363",{"_index":2029,"title":{},"name":{},"text":{"36":{}},"component":{}}],["3429319713503054399243751728532349500489096444181867640228809233993992987070",{"_index":2056,"title":{},"name":{},"text":{"37":{}},"component":{}}],["3476138891838001128614704553731964710634238587541803499001822322602421164873",{"_index":2058,"title":{},"name":{},"text":{"37":{}},"component":{}}],["352040181584456735608515580760888541466059565068553383579463728554843487745",{"_index":1077,"title":{},"name":{},"text":{"13":{}},"component":{}}],["3534535754756246375475423547453",{"_index":2034,"title":{},"name":{},"text":{"36":{}},"component":{}}],["3568809569741913715045370357918125425757114920266578211811626257903121825123",{"_index":1234,"title":{},"name":{},"text":{"15":{}},"component":{}}],["3618502788666131213697322783095070105623107215331596699973092056135872019481",{"_index":1308,"title":{},"name":{},"text":{"17":{}},"component":{}}],["3m",{"_index":1349,"title":{},"name":{},"text":{"18":{}},"component":{}}],["3t",{"_index":2178,"title":{},"name":{},"text":{"39":{}},"component":{}}],["4",{"_index":1148,"title":{},"name":{},"text":{"14":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{}},"component":{}}],["40",{"_index":1145,"title":{},"name":{},"text":{"14":{},"39":{}},"component":{}}],["400",{"_index":1103,"title":{},"name":{},"text":{"13":{},"37":{}},"component":{}}],["41",{"_index":734,"title":{},"name":{},"text":{"6":{}},"component":{}}],["4321",{"_index":930,"title":{},"name":{},"text":{"10":{},"15":{},"17":{},"29":{}},"component":{}}],["4321==0x10e1",{"_index":934,"title":{},"name":{},"text":{"10":{}},"component":{}}],["4337",{"_index":1757,"title":{},"name":{},"text":{"24":{},"25":{}},"component":{}}],["5",{"_index":1686,"title":{},"name":{},"text":{"21":{},"37":{},"39":{},"41":{},"42":{}},"component":{}}],["50",{"_index":1146,"title":{},"name":{},"text":{"14":{}},"component":{}}],["500",{"_index":516,"title":{},"name":{},"text":{"4":{},"37":{},"39":{},"42":{}},"component":{}}],["51.2",{"_index":2151,"title":{},"name":{},"text":{"39":{}},"component":{}}],["541081937647750334353499719661793404023294520617957763260656728924567461866",{"_index":2053,"title":{},"name":{},"text":{"37":{}},"component":{}}],["558404273560404778508455254030458021013656352466216690688595011803280448030",{"_index":2062,"title":{},"name":{},"text":{"37":{}},"component":{}}],["558404273560404778508455254030458021013656352466216690688595011803280448031",{"_index":2063,"title":{},"name":{},"text":{"37":{}},"component":{}}],["558404273560404778508455254030458021013656352466216690688595011803280448032",{"_index":2064,"title":{},"name":{},"text":{"37":{}},"component":{}}],["59664015286291125586727181187045849528930298741728639958614076589374875456",{"_index":2060,"title":{},"name":{},"text":{"37":{}},"component":{}}],["5m",{"_index":2135,"title":{},"name":{},"text":{"39":{}},"component":{}}],["6",{"_index":2059,"title":{},"name":{},"text":{"37":{}},"component":{}}],["60",{"_index":1147,"title":{},"name":{},"text":{"14":{}},"component":{}}],["600",{"_index":1095,"title":{},"name":{},"text":{"13":{},"37":{}},"component":{}}],["619473939880410191267127038055308002651079521370507951329266275707625062498",{"_index":2050,"title":{},"name":{},"text":{"37":{}},"component":{}}],["619473939880410191267127038055308002651079521370507951329266275707625062499",{"_index":2052,"title":{},"name":{},"text":{"37":{}},"component":{}}],["64",{"_index":1857,"title":{},"name":{},"text":{"28":{}},"component":{}}],["6807",{"_index":1886,"title":{},"name":{},"text":{"29":{}},"component":{}}],["7",{"_index":1970,"title":{},"name":{},"text":{"34":{}},"component":{}}],["726",{"_index":1414,"title":{},"name":{},"text":{"19":{}},"component":{}}],["75",{"_index":767,"title":{},"name":{},"text":{"6":{}},"component":{}}],["7568",{"_index":703,"title":{},"name":{},"text":{"6":{}},"component":{}}],["756800000000000",{"_index":701,"title":{},"name":{},"text":{"6":{}},"component":{}}],["799",{"_index":1389,"title":{},"name":{},"text":{"19":{}},"component":{}}],["8",{"_index":2067,"title":{},"name":{},"text":{"37":{}},"component":{}}],["8224",{"_index":188,"title":{},"name":{},"text":{"3":{}},"component":{}}],["822400000000000",{"_index":183,"title":{},"name":{},"text":{"3":{}},"component":{}}],["89",{"_index":694,"title":{},"name":{},"text":{"6":{}},"component":{}}],["8m",{"_index":1347,"title":{},"name":{},"text":{"18":{}},"component":{}}],["916907772491729262376534102982219947830828984996257231353398618781993312401",{"_index":797,"title":{},"name":{},"text":{"6":{}},"component":{}}],["955723665991825982403667749532843665052270105995360175183368988948217233556",{"_index":2054,"title":{},"name":{},"text":{"37":{}},"component":{}}],["_",{"_index":451,"title":{},"name":{},"text":{"4":{}},"component":{}}],["__default__",{"_index":200,"title":{},"name":{},"text":{"3":{},"8":{},"44":{}},"component":{}}],["__execute__",{"_index":1754,"title":{},"name":{},"text":{"24":{},"26":{},"27":{}},"component":{}}],["__file__",{"_index":1247,"title":{},"name":{},"text":{"16":{}},"component":{}}],["__l1_default__",{"_index":864,"title":{},"name":{},"text":{"8":{}},"component":{}}],["__validate__",{"_index":1600,"title":{},"name":{},"text":{"20":{},"24":{},"26":{},"27":{}},"component":{}}],["__validate_declare__",{"_index":1537,"title":{},"name":{},"text":{"20":{}},"component":{}}],["_{\\text{numb",{"_index":2161,"title":{},"name":{},"text":{"39":{}},"component":{}}],["a=&a[1",{"_index":1141,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a[0",{"_index":1138,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a[0].i",{"_index":1161,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a[0].x",{"_index":1159,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a_1",{"_index":2221,"title":{},"name":{},"text":{"40":{}},"component":{}}],["a_2",{"_index":2223,"title":{},"name":{},"text":{"40":{}},"component":{}}],["a_len",{"_index":1135,"title":{},"name":{},"text":{"14":{},"31":{}},"component":{}}],["a_len=a_len",{"_index":1140,"title":{},"name":{},"text":{"14":{}},"component":{}}],["a_n",{"_index":2222,"title":{},"name":{},"text":{"40":{}},"component":{}}],["a_{high",{"_index":2205,"title":{},"name":{},"text":{"40":{}},"component":{}}],["a_{low",{"_index":2204,"title":{},"name":{},"text":{"40":{}},"component":{}}],["abi",{"_index":505,"title":{"31":{},"12-4":{},"38-2":{},"45-8":{}},"name":{"31":{}},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"31":{},"34":{},"38":{},"44":{},"45":{}},"component":{}}],["abi.encodepack",{"_index":2240,"title":{},"name":{},"text":{"41":{}},"component":{}}],["abil",{"_index":77,"title":{},"name":{},"text":{"2":{},"13":{},"19":{},"27":{},"42":{}},"component":{}}],["abov",{"_index":336,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"9":{},"12":{},"14":{},"20":{},"21":{},"24":{},"27":{},"34":{},"35":{},"37":{},"38":{},"39":{},"41":{},"43":{}},"component":{}}],["abstract",{"_index":1664,"title":{"25-2":{}},"name":{},"text":{"21":{},"24":{},"25":{},"27":{}},"component":{}}],["accept",{"_index":477,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"12":{},"13":{},"14":{},"21":{},"29":{},"37":{},"44":{}},"component":{}}],["accepted_on_l1",{"_index":529,"title":{"29-7":{}},"name":{},"text":{"4":{},"12":{},"17":{},"44":{}},"component":{}}],["accepted_on_l2",{"_index":528,"title":{"29-6":{}},"name":{},"text":{"4":{},"6":{},"12":{},"17":{},"29":{},"42":{},"44":{}},"component":{}}],["access",{"_index":222,"title":{},"name":{},"text":{"3":{},"5":{},"12":{},"19":{},"25":{},"36":{},"41":{},"44":{}},"component":{}}],["accord",{"_index":639,"title":{},"name":{},"text":{"6":{},"21":{},"37":{},"39":{},"43":{}},"component":{}}],["accordingli",{"_index":1071,"title":{},"name":{},"text":{"13":{}},"component":{}}],["account",{"_index":99,"title":{"3":{},"24":{},"25":{},"3-4":{},"3-5":{},"3-6":{},"25-1":{},"25-2":{},"25-3":{}},"name":{},"text":{"3":{},"4":{},"6":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"21":{},"24":{},"25":{},"27":{},"30":{},"36":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["account'",{"_index":485,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account=my_account",{"_index":195,"title":{},"name":{},"text":{"3":{}},"component":{}}],["account_address",{"_index":523,"title":{},"name":{},"text":{"4":{},"6":{},"17":{}},"component":{}}],["account_address_trim",{"_index":155,"title":{},"name":{},"text":{"3":{},"6":{}},"component":{}}],["account_bal",{"_index":354,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_balance.read",{"_index":364,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_balance.writ",{"_index":370,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_balance_bound",{"_index":488,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_class_hash",{"_index":706,"title":{},"name":{},"text":{"6":{}},"component":{}}],["account_contract",{"_index":2370,"title":{"45-10":{}},"name":{},"text":{"45":{}},"component":{}}],["account_contract_address",{"_index":1171,"title":{},"name":{},"text":{"14":{}},"component":{}}],["account_from_bal",{"_index":429,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_id",{"_index":355,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_id=account_id",{"_index":371,"title":{},"name":{},"text":{"4":{}},"component":{}}],["account_nam",{"_index":2365,"title":{},"name":{},"text":{"44":{}},"component":{}}],["account_setup",{"_index":103,"title":{},"name":{"3":{}},"text":{},"component":{}}],["account’",{"_index":134,"title":{},"name":{},"text":{"3":{},"4":{},"24":{},"25":{},"27":{}},"component":{}}],["accumul",{"_index":1878,"title":{},"name":{},"text":{"29":{}},"component":{}}],["accur",{"_index":1454,"title":{},"name":{},"text":{"19":{}},"component":{}}],["achiev",{"_index":17,"title":{},"name":{},"text":{"1":{},"11":{},"19":{},"25":{},"27":{}},"component":{}}],["acquir",{"_index":168,"title":{},"name":{},"text":{"3":{},"17":{}},"component":{}}],["action",{"_index":1842,"title":{},"name":{},"text":{"27":{}},"component":{}}],["activ",{"_index":57,"title":{},"name":{},"text":{"2":{},"41":{}},"component":{}}],["actual",{"_index":244,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"29":{},"39":{},"42":{},"43":{}},"component":{}}],["actual_fe",{"_index":648,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ad",{"_index":567,"title":{"17":{},"19-2":{},"19-6":{},"19-14":{},"19-24":{},"39-6":{}},"name":{},"text":{"5":{},"6":{},"10":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"29":{},"33":{},"35":{},"41":{},"43":{},"44":{}},"component":{}}],["add",{"_index":116,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"25":{},"27":{},"38":{},"41":{},"44":{}},"component":{}}],["add_demo_token",{"_index":481,"title":{},"name":{},"text":{"4":{}},"component":{}}],["add_transact",{"_index":1603,"title":{},"name":{},"text":{"20":{}},"component":{}}],["addit",{"_index":225,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"13":{},"17":{},"19":{},"20":{},"21":{},"30":{},"37":{},"39":{}},"component":{}}],["addition",{"_index":1583,"title":{},"name":{},"text":{"20":{},"43":{}},"component":{}}],["addition/multipl",{"_index":2111,"title":{},"name":{},"text":{"39":{}},"component":{}}],["address",{"_index":154,"title":{"32":{},"5-1":{},"17-2":{}},"name":{"32":{}},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"25":{},"28":{},"30":{},"32":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["address=address",{"_index":824,"title":{},"name":{},"text":{"7":{}},"component":{}}],["addresss",{"_index":2167,"title":{},"name":{},"text":{"39":{}},"component":{}}],["adher",{"_index":1766,"title":{},"name":{},"text":{"24":{}},"component":{}}],["adjust",{"_index":802,"title":{},"name":{},"text":{"6":{}},"component":{}}],["advanc",{"_index":756,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["affect",{"_index":564,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"12":{},"13":{},"20":{},"21":{},"39":{},"44":{}},"component":{}}],["aforement",{"_index":803,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["again",{"_index":816,"title":{},"name":{},"text":{"7":{},"13":{}},"component":{}}],["aggreg",{"_index":2106,"title":{},"name":{},"text":{"39":{}},"component":{}}],["agre",{"_index":984,"title":{},"name":{},"text":{"12":{}},"component":{}}],["algebar",{"_index":1613,"title":{},"name":{},"text":{"20":{}},"component":{}}],["algorithm",{"_index":1923,"title":{},"name":{},"text":{"30":{}},"component":{}}],["align",{"_index":1900,"title":{},"name":{},"text":{"30":{}},"component":{}}],["alloc",{"_index":891,"title":{},"name":{},"text":{"9":{},"13":{},"20":{},"36":{},"38":{},"39":{},"41":{}},"component":{}}],["alloc_loc",{"_index":446,"title":{},"name":{},"text":{"4":{}},"component":{}}],["allow",{"_index":312,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"21":{},"25":{},"27":{},"34":{},"36":{},"37":{},"41":{},"44":{}},"component":{}}],["along",{"_index":677,"title":{},"name":{},"text":{"6":{},"19":{},"43":{}},"component":{}}],["alpha",{"_index":232,"title":{"20":{},"4-1":{},"23-1":{},"23-2":{},"23-3":{},"42-10":{}},"name":{},"text":{"4":{},"11":{},"12":{},"13":{},"18":{},"20":{},"37":{},"39":{},"42":{},"44":{}},"component":{}}],["alpha=1",{"_index":2201,"title":{},"name":{},"text":{"40":{}},"component":{}}],["alphabet",{"_index":1721,"title":{},"name":{},"text":{"22":{}},"component":{}}],["alreadi",{"_index":580,"title":{},"name":{},"text":{"5":{},"20":{}},"component":{}}],["although",{"_index":1778,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alway",{"_index":1670,"title":{},"name":{},"text":{"21":{},"27":{},"29":{},"32":{},"34":{},"41":{}},"component":{}}],["ambigu",{"_index":1619,"title":{},"name":{},"text":{"20":{}},"component":{}}],["amm",{"_index":230,"title":{"4":{},"4-1":{},"4-2":{},"4-4":{}},"name":{"4":{}},"text":{"4":{}},"component":{}}],["amm_address",{"_index":511,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amm_from_bal",{"_index":448,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amm_sample.cairo",{"_index":503,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amm_sample_abi.json",{"_index":509,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amm_sample_compiled.json",{"_index":508,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amm_to_bal",{"_index":449,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount",{"_index":160,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"10":{},"12":{},"13":{},"15":{},"17":{},"39":{},"41":{},"42":{}},"component":{}}],["amount=10",{"_index":1260,"title":{},"name":{},"text":{"16":{}},"component":{}}],["amount=20",{"_index":1261,"title":{},"name":{},"text":{"16":{}},"component":{}}],["amount=amount",{"_index":550,"title":{},"name":{},"text":{"5":{},"10":{}},"component":{}}],["amount=amount_to",{"_index":455,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount=token_a_amount",{"_index":489,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount=token_b_amount",{"_index":490,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount_from",{"_index":422,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount_from=amount_from",{"_index":437,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount_hash",{"_index":1202,"title":{},"name":{},"text":{"15":{}},"component":{}}],["amount_to",{"_index":423,"title":{},"name":{},"text":{"4":{}},"component":{}}],["amount_to=amount_to",{"_index":438,"title":{},"name":{},"text":{"4":{}},"component":{}}],["analog",{"_index":1955,"title":{},"name":{},"text":{"33":{},"36":{}},"component":{}}],["analogu",{"_index":1956,"title":{},"name":{},"text":{"33":{}},"component":{}}],["analyz",{"_index":2102,"title":{},"name":{},"text":{"39":{}},"component":{}}],["and/or",{"_index":784,"title":{},"name":{},"text":{"6":{}},"component":{}}],["annot",{"_index":960,"title":{},"name":{},"text":{"12":{},"41":{}},"component":{}}],["anoth",{"_index":491,"title":{"5":{},"9":{}},"name":{},"text":{"4":{},"5":{},"9":{},"12":{},"17":{},"25":{},"35":{},"36":{},"43":{}},"component":{}}],["anyon",{"_index":1072,"title":{},"name":{},"text":{"13":{},"37":{},"42":{}},"component":{}}],["anyth",{"_index":1566,"title":{},"name":{},"text":{"20":{}},"component":{}}],["anyway",{"_index":584,"title":{},"name":{},"text":{"5":{},"17":{}},"component":{}}],["ap",{"_index":1681,"title":{},"name":{},"text":{"21":{}},"component":{}}],["api",{"_index":940,"title":{"20-13":{},"20-25":{}},"name":{},"text":{"10":{},"19":{},"20":{},"21":{},"23":{},"34":{}},"component":{}}],["app",{"_index":178,"title":{},"name":{},"text":{"3":{},"20":{}},"component":{}}],["appear",{"_index":1999,"title":{},"name":{},"text":{"36":{},"38":{},"39":{},"41":{}},"component":{}}],["appli",{"_index":783,"title":{},"name":{},"text":{"6":{},"12":{},"19":{},"21":{},"29":{},"34":{},"44":{}},"component":{}}],["applic",{"_index":314,"title":{},"name":{},"text":{"4":{},"13":{},"15":{},"20":{},"39":{},"44":{}},"component":{}}],["approach",{"_index":1753,"title":{},"name":{"24":{}},"text":{},"component":{}}],["appropri",{"_index":159,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["approv",{"_index":1516,"title":{},"name":{},"text":{"20":{},"27":{}},"component":{}}],["arbitrari",{"_index":878,"title":{},"name":{},"text":{"9":{},"12":{},"14":{},"24":{},"27":{},"36":{}},"component":{}}],["architectur",{"_index":1521,"title":{"42-1":{}},"name":{},"text":{"20":{},"36":{}},"component":{}}],["arg",{"_index":1977,"title":{},"name":{},"text":{"35":{}},"component":{}}],["arguement",{"_index":2360,"title":{},"name":{},"text":{"44":{}},"component":{}}],["argument",{"_index":206,"title":{"14-2":{},"14-3":{},"45-4":{},"45-6":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"17":{},"20":{},"21":{},"30":{},"35":{},"36":{},"43":{},"44":{},"45":{}},"component":{}}],["arithmet",{"_index":2325,"title":{},"name":{},"text":{"43":{}},"component":{}}],["around",{"_index":1678,"title":{},"name":{},"text":{"21":{}},"component":{}}],["arr",{"_index":2082,"title":{},"name":{},"text":{"38":{}},"component":{}}],["arr_len",{"_index":2081,"title":{},"name":{},"text":{"38":{}},"component":{}}],["array",{"_index":884,"title":{"14-3":{},"14-5":{},"40-6":{}},"name":{},"text":{"9":{},"14":{},"31":{},"32":{},"34":{},"36":{},"37":{},"38":{},"40":{},"41":{}},"component":{}}],["array_len",{"_index":1942,"title":{},"name":{},"text":{"31":{}},"component":{}}],["array’",{"_index":1149,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ascii",{"_index":1902,"title":{},"name":{},"text":{"30":{},"32":{},"34":{},"35":{},"38":{},"41":{}},"component":{}}],["aspect",{"_index":300,"title":{},"name":{},"text":{"4":{}},"component":{}}],["assembl",{"_index":1495,"title":{},"name":{},"text":{"20":{}},"component":{}}],["assert",{"_index":378,"title":{},"name":{},"text":{"4":{},"13":{},"14":{},"15":{},"16":{},"20":{},"29":{},"36":{},"38":{},"39":{},"41":{}},"component":{}}],["assert_l",{"_index":431,"title":{},"name":{},"text":{"4":{}},"component":{}}],["assert_lt_felt",{"_index":2228,"title":{},"name":{},"text":{"41":{}},"component":{}}],["assert_nn",{"_index":1042,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["assert_nn_l",{"_index":367,"title":{},"name":{},"text":{"4":{}},"component":{}}],["assert_not_zero",{"_index":2230,"title":{},"name":{},"text":{"41":{}},"component":{}}],["assertionerror",{"_index":1333,"title":{},"name":{},"text":{"17":{}},"component":{}}],["asset",{"_index":1037,"title":{},"name":{},"text":{"13":{},"25":{},"41":{}},"component":{}}],["asseta",{"_index":1555,"title":{},"name":{},"text":{"20":{}},"component":{}}],["assetb",{"_index":1556,"title":{},"name":{},"text":{"20":{}},"component":{}}],["assetid",{"_index":1564,"title":{},"name":{},"text":{"20":{}},"component":{}}],["assist",{"_index":1601,"title":{},"name":{},"text":{"20":{}},"component":{}}],["associ",{"_index":72,"title":{},"name":{},"text":{"2":{},"6":{},"20":{},"25":{},"37":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["assum",{"_index":386,"title":{},"name":{},"text":{"4":{},"8":{},"13":{}},"component":{}}],["assumpt",{"_index":2112,"title":{},"name":{},"text":{"39":{}},"component":{}}],["asterisk",{"_index":2344,"title":{},"name":{},"text":{"44":{}},"component":{}}],["async",{"_index":1249,"title":{},"name":{},"text":{"16":{}},"component":{}}],["asynchron",{"_index":2225,"title":{},"name":{},"text":{"41":{}},"component":{}}],["asyncio",{"_index":1240,"title":{},"name":{},"text":{"16":{}},"component":{}}],["atom",{"_index":2183,"title":{},"name":{},"text":{"39":{}},"component":{}}],["attach",{"_index":2227,"title":{},"name":{},"text":{"41":{}},"component":{}}],["attack",{"_index":1211,"title":{},"name":{},"text":{"15":{},"27":{},"41":{}},"component":{}}],["attacker’",{"_index":1837,"title":{},"name":{},"text":{"27":{}},"component":{}}],["augment",{"_index":2196,"title":{},"name":{},"text":{"40":{}},"component":{}}],["authent",{"_index":800,"title":{"17":{}},"name":{},"text":{"6":{},"10":{},"15":{}},"component":{}}],["author",{"_index":976,"title":{},"name":{},"text":{"12":{}},"component":{}}],["autoformatt",{"_index":1651,"title":{},"name":{},"text":{"21":{}},"component":{}}],["autom",{"_index":236,"title":{"4":{}},"name":{},"text":{"4":{}},"component":{}}],["automat",{"_index":957,"title":{},"name":{},"text":{"12":{},"13":{},"21":{},"35":{},"38":{}},"component":{}}],["avail",{"_index":331,"title":{},"name":{},"text":{"4":{},"19":{},"30":{},"36":{},"39":{}},"component":{}}],["avoid",{"_index":1618,"title":{},"name":{},"text":{"20":{},"27":{},"41":{}},"component":{}}],["await",{"_index":1254,"title":{},"name":{},"text":{"16":{}},"component":{}}],["awar",{"_index":1321,"title":{},"name":{},"text":{"17":{}},"component":{}}],["away",{"_index":1841,"title":{},"name":{},"text":{"27":{}},"component":{}}],["b",{"_index":295,"title":{},"name":{},"text":{"4":{},"14":{},"28":{},"31":{},"38":{},"40":{}},"component":{}}],["b=&b[1",{"_index":1143,"title":{},"name":{},"text":{"14":{}},"component":{}}],["b[0",{"_index":1139,"title":{},"name":{},"text":{"14":{}},"component":{}}],["b_l",{"_index":2329,"title":{},"name":{},"text":{"43":{}},"component":{}}],["b_len",{"_index":1137,"title":{},"name":{},"text":{"14":{}},"component":{}}],["b_len=b_len",{"_index":1142,"title":{},"name":{},"text":{"14":{}},"component":{}}],["b_r",{"_index":2332,"title":{},"name":{},"text":{"43":{}},"component":{}}],["b_{high",{"_index":2207,"title":{},"name":{},"text":{"40":{}},"component":{}}],["b_{low",{"_index":2206,"title":{},"name":{},"text":{"40":{}},"component":{}}],["back",{"_index":961,"title":{},"name":{},"text":{"12":{},"13":{},"39":{},"42":{}},"component":{}}],["background",{"_index":1011,"title":{"13-1":{}},"name":{},"text":{},"component":{}}],["backup",{"_index":215,"title":{},"name":{},"text":{"3":{},"44":{}},"component":{}}],["bal=token_a",{"_index":474,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bal=token_b",{"_index":476,"title":{},"name":{},"text":{"4":{}},"component":{}}],["balanc",{"_index":328,"title":{"12-8":{}},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"10":{},"12":{},"13":{},"15":{},"17":{},"42":{}},"component":{}}],["balance.read",{"_index":949,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"17":{},"36":{}},"component":{}}],["balance.writ",{"_index":950,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"17":{},"36":{}},"component":{}}],["balance=amm_from_bal",{"_index":454,"title":{},"name":{},"text":{"4":{}},"component":{}}],["balance=amm_to_bal",{"_index":456,"title":{},"name":{},"text":{"4":{}},"component":{}}],["balance=r",{"_index":1052,"title":{},"name":{},"text":{"13":{}},"component":{}}],["balance_class_hash",{"_index":595,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["balance_contract",{"_index":535,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["balance_contract.cairo",{"_index":858,"title":{},"name":{},"text":{"8":{}},"component":{}}],["balance_contract_abi.json",{"_index":569,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["balance_contract_compiled.json",{"_index":594,"title":{},"name":{},"text":{"5":{}},"component":{}}],["balance_key",{"_index":794,"title":{},"name":{},"text":{"6":{}},"component":{}}],["balance_upper_bound",{"_index":368,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bar",{"_index":1273,"title":{},"name":{},"text":{"17":{}},"component":{}}],["base",{"_index":1003,"title":{},"name":{},"text":{"12":{},"13":{},"23":{},"42":{}},"component":{}}],["basi",{"_index":1344,"title":{},"name":{},"text":{"18":{}},"component":{}}],["basic",{"_index":265,"title":{"44-1":{}},"name":{},"text":{"4":{},"12":{},"25":{},"29":{},"35":{}},"component":{}}],["be",{"_index":1523,"title":{},"name":{},"text":{"20":{},"25":{},"41":{},"44":{}},"component":{}}],["becom",{"_index":1606,"title":{},"name":{},"text":{"20":{},"21":{},"29":{},"30":{},"39":{}},"component":{}}],["befor",{"_index":261,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"9":{},"10":{},"12":{},"13":{},"17":{},"19":{},"21":{},"25":{},"27":{},"28":{},"29":{},"41":{},"42":{},"44":{}},"component":{}}],["begin",{"_index":262,"title":{},"name":{},"text":{"4":{},"14":{},"40":{},"42":{}},"component":{}}],["begin{align",{"_index":1862,"title":{},"name":{},"text":{"28":{},"30":{},"41":{}},"component":{}}],["begin{cas",{"_index":2321,"title":{},"name":{},"text":{"43":{}},"component":{}}],["behav",{"_index":1209,"title":{},"name":{},"text":{"15":{},"33":{}},"component":{}}],["behavior",{"_index":1236,"title":{},"name":{},"text":{"16":{},"25":{}},"component":{}}],["behind",{"_index":1790,"title":{},"name":{},"text":{"25":{}},"component":{}}],["below",{"_index":698,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"20":{},"35":{},"37":{},"38":{},"39":{},"41":{}},"component":{}}],["best",{"_index":1191,"title":{},"name":{},"text":{"15":{},"18":{},"27":{}},"component":{}}],["beta",{"_index":2200,"title":{},"name":{},"text":{"40":{}},"component":{}}],["better",{"_index":1324,"title":{},"name":{},"text":{"17":{}},"component":{}}],["between",{"_index":125,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"13":{},"19":{},"20":{},"33":{},"37":{},"41":{},"43":{}},"component":{}}],["big",{"_index":1395,"title":{},"name":{},"text":{"19":{},"21":{},"41":{}},"component":{}}],["binari",{"_index":1858,"title":{},"name":{},"text":{"28":{},"43":{}},"component":{}}],["bit",{"_index":1088,"title":{},"name":{},"text":{"13":{},"20":{},"37":{},"40":{},"43":{}},"component":{}}],["bits}}}_{\\text{lsb",{"_index":2042,"title":{},"name":{},"text":{"37":{}},"component":{}}],["bitwis",{"_index":839,"title":{},"name":{},"text":{"8":{},"39":{}},"component":{}}],["bitwise_builtin",{"_index":1882,"title":{},"name":{},"text":{"29":{}},"component":{}}],["blake2s.cairo",{"_index":1716,"title":{},"name":{},"text":{"21":{}},"component":{}}],["block",{"_index":568,"title":{"22":{},"28":{},"6-15":{},"14-7":{},"28-1":{},"28-2":{},"29-8":{},"42-5":{},"42-8":{}},"name":{},"text":{"5":{},"6":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"26":{},"27":{},"28":{},"29":{},"30":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["block_hash",{"_index":617,"title":{},"name":{},"text":{"6":{},"12":{},"29":{},"44":{}},"component":{}}],["block_numb",{"_index":619,"title":{},"name":{},"text":{"6":{},"14":{},"28":{},"29":{},"36":{},"44":{}},"component":{}}],["block_timestamp",{"_index":1181,"title":{},"name":{},"text":{"14":{},"28":{},"36":{}},"component":{}}],["blockchain",{"_index":1101,"title":{},"name":{},"text":{"13":{},"22":{},"25":{}},"component":{}}],["block’",{"_index":1848,"title":{},"name":{},"text":{"28":{},"29":{}},"component":{}}],["bmod",{"_index":1985,"title":{},"name":{},"text":{"35":{}},"component":{}}],["bodi",{"_index":543,"title":{},"name":{},"text":{"5":{}},"component":{}}],["boolean",{"_index":1701,"title":{},"name":{},"text":{"21":{}},"component":{}}],["both",{"_index":285,"title":{},"name":{},"text":{"4":{},"5":{},"14":{},"19":{},"29":{},"35":{},"37":{},"39":{},"41":{},"43":{}},"component":{}}],["bottom",{"_index":533,"title":{},"name":{},"text":{"5":{},"43":{}},"component":{}}],["bound",{"_index":382,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["bracket",{"_index":397,"title":{},"name":{},"text":{"4":{}},"component":{}}],["break",{"_index":1363,"title":{"19-25":{}},"name":{},"text":{"19":{},"21":{},"40":{}},"component":{}}],["bridg",{"_index":176,"title":{"42":{},"13-4":{},"23-4":{}},"name":{"42":{}},"text":{"3":{},"13":{},"23":{},"41":{},"42":{}},"component":{}}],["brief",{"_index":2302,"title":{},"name":{},"text":{"43":{}},"component":{}}],["briefli",{"_index":390,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bring",{"_index":1788,"title":{},"name":{},"text":{"25":{}},"component":{}}],["broader",{"_index":1997,"title":{},"name":{},"text":{"36":{}},"component":{}}],["bug",{"_index":1378,"title":{},"name":{},"text":{"19":{},"21":{},"41":{}},"component":{}}],["build",{"_index":1039,"title":{},"name":{},"text":{"13":{}},"component":{}}],["built",{"_index":1016,"title":{},"name":{},"text":{"13":{},"30":{},"39":{}},"component":{}}],["builtin",{"_index":208,"title":{"39-5":{},"39-6":{}},"name":{},"text":{"3":{},"8":{},"12":{},"14":{},"21":{},"34":{},"39":{},"44":{}},"component":{}}],["builtin_instance_count",{"_index":651,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["bullet",{"_index":1590,"title":{},"name":{},"text":{"20":{}},"component":{}}],["bump",{"_index":2248,"title":{},"name":{},"text":{"41":{}},"component":{}}],["bundl",{"_index":1470,"title":{},"name":{},"text":{"19":{}},"component":{}}],["burn",{"_index":2285,"title":{},"name":{},"text":{"42":{}},"component":{}}],["busi",{"_index":44,"title":{},"name":{},"text":{"1":{},"4":{}},"component":{}}],["bypass",{"_index":1795,"title":{},"name":{},"text":{"25":{}},"component":{}}],["byte",{"_index":1952,"title":{},"name":{},"text":{"33":{},"39":{},"41":{},"44":{}},"component":{}}],["bytecod",{"_index":714,"title":{},"name":{},"text":{"6":{},"34":{},"44":{},"45":{}},"component":{}}],["byteorder=\"big",{"_index":1931,"title":{},"name":{},"text":{"30":{}},"component":{}}],["c",{"_index":1672,"title":{},"name":{},"text":{"21":{},"34":{}},"component":{}}],["c_w",{"_index":2153,"title":{},"name":{},"text":{"39":{}},"component":{}}],["c_w=16\\cdot",{"_index":2155,"title":{},"name":{},"text":{"39":{}},"component":{}}],["c_w\\cdot",{"_index":2165,"title":{},"name":{},"text":{"39":{}},"component":{}}],["c_w\\cdot\\underbrac",{"_index":2159,"title":{},"name":{},"text":{"39":{}},"component":{}}],["c_w\\left",{"_index":2176,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cach",{"_index":1412,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cairo",{"_index":38,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"30":{},"33":{},"34":{},"35":{},"36":{},"39":{},"41":{},"44":{},"45":{}},"component":{}}],["cairo1.0",{"_index":1677,"title":{},"name":{},"text":{"21":{}},"component":{}}],["cairo_depend",{"_index":2375,"title":{"45-19":{}},"name":{},"text":{"45":{}},"component":{}}],["cairo_path",{"_index":2372,"title":{"45-14":{}},"name":{},"text":{"45":{}},"component":{}}],["cairoresourcefeeweight",{"_index":2134,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cairoresourceusag",{"_index":2131,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cairo’",{"_index":402,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["calcul",{"_index":377,"title":{"30-2":{},"30-6":{},"30-7":{},"30-9":{},"30-10":{}},"name":{},"text":{"4":{},"30":{},"34":{},"35":{},"39":{},"41":{}},"component":{}}],["call",{"_index":201,"title":{"5":{},"36":{},"5-2":{},"9-1":{},"20-9":{},"42-3":{},"42-7":{},"44-4":{}},"name":{"36":{}},"text":{"3":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"25":{},"26":{},"27":{},"29":{},"30":{},"33":{},"34":{},"35":{},"36":{},"38":{},"41":{},"42":{},"44":{}},"component":{}}],["call_contract",{"_index":1554,"title":{"36-1":{}},"name":{},"text":{"20":{}},"component":{}}],["call_contract{syscall_ptr",{"_index":2000,"title":{},"name":{},"text":{"36":{}},"component":{}}],["call_get_bal",{"_index":558,"title":{},"name":{},"text":{"5":{}},"component":{}}],["call_get_balance{syscall_ptr",{"_index":551,"title":{},"name":{},"text":{"5":{}},"component":{}}],["call_increase_bal",{"_index":557,"title":{},"name":{},"text":{"5":{}},"component":{}}],["call_increase_balance{syscall_ptr",{"_index":547,"title":{},"name":{},"text":{"5":{}},"component":{}}],["call_typ",{"_index":680,"title":{},"name":{},"text":{"6":{}},"component":{}}],["callabl",{"_index":993,"title":{},"name":{},"text":{"12":{},"34":{}},"component":{}}],["calldata",{"_index":620,"title":{"14-3":{},"14-4":{}},"name":{},"text":{"6":{},"7":{},"8":{},"9":{},"14":{},"20":{},"30":{},"36":{},"37":{},"39":{},"41":{}},"component":{}}],["calldata=calldata",{"_index":853,"title":{},"name":{},"text":{"8":{}},"component":{}}],["calldata_hash",{"_index":1947,"title":{},"name":{},"text":{"32":{}},"component":{}}],["calldata_s",{"_index":847,"title":{},"name":{},"text":{"8":{},"36":{}},"component":{}}],["calldata_size=calldata_s",{"_index":852,"title":{},"name":{},"text":{"8":{}},"component":{}}],["calldate[0",{"_index":1562,"title":{},"name":{},"text":{"20":{}},"component":{}}],["caller",{"_index":1265,"title":{"17-2":{}},"name":{},"text":{"17":{},"41":{}},"component":{}}],["caller/calle",{"_index":675,"title":{},"name":{},"text":{"6":{}},"component":{}}],["caller_address",{"_index":683,"title":{},"name":{},"text":{"6":{},"17":{},"32":{},"36":{}},"component":{}}],["calling_contract",{"_index":531,"title":{},"name":{"5":{}},"text":{},"component":{}}],["came",{"_index":2282,"title":{},"name":{},"text":{"42":{}},"component":{}}],["cancel",{"_index":2224,"title":{"41-4":{}},"name":{},"text":{"41":{}},"component":{}}],["cancell1tol2messag",{"_index":2261,"title":{},"name":{},"text":{"41":{}},"component":{}}],["can’t",{"_index":811,"title":{},"name":{},"text":{"7":{},"12":{},"19":{},"24":{},"39":{}},"component":{}}],["cap",{"_index":492,"title":{},"name":{},"text":{"4":{}},"component":{}}],["capabl",{"_index":55,"title":{},"name":{},"text":{"2":{},"42":{}},"component":{}}],["case",{"_index":42,"title":{"39-7":{}},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"25":{},"29":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["casm",{"_index":1496,"title":{},"name":{},"text":{"20":{}},"component":{}}],["caus",{"_index":1335,"title":{},"name":{},"text":{"17":{},"19":{},"37":{}},"component":{}}],["caveat",{"_index":1461,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cdot",{"_index":292,"title":{},"name":{},"text":{"4":{},"39":{},"40":{}},"component":{}}],["cell",{"_index":769,"title":{},"name":{},"text":{"6":{},"12":{},"37":{},"39":{}},"component":{}}],["certain",{"_index":810,"title":{},"name":{},"text":{"7":{}},"component":{}}],["chain",{"_index":712,"title":{"37":{},"20-12":{},"20-24":{},"30-12":{},"39-8":{}},"name":{"37":{}},"text":{"6":{},"7":{},"12":{},"13":{},"14":{},"19":{},"20":{},"25":{},"29":{},"30":{},"32":{},"34":{},"36":{},"37":{},"39":{},"41":{}},"component":{}}],["chain_id",{"_index":1175,"title":{},"name":{},"text":{"14":{},"30":{},"41":{}},"component":{}}],["chang",{"_index":524,"title":{"19-8":{},"19-12":{},"19-22":{},"19-26":{},"20-2":{},"20-13":{},"20-16":{},"20-25":{}},"name":{},"text":{"4":{},"5":{},"6":{},"12":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"25":{},"27":{},"29":{},"30":{},"37":{},"39":{},"42":{}},"component":{}}],["changelog",{"_index":1483,"title":{"20-19":{}},"name":{},"text":{},"component":{}}],["charg",{"_index":1507,"title":{"39-3":{},"39-13":{}},"name":{},"text":{"20":{},"24":{},"26":{},"27":{},"36":{},"39":{},"41":{}},"component":{}}],["check",{"_index":246,"title":{},"name":{},"text":{"4":{},"5":{},"12":{},"13":{},"16":{},"21":{},"27":{},"39":{},"42":{}},"component":{}}],["child",{"_index":2319,"title":{},"name":{},"text":{"43":{}},"component":{}}],["children",{"_index":2341,"title":{},"name":{},"text":{"43":{}},"component":{}}],["choos",{"_index":95,"title":{"3-3":{}},"name":{},"text":{"9":{},"13":{},"14":{},"15":{},"44":{}},"component":{}}],["chose",{"_index":1277,"title":{},"name":{},"text":{"17":{}},"component":{}}],["chronolog",{"_index":673,"title":{},"name":{},"text":{"6":{}},"component":{}}],["claim",{"_index":1693,"title":{},"name":{},"text":{"21":{}},"component":{}}],["class",{"_index":575,"title":{"33":{},"34":{},"20-8":{},"20-10":{},"20-21":{},"33-1":{},"34-1":{},"34-2":{}},"name":{"33":{}},"text":{"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"16":{},"19":{},"20":{},"21":{},"30":{},"33":{},"34":{},"36":{},"39":{},"43":{},"44":{},"45":{}},"component":{}}],["class/inst",{"_index":1702,"title":{},"name":{},"text":{"21":{}},"component":{}}],["class_hash",{"_index":589,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"17":{},"20":{},"36":{},"43":{}},"component":{}}],["class_hash=class_hash",{"_index":591,"title":{},"name":{},"text":{"5":{},"8":{},"9":{}},"component":{}}],["classes_root",{"_index":1545,"title":{},"name":{},"text":{"20":{}},"component":{}}],["class’",{"_index":1958,"title":{},"name":{},"text":{"34":{}},"component":{}}],["clear",{"_index":2247,"title":{},"name":{},"text":{"41":{},"42":{}},"component":{}}],["cli",{"_index":109,"title":{"6":{}},"name":{"6":{}},"text":{"3":{},"4":{},"6":{},"12":{},"17":{},"21":{},"29":{},"41":{},"44":{}},"component":{}}],["close",{"_index":1761,"title":{},"name":{},"text":{"24":{},"29":{},"39":{}},"component":{}}],["closer",{"_index":1476,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cmake",{"_index":2385,"title":{},"name":{},"text":{"45":{}},"component":{}}],["co",{"_index":1490,"title":{},"name":{},"text":{"20":{}},"component":{}}],["code",{"_index":241,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"12":{},"13":{},"16":{},"17":{},"20":{},"21":{},"25":{},"33":{},"35":{},"37":{},"38":{},"43":{},"44":{},"45":{}},"component":{}}],["collabor",{"_index":1762,"title":{},"name":{},"text":{"24":{}},"component":{}}],["collis",{"_index":2249,"title":{},"name":{},"text":{"41":{},"43":{}},"component":{}}],["combin",{"_index":867,"title":{},"name":{},"text":{"8":{},"21":{},"39":{}},"component":{}}],["command",{"_index":110,"title":{"6":{},"44":{},"44-1":{}},"name":{"44":{}},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"10":{},"12":{},"13":{},"17":{},"21":{},"34":{},"44":{},"45":{}},"component":{}}],["comment",{"_index":1680,"title":{},"name":{},"text":{"21":{}},"component":{}}],["commit",{"_index":749,"title":{"20-7":{},"20-23":{},"43-1":{}},"name":{},"text":{"6":{},"12":{},"20":{},"21":{},"28":{},"43":{}},"component":{}}],["commitment_vers",{"_index":1546,"title":{},"name":{},"text":{"20":{}},"component":{}}],["common",{"_index":403,"title":{},"name":{},"text":{"4":{},"35":{},"36":{}},"component":{}}],["commun",{"_index":1760,"title":{},"name":{},"text":{"24":{},"42":{}},"component":{}}],["compar",{"_index":274,"title":{},"name":{},"text":{"4":{},"12":{},"25":{}},"component":{}}],["compare_array",{"_index":1136,"title":{},"name":{},"text":{"14":{}},"component":{}}],["comparison",{"_index":967,"title":{},"name":{},"text":{"12":{}},"component":{}}],["compat",{"_index":249,"title":{},"name":{},"text":{"4":{},"6":{},"20":{}},"component":{}}],["compil",{"_index":507,"title":{"45":{},"12-3":{},"15-1":{},"17-4":{}},"name":{"45":{}},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"17":{},"20":{},"21":{},"31":{},"34":{},"35":{},"38":{},"44":{},"45":{}},"component":{}}],["compiled_class_hash",{"_index":1533,"title":{},"name":{},"text":{"20":{}},"component":{}}],["complet",{"_index":1193,"title":{},"name":{},"text":{"15":{},"24":{},"25":{},"27":{},"29":{},"36":{},"39":{},"41":{},"42":{}},"component":{}}],["complex",{"_index":1987,"title":{},"name":{},"text":{"35":{},"38":{},"39":{}},"component":{}}],["complic",{"_index":1271,"title":{},"name":{},"text":{"17":{}},"component":{}}],["compon",{"_index":1213,"title":{},"name":{},"text":{"15":{},"20":{},"39":{}},"component":{}}],["compos",{"_index":24,"title":{},"name":{},"text":{"1":{},"11":{},"39":{}},"component":{}}],["compress",{"_index":1623,"title":{},"name":{},"text":{"20":{},"42":{}},"component":{}}],["compris",{"_index":1891,"title":{},"name":{},"text":{"30":{}},"component":{}}],["compromis",{"_index":22,"title":{},"name":{},"text":{"1":{},"4":{},"11":{}},"component":{}}],["comput",{"_index":20,"title":{"34-2":{},"39-4":{}},"name":{},"text":{"1":{},"3":{},"6":{},"9":{},"11":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"26":{},"28":{},"29":{},"30":{},"32":{},"34":{},"35":{},"36":{},"39":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["concept",{"_index":391,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{}}],["concern",{"_index":220,"title":{},"name":{},"text":{"3":{},"12":{},"44":{}},"component":{}}],["conclud",{"_index":1814,"title":{},"name":{},"text":{"26":{}},"component":{}}],["concret",{"_index":260,"title":{},"name":{},"text":{"4":{},"27":{},"39":{}},"component":{}}],["condit",{"_index":1679,"title":{},"name":{},"text":{"21":{}},"component":{}}],["conduct",{"_index":2275,"title":{},"name":{},"text":{"42":{}},"component":{}}],["confid",{"_index":2298,"title":{},"name":{},"text":{"42":{}},"component":{}}],["config",{"_index":1446,"title":{},"name":{},"text":{"19":{}},"component":{}}],["configur",{"_index":1360,"title":{"19-18":{},"19-21":{}},"name":{},"text":{"19":{}},"component":{}}],["confirm",{"_index":1102,"title":{},"name":{},"text":{"13":{},"19":{},"25":{},"41":{},"42":{}},"component":{}}],["consecut",{"_index":1134,"title":{},"name":{},"text":{"14":{},"21":{}},"component":{}}],["consequ",{"_index":2038,"title":{},"name":{},"text":{"37":{},"39":{},"43":{}},"component":{}}],["consid",{"_index":889,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"13":{},"15":{},"20":{},"24":{},"27":{},"36":{}},"component":{}}],["consist",{"_index":713,"title":{},"name":{},"text":{"6":{},"12":{},"35":{},"40":{},"41":{},"43":{},"45":{}},"component":{}}],["const",{"_index":1044,"title":{},"name":{},"text":{"13":{}},"component":{}}],["constant",{"_index":288,"title":{},"name":{},"text":{"4":{},"13":{},"15":{},"30":{},"32":{},"39":{},"40":{},"41":{}},"component":{}}],["constraint",{"_index":317,"title":{},"name":{},"text":{"4":{},"17":{}},"component":{}}],["construct",{"_index":1549,"title":{},"name":{},"text":{"20":{},"29":{},"42":{},"43":{}},"component":{}}],["constructor",{"_index":761,"title":{"7":{}},"name":{"7":{}},"text":{"6":{},"7":{},"8":{},"9":{},"30":{},"31":{},"32":{},"34":{},"36":{},"43":{},"44":{}},"component":{}}],["constructor_calldata",{"_index":737,"title":{},"name":{},"text":{"6":{},"9":{},"32":{},"36":{}},"component":{}}],["constructor_calldata=cast",{"_index":905,"title":{},"name":{},"text":{"9":{}},"component":{}}],["constructor_calldata_s",{"_index":875,"title":{},"name":{},"text":{"9":{},"36":{}},"component":{}}],["constructor_calldata_size=1",{"_index":904,"title":{},"name":{},"text":{"9":{}},"component":{}}],["constructor_input",{"_index":2362,"title":{},"name":{},"text":{"44":{}},"component":{}}],["constructor’",{"_index":882,"title":{},"name":{},"text":{"9":{},"36":{}},"component":{}}],["consum",{"_index":646,"title":{},"name":{},"text":{"6":{},"8":{},"13":{},"29":{},"36":{},"41":{}},"component":{}}],["consumemessagefroml2",{"_index":1026,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["consumpt",{"_index":2251,"title":{},"name":{},"text":{"41":{}},"component":{}}],["contact_address",{"_index":2368,"title":{},"name":{},"text":{"44":{}},"component":{}}],["contain",{"_index":556,"title":{},"name":{},"text":{"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"29":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["content",{"_index":1570,"title":{},"name":{},"text":{"20":{},"36":{}},"component":{}}],["context",{"_index":577,"title":{},"name":{},"text":{"5":{},"44":{}},"component":{}}],["continu",{"_index":1437,"title":{},"name":{},"text":{"19":{},"20":{},"35":{}},"component":{}}],["contract",{"_index":35,"title":{"5":{},"9":{},"12":{},"13":{},"31":{},"32":{},"33":{},"35":{},"9-2":{},"12-1":{},"12-3":{},"12-5":{},"12-6":{},"12-7":{},"13-8":{},"15-2":{},"17-5":{},"39-11":{}},"name":{"31":{},"32":{},"33":{},"34":{},"35":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"27":{},"30":{},"31":{},"32":{},"33":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["contract.cairo",{"_index":990,"title":{},"name":{},"text":{"12":{},"16":{},"31":{},"45":{}},"component":{}}],["contract.get_bal",{"_index":1263,"title":{},"name":{},"text":{"16":{}},"component":{}}],["contract.increase_bal",{"_index":1259,"title":{},"name":{},"text":{"16":{}},"component":{}}],["contract_abi",{"_index":2352,"title":{},"name":{},"text":{"44":{}},"component":{}}],["contract_abi.json",{"_index":699,"title":{},"name":{},"text":{"6":{},"12":{},"14":{},"31":{},"45":{}},"component":{}}],["contract_address",{"_index":548,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"30":{},"32":{},"36":{},"37":{},"39":{},"41":{},"44":{}},"component":{}}],["contract_address=contract_address",{"_index":549,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["contract_address_salt",{"_index":740,"title":{},"name":{},"text":{"6":{},"9":{},"36":{}},"component":{}}],["contract_address_salt=current_salt",{"_index":903,"title":{},"name":{},"text":{"9":{}},"component":{}}],["contract_address}:user_auth_compiled.json",{"_index":1325,"title":{},"name":{},"text":{"17":{}},"component":{}}],["contract_class",{"_index":1532,"title":{},"name":{},"text":{"20":{},"30":{},"44":{}},"component":{}}],["contract_cod",{"_index":1949,"title":{},"name":{},"text":{"32":{}},"component":{}}],["contract_compiled.json",{"_index":991,"title":{},"name":{},"text":{"12":{},"31":{},"45":{}},"component":{}}],["contract_definit",{"_index":2361,"title":{},"name":{},"text":{"44":{}},"component":{}}],["contract_fil",{"_index":1244,"title":{},"name":{},"text":{"16":{}},"component":{}}],["contract_hash",{"_index":1946,"title":{},"name":{},"text":{"32":{},"37":{}},"component":{}}],["contract_hash.pi",{"_index":1962,"title":{},"name":{},"text":{"34":{}},"component":{}}],["contract_interfac",{"_index":537,"title":{},"name":{},"text":{"5":{}},"component":{}}],["contract_test.pi",{"_index":1241,"title":{},"name":{},"text":{"16":{}},"component":{}}],["contractaddress",{"_index":2268,"title":{},"name":{},"text":{"41":{}},"component":{}}],["contractclass",{"_index":1706,"title":{},"name":{},"text":{"21":{},"30":{}},"component":{}}],["contractdefinit",{"_index":1705,"title":{},"name":{},"text":{"21":{}},"component":{}}],["contract’",{"_index":258,"title":{"5-1":{},"12-4":{},"17-3":{}},"name":{},"text":{"4":{},"5":{},"6":{},"12":{},"19":{},"20":{},"31":{},"35":{},"36":{},"37":{},"38":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["contrast",{"_index":2033,"title":{},"name":{},"text":{"36":{}},"component":{}}],["contribut",{"_index":1388,"title":{},"name":{},"text":{"19":{}},"component":{}}],["contributor",{"_index":1355,"title":{"19-4":{},"19-9":{}},"name":{},"text":{},"component":{}}],["control",{"_index":138,"title":{},"name":{},"text":{"3":{},"25":{},"27":{}},"component":{}}],["conveni",{"_index":1402,"title":{},"name":{},"text":{"19":{}},"component":{}}],["convers",{"_index":1510,"title":{},"name":{},"text":{"20":{}},"component":{}}],["convert",{"_index":1674,"title":{},"name":{},"text":{"21":{}},"component":{}}],["coordin",{"_index":2220,"title":{},"name":{},"text":{"40":{}},"component":{}}],["copi",{"_index":536,"title":{},"name":{},"text":{"5":{},"12":{},"16":{},"45":{}},"component":{}}],["core",{"_index":1025,"title":{},"name":{},"text":{"13":{},"14":{},"23":{},"24":{},"36":{},"41":{},"42":{}},"component":{}}],["correct",{"_index":1421,"title":{},"name":{},"text":{"19":{},"39":{}},"component":{}}],["correctli",{"_index":1090,"title":{},"name":{},"text":{"13":{},"19":{}},"component":{}}],["correl",{"_index":2116,"title":{},"name":{},"text":{"39":{}},"component":{}}],["correspond",{"_index":599,"title":{},"name":{},"text":{"5":{},"6":{},"13":{},"15":{},"20":{},"28":{},"33":{},"39":{},"41":{},"42":{}},"component":{}}],["correspondingli",{"_index":2086,"title":{},"name":{},"text":{"38":{},"43":{}},"component":{}}],["cost",{"_index":1105,"title":{},"name":{},"text":{"13":{},"20":{},"21":{},"39":{},"41":{}},"component":{}}],["count",{"_index":2235,"title":{},"name":{},"text":{"41":{}},"component":{}}],["counter",{"_index":2233,"title":{},"name":{},"text":{"41":{}},"component":{}}],["counterpart",{"_index":1020,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cours",{"_index":1218,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{}}],["cover",{"_index":383,"title":{},"name":{},"text":{"4":{},"20":{},"21":{},"39":{}},"component":{}}],["cpu",{"_index":1520,"title":{},"name":{},"text":{"20":{},"36":{}},"component":{}}],["creat",{"_index":98,"title":{"3-4":{}},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"12":{},"16":{},"17":{},"20":{},"21":{},"28":{},"29":{},"35":{},"41":{}},"component":{}}],["creation",{"_index":1183,"title":{},"name":{},"text":{"14":{},"21":{}},"component":{}}],["cross",{"_index":2133,"title":{},"name":{},"text":{"39":{}},"component":{}}],["cryptograph",{"_index":31,"title":{},"name":{},"text":{"1":{}},"component":{}}],["cumul",{"_index":1967,"title":{},"name":{},"text":{"34":{}},"component":{}}],["curli",{"_index":396,"title":{},"name":{},"text":{"4":{}},"component":{}}],["current",{"_index":522,"title":{"18":{},"5-1":{}},"name":{},"text":{"4":{},"5":{},"10":{},"11":{},"12":{},"13":{},"14":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{},"27":{},"30":{},"32":{},"34":{},"35":{},"36":{},"37":{},"43":{}},"component":{}}],["current_bal",{"_index":363,"title":{},"name":{},"text":{"4":{},"10":{}},"component":{}}],["current_balance=r",{"_index":925,"title":{},"name":{},"text":{"10":{}},"component":{}}],["current_salt",{"_index":900,"title":{},"name":{},"text":{"9":{}},"component":{}}],["curv",{"_index":286,"title":{"40-4":{}},"name":{},"text":{"4":{},"15":{},"21":{},"30":{},"40":{}},"component":{}}],["custodi",{"_index":2253,"title":{},"name":{},"text":{"41":{}},"component":{}}],["custom",{"_index":1430,"title":{"25-3":{},"44-3":{}},"name":{},"text":{"19":{},"25":{},"38":{},"44":{}},"component":{}}],["custom.sqlit",{"_index":1444,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cycl",{"_index":1872,"title":{},"name":{"29":{}},"text":{},"component":{}}],["dai",{"_index":2291,"title":{},"name":{},"text":{"42":{}},"component":{}}],["danger",{"_index":872,"title":{},"name":{},"text":{"8":{}},"component":{}}],["dapp",{"_index":16,"title":{},"name":{},"text":{"1":{},"11":{}},"component":{}}],["dapps’",{"_index":2252,"title":{},"name":{},"text":{"41":{}},"component":{}}],["data",{"_index":637,"title":{"37":{},"20-12":{},"20-24":{},"39-8":{}},"name":{"37":{}},"text":{"6":{},"7":{},"9":{},"10":{},"13":{},"20":{},"28":{},"29":{},"31":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{}},"component":{}}],["data[0",{"_index":2010,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["data[1",{"_index":2011,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["data[2",{"_index":2012,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["data_len",{"_index":2006,"title":{},"name":{},"text":{"36":{}},"component":{}}],["databas",{"_index":1443,"title":{},"name":{},"text":{"19":{}},"component":{}}],["date",{"_index":1008,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["day",{"_index":2260,"title":{},"name":{},"text":{"41":{}},"component":{}}],["db",{"_index":1541,"title":{},"name":{},"text":{"20":{}},"component":{}}],["deal",{"_index":2072,"title":{},"name":{},"text":{"38":{},"43":{}},"component":{}}],["debug",{"_index":1322,"title":{},"name":{},"text":{"17":{},"44":{},"45":{}},"component":{}}],["debug_info_with_sourc",{"_index":2374,"title":{"45-18":{}},"name":{},"text":{"45":{}},"component":{}}],["dec",{"_index":1629,"title":{"21-3":{}},"name":{},"text":{},"component":{}}],["decentr",{"_index":4,"title":{},"name":{},"text":{"1":{},"11":{},"29":{}},"component":{}}],["decid",{"_index":1021,"title":{},"name":{},"text":{"13":{},"19":{},"29":{},"39":{}},"component":{}}],["decim",{"_index":1743,"title":{},"name":{},"text":{"23":{}},"component":{}}],["declar",{"_index":87,"title":{"12-5":{},"20-3":{},"30-8":{},"30-9":{},"30-10":{},"44-5":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"30":{},"33":{},"34":{},"35":{},"36":{},"41":{},"43":{},"44":{}},"component":{}}],["declared_class",{"_index":1595,"title":{},"name":{},"text":{"20":{}},"component":{}}],["declared_contract",{"_index":776,"title":{},"name":{},"text":{"6":{}},"component":{}}],["decod",{"_index":2043,"title":{},"name":{},"text":{"37":{},"41":{}},"component":{}}],["decor",{"_index":812,"title":{},"name":{},"text":{"7":{},"8":{},"12":{},"16":{},"17":{},"35":{},"38":{},"41":{}},"component":{}}],["decreas",{"_index":1040,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["dedic",{"_index":326,"title":{},"name":{},"text":{"4":{},"25":{},"42":{}},"component":{}}],["deduc",{"_index":2314,"title":{},"name":{},"text":{"43":{}},"component":{}}],["deep",{"_index":2092,"title":{},"name":{},"text":{"39":{}},"component":{}}],["def",{"_index":1252,"title":{},"name":{},"text":{"16":{}},"component":{}}],["default",{"_index":199,"title":{"8":{},"19-26":{}},"name":{},"text":{"3":{},"17":{},"21":{},"45":{}},"component":{}}],["default_entrypoint",{"_index":834,"title":{},"name":{"8":{}},"text":{},"component":{}}],["defi",{"_index":1568,"title":{},"name":{},"text":{"20":{}},"component":{}}],["defin",{"_index":133,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"20":{},"23":{},"28":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"43":{},"45":{}},"component":{}}],["definit",{"_index":544,"title":{"34-1":{},"40-5":{}},"name":{},"text":{"5":{},"20":{},"33":{},"34":{},"38":{},"43":{}},"component":{}}],["delay",{"_index":1475,"title":{},"name":{},"text":{"19":{},"41":{}},"component":{}}],["deleg",{"_index":583,"title":{},"name":{},"text":{"5":{},"8":{},"33":{},"36":{}},"component":{}}],["delegate_cal",{"_index":1704,"title":{},"name":{},"text":{"21":{}},"component":{}}],["delegate_proxy.cairo",{"_index":859,"title":{},"name":{},"text":{"8":{}},"component":{}}],["delegate_proxy_class_hash",{"_index":860,"title":{},"name":{},"text":{"8":{}},"component":{}}],["delimit",{"_index":2354,"title":{},"name":{},"text":{"44":{}},"component":{}}],["deliv",{"_index":1646,"title":{},"name":{},"text":{"21":{}},"component":{}}],["demo",{"_index":257,"title":{},"name":{},"text":{"4":{}},"component":{}}],["demonstr",{"_index":501,"title":{},"name":{},"text":{"4":{},"16":{},"17":{},"41":{}},"component":{}}],["denial",{"_index":1816,"title":{},"name":{},"text":{"27":{}},"component":{}}],["denomin",{"_index":2100,"title":{},"name":{},"text":{"39":{}},"component":{}}],["denot",{"_index":510,"title":{},"name":{},"text":{"4":{},"5":{},"8":{},"9":{},"34":{},"39":{},"40":{},"43":{},"44":{}},"component":{}}],["depend",{"_index":521,"title":{},"name":{},"text":{"4":{},"12":{},"20":{},"21":{},"36":{},"39":{}},"component":{}}],["deploy",{"_index":40,"title":{"9":{},"3-6":{},"9-1":{},"12-6":{},"15-1":{},"17-4":{},"20-6":{},"30-2":{},"36-2":{},"39-11":{},"44-6":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"17":{},"20":{},"21":{},"30":{},"32":{},"33":{},"36":{},"37":{},"39":{},"43":{},"44":{}},"component":{}}],["deploy_account",{"_index":162,"title":{"44-7":{}},"name":{},"text":{"3":{},"6":{},"21":{},"44":{}},"component":{}}],["deploy_contract",{"_index":1697,"title":{},"name":{},"text":{"21":{}},"component":{}}],["deploy_from_zero",{"_index":876,"title":{},"name":{},"text":{"9":{},"21":{}},"component":{}}],["deploy_from_zero=fals",{"_index":906,"title":{},"name":{},"text":{"9":{}},"component":{}}],["deploy_ownable_contract",{"_index":895,"title":{},"name":{},"text":{"9":{}},"component":{}}],["deployaccount",{"_index":1659,"title":{},"name":{},"text":{"21":{}},"component":{}}],["deployed_contract",{"_index":777,"title":{},"name":{},"text":{"6":{}},"component":{}}],["deployer’",{"_index":885,"title":{},"name":{},"text":{"9":{}},"component":{}}],["deploying_from_contract",{"_index":873,"title":{},"name":{"9":{}},"text":{},"component":{}}],["deploy{syscall_ptr",{"_index":874,"title":{},"name":{},"text":{"9":{},"36":{}},"component":{}}],["deposit",{"_index":1030,"title":{"42-2":{},"42-3":{},"42-4":{}},"name":{},"text":{"13":{},"36":{},"38":{},"42":{}},"component":{}}],["deprec",{"_index":47,"title":{"2":{},"2-1":{},"19-18":{}},"name":{},"text":{"2":{},"19":{},"21":{},"30":{},"44":{}},"component":{}}],["deriv",{"_index":936,"title":{},"name":{},"text":{"10":{},"25":{},"39":{}},"component":{}}],["describ",{"_index":251,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"13":{},"21":{},"30":{},"31":{},"37":{},"41":{},"44":{}},"component":{}}],["descript",{"_index":54,"title":{"45-3":{}},"name":{},"text":{"2":{},"4":{},"28":{},"30":{},"36":{}},"component":{}}],["design",{"_index":808,"title":{},"name":{},"text":{"7":{},"13":{},"21":{},"24":{},"25":{},"27":{}},"component":{}}],["desir",{"_index":910,"title":{},"name":{},"text":{"9":{},"39":{},"43":{},"44":{}},"component":{}}],["destin",{"_index":1024,"title":{},"name":{},"text":{"13":{},"39":{}},"component":{}}],["detail",{"_index":82,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"9":{},"15":{},"17":{},"19":{},"20":{},"21":{},"26":{},"29":{},"30":{},"34":{},"36":{}},"component":{}}],["determin",{"_index":879,"title":{},"name":{},"text":{"9":{},"13":{},"20":{},"24":{},"25":{},"27":{},"35":{},"39":{},"43":{}},"component":{}}],["develop",{"_index":313,"title":{},"name":{},"text":{"4":{},"13":{},"24":{},"30":{},"42":{}},"component":{}}],["deviat",{"_index":1473,"title":{},"name":{},"text":{"19":{}},"component":{}}],["diagram",{"_index":2236,"title":{},"name":{},"text":{"41":{}},"component":{}}],["dictat",{"_index":1777,"title":{},"name":{},"text":{"25":{}},"component":{}}],["dictionari",{"_index":1621,"title":{},"name":{},"text":{"20":{}},"component":{}}],["diff",{"_index":1661,"title":{},"name":{},"text":{"21":{},"37":{}},"component":{}}],["differ",{"_index":146,"title":{},"name":{},"text":{"3":{},"5":{},"9":{},"12":{},"14":{},"19":{},"20":{},"25":{},"27":{},"30":{},"36":{},"37":{},"39":{},"41":{}},"component":{}}],["digest",{"_index":2306,"title":{},"name":{},"text":{"43":{}},"component":{}}],["direct",{"_index":202,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"36":{},"44":{}},"component":{}}],["directli",{"_index":172,"title":{},"name":{},"text":{"3":{},"5":{},"15":{},"17":{},"21":{},"33":{},"36":{},"39":{},"44":{}},"component":{}}],["directori",{"_index":217,"title":{},"name":{},"text":{"3":{},"44":{},"45":{}},"component":{}}],["disabl",{"_index":1710,"title":{},"name":{},"text":{"21":{},"45":{}},"component":{}}],["disable_hint_valid",{"_index":2369,"title":{"45-9":{}},"name":{},"text":{"45":{}},"component":{}}],["discov",{"_index":1827,"title":{},"name":{},"text":{"27":{}},"component":{}}],["discuss",{"_index":1794,"title":{},"name":{},"text":{"25":{},"35":{},"38":{},"39":{},"43":{}},"component":{}}],["display",{"_index":1097,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["distinct",{"_index":130,"title":{},"name":{},"text":{"3":{},"21":{},"24":{}},"component":{}}],["distinguish",{"_index":124,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"33":{}},"component":{}}],["dive",{"_index":254,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["divid",{"_index":495,"title":{},"name":{},"text":{"4":{}},"component":{}}],["divis",{"_index":466,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["do",{"_index":1059,"title":{},"name":{},"text":{"13":{},"20":{},"27":{},"41":{}},"component":{}}],["do_swap",{"_index":434,"title":{},"name":{},"text":{"4":{}},"component":{}}],["doc",{"_index":269,"title":{},"name":{},"text":{"4":{},"32":{}},"component":{}}],["document",{"_index":46,"title":{"20-19":{}},"name":{},"text":{"19":{},"20":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{}}}],["doesn’t",{"_index":129,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"20":{},"41":{},"42":{}},"component":{}}],["domain",{"_index":2187,"title":{"40-1":{}},"name":{},"text":{},"component":{}}],["domin",{"_index":1572,"title":{},"name":{},"text":{"20":{}},"component":{}}],["done",{"_index":515,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"13":{},"17":{},"20":{},"27":{},"41":{},"43":{},"44":{}},"component":{}}],["dont_filter_identifi",{"_index":1711,"title":{"45-11":{}},"name":{},"text":{"21":{},"45":{}},"component":{}}],["don’t",{"_index":468,"title":{},"name":{},"text":{"4":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"45":{}},"component":{}}],["drawback",{"_index":1775,"title":{},"name":{},"text":{"25":{}},"component":{}}],["dri",{"_index":1010,"title":{},"name":{},"text":{"12":{}},"component":{}}],["dry_run",{"_index":1698,"title":{},"name":{},"text":{"21":{}},"component":{}}],["due",{"_index":974,"title":{},"name":{},"text":{"12":{},"20":{},"25":{},"27":{},"41":{}},"component":{}}],["dure",{"_index":815,"title":{},"name":{},"text":{"7":{},"10":{},"12":{},"27":{},"29":{},"41":{},"42":{},"45":{}},"component":{}}],["dynam",{"_index":1879,"title":{},"name":{},"text":{"29":{}},"component":{}}],["e",{"_index":2074,"title":{},"name":{},"text":{"38":{}},"component":{}}],["e.emit",{"_index":2075,"title":{},"name":{},"text":{"38":{}},"component":{}}],["e.g",{"_index":303,"title":{},"name":{},"text":{"4":{},"14":{},"20":{},"21":{},"25":{},"35":{},"39":{},"42":{}},"component":{}}],["each",{"_index":334,"title":{},"name":{},"text":{"4":{},"6":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"23":{},"30":{},"33":{},"35":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{}},"component":{}}],["earlier",{"_index":459,"title":{},"name":{},"text":{"4":{},"5":{}},"component":{}}],["eas",{"_index":2296,"title":{},"name":{},"text":{"42":{}},"component":{}}],["easili",{"_index":601,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ec",{"_index":1712,"title":{},"name":{},"text":{"21":{}},"component":{}}],["ec_op",{"_index":2143,"title":{},"name":{},"text":{"39":{}},"component":{}}],["ec_op_builtin",{"_index":1884,"title":{},"name":{},"text":{"29":{}},"component":{}}],["ecdsa",{"_index":1187,"title":{},"name":{},"text":{"15":{},"30":{},"39":{}},"component":{}}],["ecdsa_builtin",{"_index":693,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["ecdsa_ptr",{"_index":1199,"title":{},"name":{},"text":{"15":{}},"component":{}}],["ecosystem",{"_index":1524,"title":{},"name":{},"text":{"20":{}},"component":{}}],["edg",{"_index":2264,"title":{},"name":{},"text":{"41":{}},"component":{}}],["effeci",{"_index":1612,"title":{},"name":{},"text":{"20":{}},"component":{}}],["effect",{"_index":526,"title":{},"name":{},"text":{"4":{},"13":{},"20":{}},"component":{}}],["effici",{"_index":982,"title":{},"name":{},"text":{"12":{},"30":{}},"component":{}}],["eip",{"_index":1756,"title":{},"name":{},"text":{"24":{},"25":{}},"component":{}}],["element",{"_index":790,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"23":{},"28":{},"30":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{}},"component":{}}],["elig",{"_index":1828,"title":{},"name":{},"text":{"27":{}},"component":{}}],["ell",{"_index":2170,"title":{},"name":{},"text":{"39":{}},"component":{}}],["ell_l",{"_index":2327,"title":{},"name":{},"text":{"43":{}},"component":{}}],["ell_r",{"_index":2330,"title":{},"name":{},"text":{"43":{}},"component":{}}],["ellig",{"_index":1539,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ellipt",{"_index":1189,"title":{},"name":{},"text":{"15":{},"40":{}},"component":{}}],["elment",{"_index":2080,"title":{},"name":{},"text":{"38":{}},"component":{}}],["embed",{"_index":1468,"title":{},"name":{},"text":{"19":{}},"component":{}}],["emit",{"_index":678,"title":{"38-1":{}},"name":{},"text":{"6":{},"9":{},"10":{},"19":{},"29":{},"36":{},"38":{},"41":{},"42":{}},"component":{}}],["emit_ev",{"_index":1992,"title":{"36-3":{}},"name":{},"text":{"36":{},"38":{}},"component":{}}],["emit_event{syscall_ptr",{"_index":2004,"title":{},"name":{},"text":{"36":{}},"component":{}}],["emphas",{"_index":1440,"title":{},"name":{},"text":{"19":{}},"component":{}}],["empti",{"_index":1617,"title":{},"name":{},"text":{"20":{},"43":{},"44":{}},"component":{}}],["enabl",{"_index":15,"title":{},"name":{},"text":{"1":{},"22":{},"30":{},"36":{},"44":{}},"component":{}}],["encod",{"_index":1582,"title":{},"name":{},"text":{"20":{},"30":{},"32":{},"34":{},"35":{},"37":{},"38":{},"41":{},"43":{}},"component":{}}],["encount",{"_index":1608,"title":{},"name":{},"text":{"20":{}},"component":{}}],["encrypt",{"_index":2367,"title":{},"name":{},"text":{"44":{}},"component":{}}],["end",{"_index":1068,"title":{},"name":{},"text":{"13":{},"16":{},"20":{},"21":{},"35":{},"38":{},"42":{}},"component":{}}],["endian",{"_index":1717,"title":{},"name":{},"text":{"21":{},"41":{}},"component":{}}],["endpoint",{"_index":1401,"title":{"44-3":{}},"name":{},"text":{"19":{},"20":{},"21":{},"44":{}},"component":{}}],["end{align",{"_index":1866,"title":{},"name":{},"text":{"28":{},"30":{},"41":{}},"component":{}}],["end{cas",{"_index":2324,"title":{},"name":{},"text":{"43":{}},"component":{}}],["enforc",{"_index":76,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"14":{},"20":{},"21":{},"27":{},"39":{}},"component":{}}],["enhanc",{"_index":62,"title":{},"name":{},"text":{"2":{}},"component":{}}],["enjoy",{"_index":318,"title":{},"name":{},"text":{"4":{}},"component":{}}],["enough",{"_index":167,"title":{},"name":{},"text":{"3":{},"4":{},"9":{},"21":{},"41":{},"42":{}},"component":{}}],["enrich",{"_index":1797,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ensur",{"_index":1538,"title":{},"name":{},"text":{"20":{},"24":{},"27":{}},"component":{}}],["enter",{"_index":506,"title":{},"name":{},"text":{"4":{},"12":{},"29":{},"44":{},"45":{}},"component":{}}],["entir",{"_index":719,"title":{},"name":{},"text":{"6":{},"14":{},"15":{}},"component":{}}],["entiti",{"_index":977,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{}}],["entri",{"_index":833,"title":{"8":{}},"name":{},"text":{"8":{},"14":{},"17":{},"21":{},"30":{},"33":{},"34":{},"39":{},"43":{}},"component":{}}],["entry_point_selector",{"_index":1907,"title":{},"name":{},"text":{"30":{},"41":{}},"component":{}}],["entry_point_typ",{"_index":686,"title":{},"name":{},"text":{"6":{},"21":{}},"component":{}}],["entrypoint",{"_index":1961,"title":{},"name":{},"text":{"34":{}},"component":{}}],["enumer",{"_index":2141,"title":{},"name":{},"text":{"39":{}},"component":{}}],["environ",{"_index":107,"title":{"21-1":{},"44-2":{}},"name":{},"text":{"3":{},"4":{},"9":{},"12":{},"13":{},"17":{},"19":{},"44":{},"45":{}},"component":{}}],["eoa",{"_index":128,"title":{},"name":{},"text":{"3":{},"24":{},"25":{},"43":{}},"component":{}}],["epoch",{"_index":1178,"title":{},"name":{},"text":{"14":{}},"component":{}}],["equal",{"_index":408,"title":{},"name":{},"text":{"4":{},"9":{},"20":{},"36":{},"39":{}},"component":{}}],["equival",{"_index":1201,"title":{},"name":{},"text":{"15":{}},"component":{}}],["erc",{"_index":339,"title":{},"name":{},"text":{"4":{},"23":{},"39":{},"42":{}},"component":{}}],["erc20",{"_index":305,"title":{},"name":{},"text":{"4":{},"25":{},"42":{}},"component":{}}],["error",{"_index":952,"title":{},"name":{},"text":{"12":{},"17":{},"44":{}},"component":{}}],["error_messag",{"_index":1275,"title":{},"name":{},"text":{"17":{},"44":{}},"component":{}}],["essenti",{"_index":460,"title":{},"name":{},"text":{"4":{}},"component":{}}],["estim",{"_index":180,"title":{"6-4":{},"13-9":{}},"name":{},"text":{"3":{},"6":{},"13":{},"17":{},"19":{},"20":{},"21":{},"39":{},"41":{},"44":{}},"component":{}}],["estimate_fe",{"_index":191,"title":{"44-8":{}},"name":{},"text":{"3":{},"6":{},"13":{},"20":{},"44":{}},"component":{}}],["estimate_fee_bulk",{"_index":1656,"title":{},"name":{},"text":{"21":{}},"component":{}}],["estimate_message_fe",{"_index":1106,"title":{"44-9":{}},"name":{},"text":{"13":{},"44":{}},"component":{}}],["etc",{"_index":1525,"title":{},"name":{},"text":{"20":{},"41":{},"44":{}},"component":{}}],["eth",{"_index":102,"title":{"3-5":{}},"name":{},"text":{"3":{},"6":{},"13":{},"20":{},"26":{},"39":{},"41":{},"42":{}},"component":{}}],["eth_address_bound",{"_index":2229,"title":{},"name":{},"text":{"41":{}},"component":{}}],["ethereum",{"_index":14,"title":{"25-1":{},"37-4":{}},"name":{},"text":{"1":{},"3":{},"11":{},"12":{},"13":{},"19":{},"24":{},"25":{},"27":{},"29":{},"36":{},"37":{},"41":{},"42":{},"43":{}},"component":{}}],["ethereumaddress",{"_index":2239,"title":{},"name":{},"text":{"41":{}},"component":{}}],["ethereum’",{"_index":23,"title":{},"name":{},"text":{"1":{},"5":{},"11":{},"24":{},"33":{},"36":{}},"component":{}}],["ethereum↔starknet",{"_index":2272,"title":{},"name":{},"text":{"42":{}},"component":{}}],["etherscan",{"_index":1099,"title":{},"name":{},"text":{"13":{}},"component":{}}],["even",{"_index":1270,"title":{},"name":{},"text":{"17":{},"20":{},"25":{},"27":{},"42":{}},"component":{}}],["event",{"_index":649,"title":{"10":{},"38":{},"38-1":{},"38-2":{},"38-3":{}},"name":{"10":{},"38":{}},"text":{"6":{},"9":{},"10":{},"19":{},"28":{},"29":{},"31":{},"36":{},"38":{},"41":{},"42":{}},"component":{}}],["event_commit",{"_index":1853,"title":{},"name":{},"text":{"28":{},"38":{}},"component":{}}],["event_count",{"_index":1852,"title":{},"name":{},"text":{"28":{}},"component":{}}],["event_nam",{"_index":2078,"title":{},"name":{},"text":{"38":{}},"component":{}}],["events.cairo",{"_index":926,"title":{},"name":{},"text":{"10":{}},"component":{}}],["events_abi.json",{"_index":928,"title":{},"name":{},"text":{"10":{}},"component":{}}],["events_class_hash",{"_index":929,"title":{},"name":{},"text":{"10":{}},"component":{}}],["events_compiled.json",{"_index":927,"title":{},"name":{},"text":{"10":{}},"component":{}}],["eventu",{"_index":2188,"title":{},"name":{},"text":{"40":{}},"component":{}}],["event’",{"_index":935,"title":{},"name":{},"text":{"10":{},"36":{},"38":{}},"component":{}}],["everyon",{"_index":1579,"title":{},"name":{},"text":{"20":{}},"component":{}}],["everyth",{"_index":1953,"title":{},"name":{},"text":{"33":{}},"component":{}}],["exact",{"_index":520,"title":{},"name":{},"text":{"4":{},"34":{},"39":{}},"component":{}}],["exactli",{"_index":280,"title":{},"name":{},"text":{"4":{},"44":{}},"component":{}}],["examin",{"_index":720,"title":{},"name":{},"text":{"6":{},"12":{}},"component":{}}],["exampl",{"_index":211,"title":{"4-5":{},"13-4":{},"25-3":{},"37-3":{},"45-2":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"20":{},"21":{},"25":{},"27":{},"29":{},"31":{},"35":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["exce",{"_index":380,"title":{},"name":{},"text":{"4":{}},"component":{}}],["except",{"_index":704,"title":{},"name":{},"text":{"6":{},"7":{},"8":{},"17":{},"38":{}},"component":{}}],["exchang",{"_index":518,"title":{},"name":{},"text":{"4":{},"41":{}},"component":{}}],["exclud",{"_index":1964,"title":{},"name":{},"text":{"34":{}},"component":{}}],["execut",{"_index":166,"title":{"27":{},"27-4":{}},"name":{},"text":{"3":{},"4":{},"6":{},"8":{},"10":{},"12":{},"16":{},"17":{},"20":{},"21":{},"24":{},"26":{},"27":{},"28":{},"29":{},"30":{},"36":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["execution_info",{"_index":1262,"title":{},"name":{},"text":{"16":{}},"component":{}}],["execution_info.result",{"_index":1264,"title":{},"name":{},"text":{"16":{}},"component":{}}],["execution_resourc",{"_index":650,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["exercis",{"_index":276,"title":{},"name":{},"text":{"4":{}},"component":{}}],["exist",{"_index":179,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"19":{},"20":{},"30":{}},"component":{}}],["exit",{"_index":2378,"title":{},"name":{},"text":{"45":{}},"component":{}}],["exot",{"_index":1824,"title":{},"name":{},"text":{"27":{}},"component":{}}],["expans",{"_index":2311,"title":{},"name":{},"text":{"43":{}},"component":{}}],["expect",{"_index":863,"title":{"20-1":{}},"name":{},"text":{"8":{},"9":{},"12":{},"16":{},"19":{},"20":{},"21":{},"36":{},"44":{}},"component":{}}],["experi",{"_index":1802,"title":{},"name":{},"text":{"25":{}},"component":{}}],["experiment",{"_index":997,"title":{},"name":{},"text":{"12":{}},"component":{}}],["explain",{"_index":335,"title":{},"name":{},"text":{"4":{},"8":{},"9":{},"15":{},"35":{},"39":{}},"component":{}}],["explan",{"_index":2104,"title":{},"name":{},"text":{"39":{}},"component":{}}],["explicit",{"_index":2280,"title":{},"name":{},"text":{"42":{}},"component":{}}],["explicitli",{"_index":954,"title":{},"name":{},"text":{"12":{},"13":{},"21":{},"36":{},"44":{}},"component":{}}],["explor",{"_index":500,"title":{"22":{}},"name":{},"text":{"4":{},"22":{}},"component":{}}],["export",{"_index":122,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"44":{}},"component":{}}],["expos",{"_index":1829,"title":{},"name":{},"text":{"27":{},"36":{}},"component":{}}],["express",{"_index":1652,"title":{},"name":{},"text":{"21":{}},"component":{}}],["extend",{"_index":1770,"title":{},"name":{},"text":{"24":{}},"component":{}}],["extend_rang",{"_index":1121,"title":{},"name":{},"text":{"14":{},"31":{}},"component":{}}],["extens",{"_index":1431,"title":{},"name":{},"text":{"19":{}},"component":{}}],["extern",{"_index":126,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"21":{},"25":{},"27":{},"34":{}},"component":{}}],["extra",{"_index":1855,"title":{},"name":{},"text":{"28":{}},"component":{}}],["extract",{"_index":2036,"title":{"37-4":{}},"name":{},"text":{"37":{}},"component":{}}],["extran",{"_index":1856,"title":{},"name":{},"text":{"28":{}},"component":{}}],["f",{"_index":2171,"title":{},"name":{},"text":{"39":{}},"component":{}}],["f'balanc",{"_index":796,"title":{},"name":{},"text":{"6":{}},"component":{}}],["f'public",{"_index":1230,"title":{},"name":{},"text":{"15":{}},"component":{}}],["f'signatur",{"_index":1231,"title":{},"name":{},"text":{"15":{}},"component":{}}],["f'storag",{"_index":1286,"title":{},"name":{},"text":{"17":{}},"component":{}}],["face",{"_index":1830,"title":{},"name":{},"text":{"27":{}},"component":{}}],["facial",{"_index":1803,"title":{},"name":{},"text":{"25":{}},"component":{}}],["facilit",{"_index":2274,"title":{},"name":{},"text":{"42":{}},"component":{}}],["fact",{"_index":975,"title":{},"name":{},"text":{"12":{},"13":{},"17":{},"41":{},"42":{}},"component":{}}],["factor",{"_index":2128,"title":{},"name":{},"text":{"39":{}},"component":{}}],["fail",{"_index":831,"title":{},"name":{},"text":{"7":{},"9":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"27":{},"29":{},"42":{}},"component":{}}],["failur",{"_index":643,"title":{},"name":{},"text":{"6":{},"27":{}},"component":{}}],["fairli",{"_index":375,"title":{},"name":{},"text":{"4":{}},"component":{}}],["fake",{"_index":1692,"title":{},"name":{},"text":{"21":{}},"component":{}}],["fals",{"_index":887,"title":{},"name":{},"text":{"9":{}},"component":{}}],["familiar",{"_index":388,"title":{},"name":{},"text":{"4":{},"12":{}},"component":{}}],["faq",{"_index":1383,"title":{"20-11":{}},"name":{},"text":{"19":{}},"component":{}}],["far",{"_index":798,"title":{},"name":{},"text":{"6":{}},"component":{}}],["fashion",{"_index":1451,"title":{},"name":{},"text":{"19":{}},"component":{}}],["fast",{"_index":1449,"title":{},"name":{},"text":{"19":{}},"component":{}}],["fast_pedersen_hash.pi",{"_index":2218,"title":{},"name":{},"text":{"40":{}},"component":{}}],["faucet",{"_index":170,"title":{},"name":{},"text":{"3":{}},"component":{}}],["favor",{"_index":1441,"title":{},"name":{},"text":{"19":{}},"component":{}}],["favorit",{"_index":1085,"title":{},"name":{},"text":{"13":{}},"component":{}}],["featur",{"_index":48,"title":{"2":{},"14":{},"2-1":{},"2-2":{}},"name":{},"text":{"2":{},"19":{},"29":{}},"component":{}}],["feb",{"_index":1627,"title":{"21-2":{}},"name":{},"text":{},"component":{}}],["fee",{"_index":71,"title":{"39":{},"6-4":{},"13-9":{},"20-18":{},"39-2":{},"39-3":{},"39-12":{},"39-13":{},"41-5":{}},"name":{"39":{}},"text":{"2":{},"3":{},"6":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"26":{},"27":{},"30":{},"36":{},"39":{},"41":{},"44":{}},"component":{}}],["feeder",{"_index":1436,"title":{"20-14":{}},"name":{},"text":{"19":{},"20":{},"21":{},"44":{}},"component":{}}],["feeder_gateway_url",{"_index":2346,"title":{},"name":{},"text":{"44":{}},"component":{}}],["felt",{"_index":351,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"21":{},"31":{},"35":{},"36":{},"38":{},"41":{}},"component":{}}],["fetch",{"_index":941,"title":{},"name":{},"text":{"10":{}},"component":{}}],["few",{"_index":259,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"21":{}},"component":{}}],["field",{"_index":327,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"13":{},"14":{},"20":{},"21":{},"23":{},"28":{},"30":{},"34":{},"35":{},"38":{},"39":{},"40":{},"43":{},"44":{},"45":{}},"component":{}}],["fieldel",{"_index":1847,"title":{},"name":{},"text":{"28":{},"30":{},"41":{}},"component":{}}],["file",{"_index":499,"title":{"19-21":{},"45-5":{}},"name":{},"text":{"4":{},"5":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"16":{},"17":{},"19":{},"21":{},"23":{},"34":{},"44":{},"45":{}},"component":{}}],["filenam",{"_index":1445,"title":{},"name":{},"text":{"19":{}},"component":{}}],["file’",{"_index":1708,"title":{},"name":{},"text":{"21":{}},"component":{}}],["fill",{"_index":1831,"title":{},"name":{},"text":{"27":{}},"component":{}}],["filter",{"_index":2007,"title":{},"name":{},"text":{"36":{},"45":{}},"component":{}}],["final",{"_index":255,"title":{},"name":{},"text":{"4":{},"17":{},"19":{},"21":{},"29":{},"35":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["find",{"_index":182,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"13":{},"15":{},"17":{},"20":{},"32":{},"37":{}},"component":{}}],["finit",{"_index":2381,"title":{},"name":{},"text":{"45":{}},"component":{}}],["first",{"_index":392,"title":{"12-1":{}},"name":{},"text":{"4":{},"6":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"25":{},"30":{},"34":{},"35":{},"37":{},"39":{},"40":{},"41":{},"43":{}},"component":{}}],["first_nam",{"_index":1129,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fit",{"_index":2197,"title":{},"name":{},"text":{"40":{}},"component":{}}],["five",{"_index":2132,"title":{},"name":{},"text":{"39":{},"41":{}},"component":{}}],["fix",{"_index":61,"title":{"19-3":{},"19-7":{},"19-11":{},"19-15":{},"19-23":{}},"name":{},"text":{"2":{},"13":{},"14":{},"19":{},"21":{},"25":{},"41":{},"43":{}},"component":{}}],["flag",{"_index":118,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"9":{},"13":{},"17":{},"19":{},"20":{},"21":{}},"component":{}}],["flexibl",{"_index":1758,"title":{},"name":{},"text":{"24":{},"25":{}},"component":{}}],["fli",{"_index":2122,"title":{},"name":{},"text":{"39":{}},"component":{}}],["flow",{"_index":1481,"title":{"26":{},"20-5":{},"20-10":{}},"name":{},"text":{"20":{},"27":{},"41":{}},"component":{}}],["focu",{"_index":315,"title":{},"name":{},"text":{"4":{}},"component":{}}],["focus",{"_index":2093,"title":{},"name":{},"text":{"39":{}},"component":{}}],["follow",{"_index":50,"title":{"19-28":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["foo",{"_index":1272,"title":{},"name":{},"text":{"17":{},"21":{}},"component":{}}],["foo.return.s",{"_index":1718,"title":{},"name":{},"text":{"21":{}},"component":{}}],["footprint",{"_index":2096,"title":{},"name":{},"text":{"39":{}},"component":{}}],["forbid",{"_index":1667,"title":{},"name":{},"text":{"21":{}},"component":{}}],["forc",{"_index":1309,"title":{},"name":{},"text":{"17":{}},"component":{}}],["forev",{"_index":2254,"title":{},"name":{},"text":{"41":{}},"component":{}}],["forg",{"_index":1821,"title":{},"name":{},"text":{"27":{}},"component":{}}],["forget",{"_index":1084,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["form",{"_index":1624,"title":{},"name":{},"text":{"20":{},"41":{}},"component":{}}],["formal",{"_index":1405,"title":{},"name":{},"text":{"19":{}},"component":{}}],["format",{"_index":1526,"title":{"37-2":{}},"name":{},"text":{"20":{},"31":{},"37":{},"39":{}},"component":{}}],["former",{"_index":1311,"title":{},"name":{},"text":{"17":{},"44":{}},"component":{}}],["formul",{"_index":2130,"title":{},"name":{},"text":{"39":{}},"component":{}}],["formula",{"_index":290,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["fortun",{"_index":971,"title":{},"name":{},"text":{"12":{}},"component":{}}],["forward",{"_index":836,"title":{},"name":{},"text":{"8":{},"20":{}},"component":{}}],["found",{"_index":532,"title":{},"name":{},"text":{"5":{},"15":{},"20":{},"40":{}},"component":{}}],["frac{\\text{amm_to_bal",{"_index":462,"title":{},"name":{},"text":{"4":{}},"component":{}}],["free",{"_index":65,"title":{},"name":{},"text":{"2":{}},"component":{}}],["friendli",{"_index":1188,"title":{},"name":{},"text":{"15":{},"30":{},"36":{},"40":{}},"component":{}}],["from_address",{"_index":660,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"13":{},"29":{},"38":{},"44":{}},"component":{}}],["from_block=\"latest",{"_index":1409,"title":{},"name":{},"text":{"19":{}},"component":{}}],["fromaddress",{"_index":2237,"title":{},"name":{},"text":{"41":{}},"component":{}}],["full",{"_index":263,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"13":{},"15":{},"17":{},"19":{},"20":{},"29":{},"37":{},"39":{},"41":{},"45":{}},"component":{}}],["fun",{"_index":275,"title":{},"name":{},"text":{"4":{}},"component":{}}],["func",{"_index":348,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"21":{},"35":{},"36":{},"38":{}},"component":{}}],["function",{"_index":253,"title":{"40":{},"17-3":{},"25-3":{},"27-1":{},"27-4":{},"35-2":{},"42-3":{},"42-7":{}},"name":{"40":{}},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"26":{},"27":{},"30":{},"31":{},"33":{},"34":{},"35":{},"36":{},"38":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["function_invoc",{"_index":679,"title":{},"name":{},"text":{"6":{}},"component":{}}],["function_nam",{"_index":2353,"title":{},"name":{},"text":{"44":{}},"component":{}}],["function_selector",{"_index":2001,"title":{},"name":{},"text":{"36":{}},"component":{}}],["function_selector=selector",{"_index":851,"title":{},"name":{},"text":{"8":{}},"component":{}}],["function’",{"_index":553,"title":{},"name":{},"text":{"5":{},"8":{},"21":{},"36":{}},"component":{}}],["fund",{"_index":161,"title":{"42-9":{}},"name":{},"text":{"3":{},"4":{},"10":{},"13":{},"21":{},"27":{},"42":{}},"component":{}}],["fungibl",{"_index":299,"title":{},"name":{},"text":{"4":{}},"component":{}}],["further",{"_index":1838,"title":{},"name":{},"text":{"27":{}},"component":{}}],["futur",{"_index":60,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"14":{},"19":{},"20":{},"24":{},"25":{},"27":{},"28":{},"30":{},"39":{},"43":{},"44":{}},"component":{}}],["g=\\left",{"_index":1924,"title":{},"name":{},"text":{"30":{}},"component":{}}],["g_x",{"_index":1925,"title":{},"name":{},"text":{"30":{}},"component":{}}],["g_x=874739451078007766457464989774322083649278607533249481151382481072868806602",{"_index":1927,"title":{},"name":{},"text":{"30":{}},"component":{}}],["g_y=152666792071518830868575557812948353041420400780739481342941381225525861407",{"_index":1928,"title":{},"name":{},"text":{"30":{}},"component":{}}],["g_y\\right",{"_index":1926,"title":{},"name":{},"text":{"30":{}},"component":{}}],["ga",{"_index":186,"title":{},"name":{},"text":{"3":{},"6":{},"13":{},"18":{},"20":{},"39":{},"41":{}},"component":{}}],["gas/appl",{"_index":2147,"title":{},"name":{},"text":{"39":{}},"component":{}}],["gas/step",{"_index":2145,"title":{},"name":{},"text":{"39":{}},"component":{}}],["gas_pric",{"_index":722,"title":{},"name":{},"text":{"6":{}},"component":{}}],["gateway",{"_index":1288,"title":{"19-20":{},"20-14":{},"20-15":{}},"name":{},"text":{"17":{},"19":{},"20":{},"21":{},"29":{},"44":{}},"component":{}}],["gateway/gateway",{"_index":1528,"title":{},"name":{},"text":{"20":{}},"component":{}}],["gateway_url",{"_index":2347,"title":{},"name":{},"text":{"44":{}},"component":{}}],["gener",{"_index":504,"title":{"39-7":{},"42-1":{}},"name":{},"text":{"4":{},"6":{},"15":{},"20":{},"21":{},"30":{},"35":{},"36":{},"39":{},"41":{},"42":{},"44":{},"45":{}},"component":{}}],["genesi",{"_index":1381,"title":{},"name":{},"text":{"19":{}},"component":{}}],["get",{"_index":530,"title":{"11":{},"5-1":{},"17-2":{}},"name":{},"text":{"5":{},"6":{},"13":{},"27":{},"35":{},"36":{}},"component":{}}],["get_account_token_bal",{"_index":412,"title":{},"name":{},"text":{"4":{}},"component":{}}],["get_bal",{"_index":541,"title":{},"name":{},"text":{"5":{},"6":{},"12":{},"13":{},"16":{},"17":{}},"component":{}}],["get_block",{"_index":610,"title":{"6-10":{},"44-10":{}},"name":{},"text":{"6":{},"20":{},"44":{}},"component":{}}],["get_block_numb",{"_index":1179,"title":{"36-4":{}},"name":{},"text":{"14":{}},"component":{}}],["get_block_number{syscall_ptr",{"_index":2013,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_block_timestamp",{"_index":1180,"title":{"36-5":{}},"name":{},"text":{"14":{}},"component":{}}],["get_block_timestamp{syscall_ptr",{"_index":2014,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_block_trac",{"_index":612,"title":{"6-12":{}},"name":{},"text":{"6":{},"21":{}},"component":{}}],["get_caller_address",{"_index":424,"title":{"36-6":{}},"name":{},"text":{"4":{},"5":{},"17":{}},"component":{}}],["get_caller_address{syscall_ptr",{"_index":2015,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_class_by_hash",{"_index":607,"title":{"6-7":{}},"name":{},"text":{"6":{},"20":{},"21":{}},"component":{}}],["get_class_hash_at",{"_index":609,"title":{"6-9":{}},"name":{},"text":{"6":{},"21":{}},"component":{}}],["get_cod",{"_index":606,"title":{"6-6":{},"44-11":{}},"name":{},"text":{"6":{},"44":{}},"component":{}}],["get_compiled_class",{"_index":1620,"title":{},"name":{},"text":{"20":{}},"component":{}}],["get_compiled_class_by_class_hash",{"_index":1593,"title":{},"name":{},"text":{"20":{}},"component":{}}],["get_contract_address",{"_index":571,"title":{"36-7":{}},"name":{},"text":{"5":{},"20":{}},"component":{}}],["get_contract_address{syscall_ptr",{"_index":2016,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_full_contract",{"_index":608,"title":{"6-8":{}},"name":{},"text":{"6":{},"20":{}},"component":{}}],["get_nonc",{"_index":611,"title":{"6-11":{}},"name":{},"text":{"6":{}},"component":{}}],["get_opposite_token",{"_index":433,"title":{},"name":{},"text":{"4":{}},"component":{}}],["get_own",{"_index":822,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["get_pool_token_bal",{"_index":416,"title":{},"name":{},"text":{"4":{}},"component":{}}],["get_pric",{"_index":1560,"title":{},"name":{},"text":{"20":{}},"component":{}}],["get_price_selector",{"_index":1557,"title":{},"name":{},"text":{"20":{}},"component":{}}],["get_selector_from_nam",{"_index":938,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["get_sequencer_address",{"_index":1993,"title":{"36-8":{}},"name":{},"text":{},"component":{}}],["get_sequencer_address{syscall_ptr",{"_index":2018,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_state_upd",{"_index":613,"title":{"6-13":{}},"name":{},"text":{"6":{},"20":{},"21":{}},"component":{}}],["get_storage_at",{"_index":614,"title":{"6-14":{},"44-12":{}},"name":{},"text":{"6":{},"17":{},"44":{}},"component":{}}],["get_storage_var_address",{"_index":793,"title":{},"name":{},"text":{"6":{},"17":{}},"component":{}}],["get_transaciton",{"_index":1598,"title":{},"name":{},"text":{"20":{}},"component":{}}],["get_transact",{"_index":603,"title":{"6-1":{},"44-13":{}},"name":{},"text":{"6":{},"20":{},"44":{}},"component":{}}],["get_transaction_info",{"_index":1994,"title":{"36-9":{}},"name":{},"text":{},"component":{}}],["get_transaction_receipt",{"_index":604,"title":{"6-2":{},"44-14":{}},"name":{},"text":{"6":{},"10":{},"44":{}},"component":{}}],["get_transaction_trac",{"_index":605,"title":{"6-3":{}},"name":{},"text":{"6":{}},"component":{}}],["get_tx_info",{"_index":1163,"title":{},"name":{},"text":{"14":{}},"component":{}}],["get_tx_info{syscall_ptr",{"_index":2019,"title":{},"name":{},"text":{"36":{}},"component":{}}],["get_tx_max_fee{syscall_ptr",{"_index":1164,"title":{},"name":{},"text":{"14":{}},"component":{}}],["getter",{"_index":1050,"title":{},"name":{},"text":{"13":{}},"component":{}}],["github",{"_index":1375,"title":{},"name":{},"text":{"19":{}},"component":{}}],["give",{"_index":1370,"title":{},"name":{},"text":{"19":{},"25":{},"27":{}},"component":{}}],["given",{"_index":357,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"10":{},"12":{},"13":{},"15":{},"17":{},"20":{},"21":{},"30":{},"36":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{}},"component":{}}],["global",{"_index":1268,"title":{},"name":{},"text":{"17":{},"20":{}},"component":{}}],["global_state_root",{"_index":1849,"title":{},"name":{},"text":{"28":{}},"component":{}}],["global_tree_root",{"_index":1543,"title":{},"name":{},"text":{"20":{}},"component":{}}],["go",{"_index":245,"title":{},"name":{},"text":{"4":{},"39":{},"44":{}},"component":{}}],["goerli",{"_index":101,"title":{"3-5":{},"23-2":{},"23-3":{}},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"18":{},"44":{}},"component":{}}],["goerli.json",{"_index":1740,"title":{},"name":{},"text":{"23":{}},"component":{}}],["goerli2.json",{"_index":1741,"title":{},"name":{},"text":{"23":{}},"component":{}}],["good",{"_index":1014,"title":{},"name":{},"text":{"13":{},"24":{}},"component":{}}],["gradual",{"_index":2163,"title":{},"name":{},"text":{"39":{},"42":{}},"component":{}}],["grow",{"_index":2299,"title":{},"name":{},"text":{"42":{}},"component":{}}],["guarante",{"_index":814,"title":{},"name":{},"text":{"7":{},"20":{},"24":{},"27":{}},"component":{}}],["h",{"_index":1544,"title":{"45-7":{}},"name":{},"text":{"20":{},"28":{},"30":{},"34":{},"35":{},"38":{},"40":{},"41":{},"43":{},"45":{}},"component":{}}],["handl",{"_index":1075,"title":{},"name":{},"text":{"13":{},"15":{},"21":{},"27":{},"41":{}},"component":{}}],["handle_deposit",{"_index":2281,"title":{},"name":{},"text":{"42":{}},"component":{}}],["handler",{"_index":865,"title":{},"name":{},"text":{"8":{},"13":{},"29":{},"34":{},"36":{},"41":{},"42":{},"44":{}},"component":{}}],["happen",{"_index":1574,"title":{},"name":{},"text":{"20":{},"41":{},"42":{}},"component":{}}],["hard",{"_index":1397,"title":{},"name":{},"text":{"19":{}},"component":{}}],["harder",{"_index":1845,"title":{},"name":{},"text":{"27":{}},"component":{}}],["hardwar",{"_index":1602,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["hash",{"_index":193,"title":{"34":{},"40":{},"20-22":{},"28-2":{},"30-2":{},"30-6":{},"30-7":{},"30-9":{},"30-10":{},"34-2":{},"38-3":{},"40-3":{},"40-6":{},"41-2":{},"41-6":{}},"name":{"34":{},"40":{}},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"24":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"43":{},"44":{}},"component":{}}],["hash2",{"_index":1196,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hash2{hash_ptr=pedersen_ptr",{"_index":1203,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hashbuiltin",{"_index":361,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{}},"component":{}}],["have",{"_index":480,"title":{},"name":{},"text":{"4":{},"6":{},"20":{},"27":{},"33":{},"41":{}},"component":{}}],["header",{"_index":1846,"title":{"28-1":{}},"name":{"28":{}},"text":{"28":{}},"component":{}}],["header’",{"_index":1861,"title":{},"name":{},"text":{"28":{}},"component":{}}],["heavier",{"_index":2097,"title":{},"name":{},"text":{"39":{}},"component":{}}],["height",{"_index":1547,"title":{},"name":{},"text":{"20":{},"28":{},"43":{}},"component":{}}],["hello",{"_index":947,"title":{},"name":{},"text":{"12":{}},"component":{}}],["help",{"_index":806,"title":{"45-7":{}},"name":{},"text":{"6":{},"45":{}},"component":{}}],["helper",{"_index":1715,"title":{},"name":{},"text":{"21":{}},"component":{}}],["henc",{"_index":1283,"title":{},"name":{},"text":{"17":{}},"component":{}}],["here",{"_index":80,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"24":{},"30":{},"32":{},"38":{},"39":{},"42":{},"43":{},"44":{}},"component":{}}],["hex",{"_index":939,"title":{},"name":{},"text":{"10":{}},"component":{}}],["high",{"_index":2087,"title":{"39-3":{}},"name":{},"text":{"40":{}},"component":{}}],["higher",{"_index":1835,"title":{},"name":{},"text":{"27":{},"36":{},"38":{}},"component":{}}],["highest",{"_index":2318,"title":{},"name":{},"text":{"43":{}},"component":{}}],["highlight",{"_index":242,"title":{"19-17":{}},"name":{},"text":{"4":{}},"component":{}}],["hinder",{"_index":1448,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hint",{"_index":945,"title":{"12-2":{}},"name":{},"text":{"12":{},"17":{},"20":{},"33":{},"45":{}},"component":{}}],["hint.\\ncairo",{"_index":1291,"title":{},"name":{},"text":{"17":{}},"component":{}}],["histor",{"_index":1427,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["histori",{"_index":1372,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hold",{"_index":674,"title":{},"name":{},"text":{"6":{},"13":{},"37":{},"39":{}},"component":{}}],["home",{"_index":216,"title":{},"name":{},"text":{"3":{},"44":{}},"component":{}}],["honest",{"_index":1031,"title":{},"name":{},"text":{"13":{}},"component":{}}],["host",{"_index":1457,"title":{},"name":{},"text":{"19":{}},"component":{}}],["hotfix",{"_index":1377,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://alpha",{"_index":1731,"title":{},"name":{},"text":{"23":{},"29":{},"44":{}},"component":{}}],["https://alpha4",{"_index":1737,"title":{},"name":{},"text":{"23":{}},"component":{}}],["https://alpha4.starknet.io",{"_index":1735,"title":{},"name":{},"text":{"23":{}},"component":{}}],["https://alpha4.starknet.io/feeder_gateway",{"_index":2348,"title":{},"name":{},"text":{"44":{}},"component":{}}],["https://alpha4.starknet.io/gateway",{"_index":2350,"title":{},"name":{},"text":{"44":{}},"component":{}}],["https://starkscan.co",{"_index":1723,"title":{},"name":{},"text":{"22":{}},"component":{}}],["https://v2.viewblock.io/starknet",{"_index":1725,"title":{},"name":{},"text":{"22":{}},"component":{}}],["https://voyager.onlin",{"_index":1727,"title":{},"name":{},"text":{"22":{}},"component":{}}],["hypothet",{"_index":2125,"title":{},"name":{},"text":{"39":{}},"component":{}}],["i'th",{"_index":1860,"title":{},"name":{},"text":{"28":{}},"component":{}}],["i.",{"_index":287,"title":{},"name":{},"text":{"4":{},"12":{},"14":{},"20":{},"25":{},"42":{}},"component":{}}],["iaccount",{"_index":1764,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ibalancecontract",{"_index":539,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ibalancecontract.get_bal",{"_index":546,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ibalancecontract.increase_bal",{"_index":545,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ibalancecontract.library_call_increase_bal",{"_index":590,"title":{},"name":{},"text":{"5":{}},"component":{}}],["id",{"_index":356,"title":{"30-12":{}},"name":{},"text":{"4":{},"19":{},"30":{},"36":{},"41":{}},"component":{}}],["idea",{"_index":1789,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ideal",{"_index":301,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ident",{"_index":962,"title":{},"name":{},"text":{"12":{}},"component":{}}],["identifi",{"_index":745,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"17":{},"21":{},"29":{},"32":{},"33":{},"34":{},"38":{},"45":{}},"component":{}}],["if/els",{"_index":1514,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ignor",{"_index":1334,"title":{},"name":{},"text":{"17":{},"19":{},"20":{},"21":{},"39":{}},"component":{}}],["illustr",{"_index":1513,"title":{},"name":{},"text":{"20":{},"30":{},"38":{},"41":{}},"component":{}}],["imagin",{"_index":1519,"title":{},"name":{},"text":{"20":{},"39":{},"41":{}},"component":{}}],["impact",{"_index":1418,"title":{},"name":{},"text":{"19":{}},"component":{}}],["imper",{"_index":1220,"title":{},"name":{},"text":{"15":{}},"component":{}}],["implement",{"_index":231,"title":{"4-1":{}},"name":{},"text":{"4":{},"8":{},"13":{},"15":{},"19":{},"20":{},"21":{},"24":{},"28":{},"30":{},"33":{},"34":{},"37":{}},"component":{}}],["implementation_hash",{"_index":841,"title":{},"name":{},"text":{"8":{}},"component":{}}],["implementation_hash.read",{"_index":850,"title":{},"name":{},"text":{"8":{}},"component":{}}],["implementation_hash.writ",{"_index":843,"title":{},"name":{},"text":{"8":{}},"component":{}}],["implementation_hash_",{"_index":842,"title":{},"name":{},"text":{"8":{}},"component":{}}],["implicit",{"_index":394,"title":{},"name":{},"text":{"4":{},"5":{},"12":{},"13":{},"14":{},"42":{}},"component":{}}],["import",{"_index":310,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"21":{},"24":{},"35":{},"36":{},"38":{},"39":{},"45":{}},"component":{}}],["imposs",{"_index":1505,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["improv",{"_index":1391,"title":{},"name":{},"text":{"19":{},"21":{},"25":{},"29":{},"39":{}},"component":{}}],["in",{"_index":2142,"title":{},"name":{},"text":{"39":{}},"component":{}}],["in\\mathbb{f}_p^2",{"_index":2203,"title":{},"name":{},"text":{"40":{}},"component":{}}],["inaccess",{"_index":1998,"title":{},"name":{},"text":{"36":{}},"component":{}}],["incent",{"_index":2265,"title":{},"name":{},"text":{"41":{}},"component":{}}],["includ",{"_index":638,"title":{"42-5":{},"42-8":{}},"name":{},"text":{"6":{},"7":{},"13":{},"14":{},"19":{},"20":{},"21":{},"24":{},"26":{},"27":{},"28":{},"30":{},"36":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["inclus",{"_index":2020,"title":{},"name":{},"text":{"36":{}},"component":{}}],["incom",{"_index":1100,"title":{},"name":{},"text":{"13":{}},"component":{}}],["incorpor",{"_index":2364,"title":{},"name":{},"text":{"44":{}},"component":{}}],["increas",{"_index":563,"title":{},"name":{},"text":{"5":{},"8":{},"10":{},"12":{},"13":{},"15":{},"17":{},"21":{},"25":{},"30":{},"41":{},"43":{}},"component":{}}],["increase_bal",{"_index":540,"title":{},"name":{},"text":{"5":{},"6":{},"8":{},"10":{},"12":{},"13":{},"15":{},"16":{},"17":{}},"component":{}}],["increase_balance_cal",{"_index":922,"title":{},"name":{},"text":{"10":{}},"component":{}}],["increase_balance_called.emit",{"_index":924,"title":{},"name":{},"text":{"10":{}},"component":{}}],["increase_balance{syscall_ptr",{"_index":1331,"title":{},"name":{},"text":{"17":{}},"component":{}}],["increase_my_bal",{"_index":596,"title":{},"name":{},"text":{"5":{}},"component":{}}],["increase_my_balance{syscall_ptr",{"_index":588,"title":{},"name":{},"text":{"5":{}},"component":{}}],["increment",{"_index":1765,"title":{},"name":{},"text":{"24":{}},"component":{}}],["inde",{"_index":1819,"title":{},"name":{},"text":{"27":{},"41":{},"42":{}},"component":{}}],["independ",{"_index":1650,"title":{},"name":{},"text":{"21":{}},"component":{}}],["index",{"_index":1,"title":{},"name":{"1":{},"2":{},"11":{},"23":{}},"text":{"6":{},"28":{},"29":{},"37":{},"38":{}},"component":{}}],["indic",{"_index":1056,"title":{},"name":{},"text":{"13":{},"17":{},"37":{},"41":{},"43":{}},"component":{}}],["indirectli",{"_index":570,"title":{},"name":{},"text":{"5":{}},"component":{}}],["individu",{"_index":1772,"title":{},"name":{},"text":{"25":{}},"component":{}}],["induc",{"_index":1580,"title":{},"name":{},"text":{"20":{},"41":{}},"component":{}}],["info",{"_index":1581,"title":{"23":{}},"name":{},"text":{"20":{}},"component":{}}],["inform",{"_index":615,"title":{"14-6":{}},"name":{},"text":{"6":{},"10":{},"14":{},"17":{},"20":{},"21":{},"22":{},"30":{},"32":{},"33":{},"36":{},"37":{},"38":{},"39":{},"41":{},"43":{},"44":{},"45":{}},"component":{}}],["infrastructur",{"_index":1238,"title":{},"name":{},"text":{"16":{}},"component":{}}],["inher",{"_index":308,"title":{},"name":{},"text":{"4":{},"25":{}},"component":{}}],["init",{"_index":487,"title":{},"name":{},"text":{"4":{},"42":{}},"component":{}}],["init_pool",{"_index":469,"title":{},"name":{},"text":{"4":{}},"component":{}}],["initi",{"_index":150,"title":{"4-4":{}},"name":{},"text":{"3":{},"4":{},"7":{},"12":{},"21":{},"24":{},"25":{},"27":{},"30":{},"35":{},"36":{},"41":{},"42":{}},"component":{}}],["initiate_withdraw",{"_index":2284,"title":{},"name":{},"text":{"42":{}},"component":{}}],["inject",{"_index":2184,"title":{},"name":{},"text":{"39":{}},"component":{}}],["inner",{"_index":672,"title":{},"name":{},"text":{"6":{}},"component":{}}],["input",{"_index":440,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"31":{},"32":{},"40":{},"44":{}},"component":{}}],["input_array",{"_index":1939,"title":{},"name":{},"text":{"31":{}},"component":{}}],["input_nested_array",{"_index":1941,"title":{},"name":{},"text":{"31":{}},"component":{}}],["input_output_struct",{"_index":1944,"title":{},"name":{},"text":{"31":{}},"component":{}}],["insid",{"_index":395,"title":{},"name":{},"text":{"4":{},"20":{},"21":{},"25":{},"28":{},"34":{},"36":{},"37":{},"38":{},"41":{}},"component":{}}],["inspir",{"_index":1755,"title":{},"name":{},"text":{"24":{},"33":{}},"component":{}}],["instal",{"_index":92,"title":{"3-1":{}},"name":{},"text":{"3":{},"12":{},"16":{},"45":{}},"component":{}}],["instanc",{"_index":90,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"12":{},"13":{},"16":{},"20":{},"21":{},"30":{},"33":{},"36":{},"43":{}},"component":{}}],["instead",{"_index":131,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"8":{},"9":{},"12":{},"17":{},"19":{},"21":{},"24":{},"33":{},"45":{}},"component":{}}],["instruct",{"_index":104,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"12":{},"20":{},"21":{},"34":{}},"component":{}}],["int.from_byt",{"_index":1930,"title":{},"name":{},"text":{"30":{}},"component":{}}],["integ",{"_index":965,"title":{},"name":{},"text":{"12":{},"13":{},"23":{},"28":{},"43":{}},"component":{}}],["integr",{"_index":1422,"title":{},"name":{},"text":{"19":{}},"component":{}}],["intend",{"_index":1076,"title":{},"name":{},"text":{"13":{},"36":{}},"component":{}}],["intent",{"_index":2257,"title":{},"name":{},"text":{"41":{}},"component":{}}],["interact",{"_index":113,"title":{"13":{},"4-5":{},"12-7":{},"15-2":{},"17-5":{}},"name":{},"text":{"3":{},"4":{},"6":{},"12":{},"13":{},"16":{},"20":{},"25":{},"35":{},"41":{},"44":{}},"component":{}}],["interest",{"_index":786,"title":{},"name":{},"text":{"6":{}},"component":{}}],["interfac",{"_index":112,"title":{"24":{}},"name":{},"text":{"3":{},"5":{},"24":{},"31":{},"36":{}},"component":{}}],["intermedi",{"_index":1499,"title":{},"name":{},"text":{"20":{}},"component":{}}],["intern",{"_index":1542,"title":{},"name":{},"text":{"20":{},"43":{}},"component":{}}],["internal_cal",{"_index":687,"title":{},"name":{},"text":{"6":{}},"component":{}}],["interpret",{"_index":2069,"title":{},"name":{},"text":{"37":{},"43":{}},"component":{}}],["intro",{"_index":946,"title":{},"name":{"12":{}},"text":{},"component":{}}],["intro_contract_address_trim",{"_index":622,"title":{},"name":{},"text":{"6":{}},"component":{}}],["introduc",{"_index":788,"title":{},"name":{},"text":{"6":{},"19":{},"20":{},"21":{},"25":{},"30":{}},"component":{}}],["introduct",{"_index":0,"title":{"1":{},"37-1":{},"39-1":{}},"name":{"25":{}},"text":{"20":{}},"component":{}}],["invalid",{"_index":1169,"title":{"27-2":{}},"name":{},"text":{"14":{},"15":{},"17":{},"21":{},"25":{},"27":{},"41":{}},"component":{}}],["invent",{"_index":2283,"title":{},"name":{},"text":{"42":{}},"component":{}}],["invoc",{"_index":321,"title":{},"name":{},"text":{"4":{},"12":{},"41":{}},"component":{}}],["invok",{"_index":83,"title":{"30-3":{},"30-4":{},"30-5":{},"30-6":{},"30-7":{},"44-15":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"20":{},"21":{},"28":{},"29":{},"30":{},"36":{},"41":{},"43":{},"44":{}},"component":{}}],["invoke_funct",{"_index":631,"title":{},"name":{},"text":{"6":{}},"component":{}}],["involv",{"_index":2022,"title":{},"name":{},"text":{"36":{},"39":{},"42":{}},"component":{}}],["ip",{"_index":1352,"title":{},"name":{},"text":{"18":{}},"component":{}}],["isol",{"_index":1017,"title":{},"name":{},"text":{"13":{}},"component":{}}],["issu",{"_index":139,"title":{},"name":{},"text":{"3":{},"8":{},"19":{},"21":{},"27":{}},"component":{}}],["item",{"_index":1127,"title":{},"name":{},"text":{"14":{}},"component":{}}],["itself",{"_index":457,"title":{},"name":{},"text":{"4":{},"13":{},"20":{},"25":{},"41":{},"42":{}},"component":{}}],["it’",{"_index":1015,"title":{},"name":{},"text":{"13":{},"21":{},"24":{},"27":{},"29":{},"39":{}},"component":{}}],["json",{"_index":1373,"title":{"20-16":{}},"name":{},"text":{"19":{},"20":{},"23":{},"31":{},"34":{},"44":{}},"component":{}}],["juli",{"_index":1640,"title":{"21-11":{}},"name":{},"text":{},"component":{}}],["june",{"_index":1642,"title":{"21-13":{}},"name":{},"text":{},"component":{}}],["k",{"_index":294,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["k_1",{"_index":1982,"title":{},"name":{},"text":{"35":{}},"component":{}}],["k_2",{"_index":1984,"title":{},"name":{},"text":{"35":{}},"component":{}}],["k_n",{"_index":1983,"title":{},"name":{},"text":{"35":{}},"component":{}}],["keccak",{"_index":1904,"title":{"40-2":{}},"name":{},"text":{"30":{},"35":{},"40":{}},"component":{}}],["keccak256",{"_index":2195,"title":{},"name":{},"text":{"40":{},"41":{}},"component":{}}],["keep",{"_index":1339,"title":{},"name":{},"text":{"18":{},"20":{},"25":{}},"component":{}}],["kept",{"_index":213,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"35":{},"44":{},"45":{}},"component":{}}],["key",{"_index":157,"title":{},"name":{},"text":{"3":{},"6":{},"9":{},"10":{},"15":{},"17":{},"20":{},"25":{},"26":{},"27":{},"29":{},"31":{},"35":{},"36":{},"37":{},"38":{},"39":{},"43":{},"44":{}},"component":{}}],["key/valu",{"_index":343,"title":{},"name":{},"text":{"4":{},"43":{}},"component":{}}],["keys[0",{"_index":2008,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["keys[1",{"_index":2009,"title":{},"name":{},"text":{"36":{},"38":{}},"component":{}}],["keys_len",{"_index":2005,"title":{},"name":{},"text":{"36":{}},"component":{}}],["keyword",{"_index":1250,"title":{},"name":{},"text":{"16":{},"21":{}},"component":{}}],["kick",{"_index":2113,"title":{},"name":{},"text":{"39":{}},"component":{}}],["know",{"_index":985,"title":{},"name":{},"text":{"12":{},"43":{}},"component":{}}],["known",{"_index":7,"title":{},"name":{},"text":{"1":{},"8":{},"19":{},"21":{},"25":{},"29":{},"36":{},"42":{},"43":{}},"component":{}}],["l",{"_index":2107,"title":{},"name":{},"text":{"39":{}},"component":{}}],["l1",{"_index":66,"title":{"13":{},"13-2":{},"13-3":{},"13-6":{},"13-7":{},"41-1":{},"41-2":{},"41-3":{},"41-4":{},"41-5":{},"41-6":{},"42-3":{},"42-9":{}},"name":{},"text":{"2":{},"3":{},"6":{},"8":{},"13":{},"14":{},"19":{},"20":{},"21":{},"23":{},"29":{},"34":{},"36":{},"37":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["l1_bridge_address",{"_index":1746,"title":{},"name":{},"text":{"23":{}},"component":{}}],["l1_contract_address",{"_index":1045,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1_contract_address=0x8359e4b0152ed5a731162d3c7b0d8d56edb165a0",{"_index":1109,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1_handler",{"_index":869,"title":{},"name":{},"text":{"8":{},"13":{},"41":{}},"component":{}}],["l1_to_l2_consumed_messag",{"_index":668,"title":{},"name":{},"text":{"6":{}},"component":{}}],["l1_token_address",{"_index":1744,"title":{},"name":{},"text":{"23":{}},"component":{}}],["l1l2",{"_index":645,"title":{},"name":{"13":{}},"text":{"6":{}},"component":{}}],["l1l2.cairo",{"_index":1080,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1l2_abi.json",{"_index":1082,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1l2_class_hash",{"_index":1083,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1l2_compiled.json",{"_index":1081,"title":{},"name":{},"text":{"13":{}},"component":{}}],["l1→l2",{"_index":1605,"title":{"42-2":{}},"name":{},"text":{"20":{},"36":{},"41":{}},"component":{}}],["l2",{"_index":11,"title":{"13-2":{},"13-3":{},"41-1":{},"41-2":{},"41-3":{},"41-4":{},"41-5":{},"41-6":{},"42-7":{}},"name":{},"text":{"1":{},"2":{},"3":{},"6":{},"8":{},"11":{},"13":{},"23":{},"29":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["l2_bridge_address",{"_index":1747,"title":{},"name":{},"text":{"23":{}},"component":{}}],["l2_to_l1_messag",{"_index":659,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["l2_token_address",{"_index":1745,"title":{},"name":{},"text":{"23":{}},"component":{}}],["l2→l1",{"_index":2089,"title":{"39-10":{},"42-6":{}},"name":{},"text":{"39":{},"41":{}},"component":{}}],["lang",{"_index":105,"title":{},"name":{},"text":{"3":{},"7":{},"8":{},"9":{},"12":{},"13":{},"16":{},"19":{},"44":{}},"component":{}}],["languag",{"_index":1675,"title":{},"name":{},"text":{"21":{},"30":{},"33":{},"36":{}},"component":{}}],["larger",{"_index":2098,"title":{},"name":{},"text":{"39":{}},"component":{}}],["last",{"_index":785,"title":{},"name":{},"text":{"6":{},"10":{},"13":{},"17":{},"20":{}},"component":{}}],["last_nam",{"_index":1130,"title":{},"name":{},"text":{"14":{}},"component":{}}],["latenc",{"_index":2110,"title":{},"name":{},"text":{"39":{}},"component":{}}],["later",{"_index":758,"title":{},"name":{},"text":{"6":{},"10":{},"27":{},"39":{},"41":{}},"component":{}}],["latest",{"_index":1354,"title":{"19-1":{}},"name":{},"text":{"19":{},"21":{},"39":{},"44":{}},"component":{}}],["latter",{"_index":2359,"title":{},"name":{},"text":{"44":{}},"component":{}}],["layer",{"_index":1501,"title":{},"name":{},"text":{"20":{},"41":{}},"component":{}}],["layout",{"_index":1971,"title":{"35-1":{}},"name":{},"text":{},"component":{}}],["lead",{"_index":2317,"title":{},"name":{},"text":{"43":{}},"component":{}}],["leaf",{"_index":1859,"title":{},"name":{},"text":{"28":{},"43":{}},"component":{}}],["leaf_vers",{"_index":1550,"title":{},"name":{},"text":{"20":{}},"component":{}}],["learn",{"_index":311,"title":{},"name":{},"text":{"4":{}},"component":{}}],["leav",{"_index":1615,"title":{},"name":{},"text":{"20":{},"42":{},"43":{}},"component":{}}],["left",{"_index":2313,"title":{},"name":{},"text":{"43":{}},"component":{}}],["left=right",{"_index":2333,"title":{},"name":{},"text":{"43":{}},"component":{}}],["left[shift\\_point",{"_index":2209,"title":{},"name":{},"text":{"40":{}},"component":{}}],["length",{"_index":1069,"title":{},"name":{},"text":{"13":{},"14":{},"39":{},"43":{}},"component":{}}],["length>0",{"_index":2316,"title":{},"name":{},"text":{"43":{}},"component":{}}],["less",{"_index":407,"title":{},"name":{},"text":{"4":{},"39":{}},"component":{}}],["let",{"_index":1054,"title":{},"name":{},"text":{"13":{}},"component":{}}],["let’",{"_index":324,"title":{},"name":{},"text":{"4":{},"8":{},"10":{},"12":{},"13":{},"16":{},"17":{},"39":{}},"component":{}}],["level",{"_index":1683,"title":{"35-2":{},"39-3":{}},"name":{},"text":{"21":{},"24":{},"25":{},"36":{},"38":{},"43":{}},"component":{}}],["li",{"_index":1988,"title":{},"name":{},"text":{"35":{}},"component":{}}],["librari",{"_index":405,"title":{"5-2":{}},"name":{},"text":{"4":{},"5":{},"12":{},"13":{},"14":{},"16":{},"17":{},"20":{},"21":{},"30":{},"36":{},"45":{}},"component":{}}],["library_cal",{"_index":840,"title":{"20-6":{},"36-10":{}},"name":{},"text":{"8":{},"20":{},"21":{},"33":{},"36":{}},"component":{}}],["library_call_",{"_index":587,"title":{},"name":{},"text":{"5":{}},"component":{}}],["library_call_l1_handl",{"_index":868,"title":{"36-11":{}},"name":{},"text":{"8":{}},"component":{}}],["library_call_l1_handler{syscall_ptr",{"_index":2023,"title":{},"name":{},"text":{"36":{}},"component":{}}],["library_call{syscall_ptr",{"_index":2021,"title":{},"name":{},"text":{"36":{}},"component":{}}],["life",{"_index":1871,"title":{},"name":{"29":{}},"text":{},"component":{}}],["lifecycl",{"_index":1870,"title":{"29":{}},"name":{},"text":{"44":{}},"component":{}}],["lifetim",{"_index":1813,"title":{},"name":{},"text":{"26":{}},"component":{}}],["lift",{"_index":2297,"title":{},"name":{},"text":{"42":{}},"component":{}}],["limit",{"_index":279,"title":{"18":{},"27-3":{},"42-10":{}},"name":{},"text":{"4":{},"18":{},"25":{},"27":{},"35":{},"39":{},"42":{}},"component":{}}],["limits_and_trigg",{"_index":1337,"title":{},"name":{"18":{}},"text":{},"component":{}}],["line",{"_index":111,"title":{"44-1":{}},"name":{},"text":{"3":{},"10":{},"12":{},"17":{},"21":{},"34":{},"35":{},"44":{},"45":{}},"component":{}}],["linear",{"_index":1840,"title":{},"name":{},"text":{"27":{}},"component":{}}],["link",{"_index":1384,"title":{},"name":{},"text":{"19":{}},"component":{}}],["link:poseidon",{"_index":1551,"title":{},"name":{},"text":{"20":{}},"component":{}}],["liquid",{"_index":330,"title":{},"name":{},"text":{"4":{}},"component":{}}],["list",{"_index":634,"title":{},"name":{},"text":{"6":{},"12":{},"20":{},"21":{},"23":{},"28":{},"29":{},"30":{},"38":{},"39":{},"41":{},"44":{},"45":{}},"component":{}}],["live",{"_index":1472,"title":{},"name":{},"text":{"19":{}},"component":{}}],["local",{"_index":447,"title":{},"name":{},"text":{"4":{},"5":{},"20":{},"36":{},"37":{}},"component":{}}],["locat",{"_index":1294,"title":{},"name":{},"text":{"17":{},"44":{}},"component":{}}],["lock",{"_index":2290,"title":{},"name":{},"text":{"42":{}},"component":{}}],["log",{"_index":2071,"title":{},"name":{},"text":{"38":{}},"component":{}}],["logic",{"_index":45,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"24":{},"25":{},"27":{},"36":{}},"component":{}}],["logmessagetol1",{"_index":2234,"title":{},"name":{},"text":{"41":{}},"component":{}}],["long",{"_index":1128,"title":{},"name":{},"text":{"14":{}},"component":{}}],["longer",{"_index":56,"title":{},"name":{},"text":{"2":{},"17":{},"20":{},"21":{}},"component":{}}],["look",{"_index":917,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"17":{},"37":{}},"component":{}}],["lose",{"_index":221,"title":{},"name":{},"text":{"3":{},"25":{},"41":{},"44":{}},"component":{}}],["lot",{"_index":1826,"title":{},"name":{},"text":{"27":{}},"component":{}}],["low",{"_index":1682,"title":{"35-2":{}},"name":{},"text":{"21":{},"38":{},"40":{}},"component":{}}],["lower",{"_index":2002,"title":{},"name":{},"text":{"36":{}},"component":{}}],["m",{"_index":2157,"title":{},"name":{},"text":{"39":{}},"component":{}}],["machin",{"_index":2109,"title":{},"name":{},"text":{"39":{}},"component":{}}],["made",{"_index":1387,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mail",{"_index":1648,"title":{},"name":{},"text":{"21":{}},"component":{}}],["main",{"_index":959,"title":{},"name":{},"text":{"12":{},"21":{},"30":{}},"component":{}}],["mainnet",{"_index":1174,"title":{"23-1":{}},"name":{},"text":{"14":{},"18":{},"19":{},"23":{},"29":{},"42":{},"44":{}},"component":{}}],["mainnet.json",{"_index":1739,"title":{},"name":{},"text":{"23":{}},"component":{}}],["mainnet.starknet.io",{"_index":1732,"title":{},"name":{},"text":{"23":{}},"component":{}}],["mainnet.starknet.io/feeder_gateway",{"_index":2349,"title":{},"name":{},"text":{"44":{}},"component":{}}],["mainnet.starknet.io/feeder_gateway/get_block?blocknumber=pend",{"_index":1880,"title":{},"name":{},"text":{"29":{}},"component":{}}],["mainnet.starknet.io/gateway",{"_index":2351,"title":{},"name":{},"text":{"44":{}},"component":{}}],["maintain",{"_index":197,"title":{},"name":{},"text":{"3":{},"4":{},"13":{},"17":{},"20":{},"41":{}},"component":{}}],["major",{"_index":1394,"title":{},"name":{},"text":{"19":{},"21":{},"25":{}},"component":{}}],["make",{"_index":266,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"12":{},"13":{},"21":{},"25":{},"27":{},"40":{}},"component":{}}],["maker",{"_index":238,"title":{"4":{}},"name":{},"text":{},"component":{}}],["malici",{"_index":1689,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["manag",{"_index":283,"title":{},"name":{},"text":{"4":{},"24":{},"25":{},"27":{},"44":{}},"component":{}}],["mandatori",{"_index":1482,"title":{"20-18":{}},"name":{},"text":{"20":{},"21":{},"24":{}},"component":{}}],["mani",{"_index":333,"title":{},"name":{},"text":{"4":{},"10":{},"27":{},"39":{}},"component":{}}],["manner",{"_index":1625,"title":{},"name":{},"text":{"20":{},"37":{},"41":{}},"component":{}}],["manual",{"_index":2345,"title":{},"name":{},"text":{"44":{}},"component":{}}],["map",{"_index":352,"title":{"17-1":{}},"name":{},"text":{"4":{},"6":{},"12":{},"13":{},"14":{},"17":{},"20":{},"35":{},"40":{},"41":{},"43":{}},"component":{}}],["mark",{"_index":1452,"title":{},"name":{},"text":{"19":{}},"component":{}}],["market",{"_index":237,"title":{"4":{}},"name":{},"text":{"4":{}},"component":{}}],["massiv",{"_index":319,"title":{},"name":{},"text":{"4":{}},"component":{}}],["match",{"_index":830,"title":{},"name":{},"text":{"7":{},"8":{},"19":{},"20":{},"24":{},"43":{}},"component":{}}],["math",{"_index":404,"title":{},"name":{},"text":{"4":{}},"component":{}}],["math.cairo:47:5",{"_index":1328,"title":{},"name":{},"text":{"17":{}},"component":{}}],["mathbb{f}_p",{"_index":2189,"title":{},"name":{},"text":{"40":{}},"component":{}}],["mathbb{f}_p\\times\\mathbb{f}_p\\rightarrow\\mathbb{f}_p",{"_index":2193,"title":{},"name":{},"text":{"40":{}},"component":{}}],["mathbb{f}_p^2",{"_index":2198,"title":{},"name":{},"text":{"40":{}},"component":{}}],["matter",{"_index":346,"title":{},"name":{},"text":{"4":{}},"component":{}}],["max",{"_index":1119,"title":{},"name":{},"text":{"14":{},"27":{},"39":{},"42":{}},"component":{}}],["max_fe",{"_index":625,"title":{},"name":{},"text":{"6":{},"14":{},"17":{},"20":{},"21":{},"30":{},"39":{},"41":{}},"component":{}}],["max_fee=tx_info.max_fe",{"_index":1166,"title":{},"name":{},"text":{"14":{}},"component":{}}],["max_k",{"_index":2173,"title":{},"name":{},"text":{"39":{}},"component":{}}],["max_k[\\text{cairoresourceusage}_k",{"_index":2139,"title":{},"name":{},"text":{"39":{}},"component":{}}],["maxim",{"_index":1990,"title":{},"name":{},"text":{"35":{},"39":{}},"component":{}}],["maximum",{"_index":1905,"title":{},"name":{},"text":{"30":{},"36":{},"39":{}},"component":{}}],["mean",{"_index":751,"title":{},"name":{},"text":{"6":{},"9":{},"12":{},"13":{},"14":{},"19":{},"25":{},"27":{},"37":{},"42":{}},"component":{}}],["meaning",{"_index":1869,"title":{},"name":{},"text":{"28":{}},"component":{}}],["meant",{"_index":1420,"title":{},"name":{},"text":{"19":{}},"component":{}}],["meantim",{"_index":1515,"title":{},"name":{},"text":{"20":{}},"component":{}}],["measur",{"_index":2103,"title":{},"name":{},"text":{"39":{},"44":{}},"component":{}}],["mechan",{"_index":75,"title":{"39":{},"41":{},"26-1":{}},"name":{"39":{},"41":{}},"text":{"2":{},"6":{},"10":{},"12":{},"13":{},"17":{},"21":{},"25":{},"27":{},"36":{},"39":{},"41":{},"42":{}},"component":{}}],["medium",{"_index":1655,"title":{},"name":{},"text":{"21":{}},"component":{}}],["member",{"_index":1150,"title":{},"name":{},"text":{"14":{},"21":{},"31":{},"38":{}},"component":{}}],["memori",{"_index":968,"title":{},"name":{},"text":{"12":{}},"component":{}}],["mempool",{"_index":1350,"title":{},"name":{},"text":{"18":{},"26":{},"27":{}},"component":{}}],["mention",{"_index":385,"title":{},"name":{},"text":{"4":{},"12":{},"43":{},"45":{}},"component":{}}],["merkl",{"_index":1407,"title":{"43-2":{}},"name":{},"text":{"19":{},"28":{},"43":{}},"component":{}}],["messag",{"_index":67,"title":{"41":{},"13-2":{},"13-3":{},"13-6":{},"13-7":{},"13-9":{},"20-18":{},"39-10":{},"41-1":{},"41-3":{},"41-4":{},"41-5":{}},"name":{"41":{}},"text":{"2":{},"6":{},"8":{},"13":{},"15":{},"17":{},"20":{},"21":{},"29":{},"36":{},"39":{},"41":{},"42":{},"44":{},"45":{}},"component":{}}],["message=amount_hash",{"_index":1205,"title":{},"name":{},"text":{"15":{}},"component":{}}],["message_hash",{"_index":1226,"title":{},"name":{},"text":{"15":{}},"component":{}}],["message_payload",{"_index":1061,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["message_payload[0",{"_index":1062,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["message_payload[1",{"_index":1063,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["message_payload[2",{"_index":1064,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["message_receiv",{"_index":2076,"title":{},"name":{},"text":{"38":{}},"component":{}}],["message_received.emit",{"_index":2077,"title":{},"name":{},"text":{"38":{}},"component":{}}],["message_withdraw",{"_index":1047,"title":{},"name":{},"text":{"13":{}},"component":{}}],["messages.cairo",{"_index":2028,"title":{},"name":{},"text":{"36":{}},"component":{}}],["method",{"_index":963,"title":{},"name":{},"text":{"12":{},"16":{},"19":{},"21":{},"25":{},"36":{}},"component":{}}],["metric",{"_index":1720,"title":{},"name":{},"text":{"22":{},"39":{}},"component":{}}],["migrat",{"_index":1439,"title":{},"name":{},"text":{"19":{},"20":{},"21":{}},"component":{}}],["min",{"_index":1118,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["min_max",{"_index":1122,"title":{},"name":{},"text":{"14":{}},"component":{}}],["min_max[0",{"_index":1125,"title":{},"name":{},"text":{"14":{}},"component":{}}],["min_max[1",{"_index":1126,"title":{},"name":{},"text":{"14":{}},"component":{}}],["mind",{"_index":2118,"title":{},"name":{},"text":{"39":{}},"component":{}}],["minor",{"_index":801,"title":{},"name":{},"text":{"6":{},"19":{}},"component":{}}],["mint",{"_index":304,"title":{},"name":{},"text":{"4":{},"13":{},"42":{}},"component":{}}],["miss",{"_index":866,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mitig",{"_index":2255,"title":{},"name":{},"text":{"41":{}},"component":{}}],["mock",{"_index":306,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mode",{"_index":2037,"title":{},"name":{},"text":{"37":{}},"component":{}}],["model",{"_index":342,"title":{},"name":{},"text":{"4":{}},"component":{}}],["modifi",{"_index":142,"title":{"17-3":{}},"name":{},"text":{"3":{},"4":{},"5":{},"12":{},"20":{},"35":{},"44":{}},"component":{}}],["modify_account_bal",{"_index":358,"title":{},"name":{},"text":{"4":{}},"component":{}}],["modul",{"_index":1668,"title":{},"name":{},"text":{"21":{},"44":{}},"component":{}}],["moment",{"_index":145,"title":{},"name":{},"text":{"3":{},"21":{},"29":{}},"component":{}}],["money",{"_index":1055,"title":{},"name":{},"text":{"13":{}},"component":{}}],["more",{"_index":81,"title":{"6":{},"14":{}},"name":{},"text":{"2":{},"6":{},"9":{},"10":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"26":{},"30":{},"34":{},"36":{},"37":{},"39":{},"41":{},"44":{}},"component":{}}],["more_featur",{"_index":1116,"title":{},"name":{"14":{}},"text":{},"component":{}}],["mostli",{"_index":1424,"title":{},"name":{},"text":{"19":{}},"component":{}}],["motiv",{"_index":2091,"title":{},"name":{},"text":{"39":{}},"component":{}}],["move",{"_index":158,"title":{},"name":{},"text":{"3":{},"13":{},"21":{}},"component":{}}],["msg_hash=message_hash",{"_index":1228,"title":{},"name":{},"text":{"15":{}},"component":{}}],["much",{"_index":329,"title":{"39-3":{}},"name":{},"text":{"4":{},"20":{},"36":{}},"component":{}}],["multical",{"_index":1844,"title":{},"name":{},"text":{"27":{}},"component":{}}],["multipl",{"_index":198,"title":{"14-1":{}},"name":{},"text":{"3":{},"15":{},"17":{},"21":{},"25":{},"27":{},"35":{},"39":{},"41":{},"44":{}},"component":{}}],["n",{"_index":1306,"title":{},"name":{},"text":{"17":{},"39":{},"40":{},"43":{}},"component":{}}],["n+m",{"_index":2177,"title":{},"name":{},"text":{"39":{}},"component":{}}],["n\\nerror",{"_index":1298,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n\\ntraceback",{"_index":1305,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_memory_hol",{"_index":655,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["n_step",{"_index":657,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["name",{"_index":64,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"22":{},"23":{},"28":{},"30":{},"31":{},"33":{},"34":{},"35":{},"38":{},"39":{},"44":{},"45":{}},"component":{}}],["namespac",{"_index":538,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nassertionerror",{"_index":1307,"title":{},"name":{},"text":{"17":{}},"component":{}}],["nativ",{"_index":1806,"title":{},"name":{},"text":{"25":{},"27":{}},"component":{}}],["natur",{"_index":1614,"title":{},"name":{},"text":{"20":{}},"component":{}}],["near",{"_index":1380,"title":{},"name":{},"text":{"19":{}},"component":{}}],["necessari",{"_index":398,"title":{},"name":{},"text":{"4":{},"20":{},"45":{}},"component":{}}],["necessarili",{"_index":1843,"title":{},"name":{},"text":{"27":{},"33":{}},"component":{}}],["need",{"_index":140,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"9":{},"12":{},"13":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"25":{},"27":{},"30":{},"34":{},"39":{},"41":{},"43":{},"44":{}},"component":{}}],["neg",{"_index":379,"title":{},"name":{},"text":{"4":{},"17":{}},"component":{}}],["neq",{"_index":2334,"title":{},"name":{},"text":{"43":{}},"component":{}}],["nerror",{"_index":1300,"title":{},"name":{},"text":{"17":{}},"component":{}}],["nest",{"_index":670,"title":{},"name":{},"text":{"6":{},"31":{},"35":{}},"component":{}}],["nested_len",{"_index":1940,"title":{},"name":{},"text":{"31":{}},"component":{}}],["network",{"_index":12,"title":{"3-2":{},"19-19":{},"44-2":{}},"name":{},"text":{"1":{},"6":{},"11":{},"17":{},"18":{},"19":{},"21":{},"25":{},"29":{},"30":{},"41":{},"42":{},"44":{}},"component":{}}],["network=alpha",{"_index":117,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["network’",{"_index":1000,"title":{},"name":{},"text":{"12":{}},"component":{}}],["never",{"_index":2279,"title":{},"name":{},"text":{"42":{}},"component":{}}],["new",{"_index":89,"title":{"19-4":{},"19-9":{},"20-9":{}},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"29":{},"30":{},"33":{},"36":{},"37":{},"39":{},"43":{},"44":{}},"component":{}}],["new\\_lin",{"_index":1966,"title":{},"name":{},"text":{"34":{}},"component":{}}],["new_account",{"_index":151,"title":{},"name":{},"text":{"3":{},"21":{}},"component":{}}],["new_bal",{"_index":366,"title":{},"name":{},"text":{"4":{},"13":{}},"component":{}}],["new_class_hash",{"_index":1561,"title":{},"name":{},"text":{"20":{}},"component":{}}],["new_root",{"_index":771,"title":{},"name":{},"text":{"6":{}},"component":{}}],["newer",{"_index":998,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["newli",{"_index":888,"title":{},"name":{},"text":{"9":{},"20":{}},"component":{}}],["newton",{"_index":1382,"title":{},"name":{},"text":{"19":{}},"component":{}}],["next",{"_index":401,"title":{},"name":{},"text":{"4":{},"5":{},"12":{},"20":{},"21":{},"26":{},"37":{}},"component":{}}],["nft",{"_index":1771,"title":{},"name":{},"text":{"25":{}},"component":{}}],["nice",{"_index":1390,"title":{},"name":{},"text":{"19":{}},"component":{}}],["no_debug_info",{"_index":1960,"title":{"45-17":{}},"name":{},"text":{"34":{},"45":{}},"component":{}}],["no_opt_unused_funct",{"_index":2376,"title":{"45-20":{}},"name":{},"text":{"45":{}},"component":{}}],["no_wallet",{"_index":205,"title":{},"name":{},"text":{"3":{},"21":{},"44":{}},"component":{}}],["node",{"_index":1369,"title":{},"name":{},"text":{"19":{},"20":{},"29":{},"37":{},"43":{}},"component":{}}],["non",{"_index":1767,"title":{},"name":{},"text":{"24":{},"43":{}},"component":{}}],["nonc",{"_index":626,"title":{},"name":{},"text":{"6":{},"14":{},"15":{},"19":{},"20":{},"21":{},"24":{},"25":{},"27":{},"30":{},"37":{},"41":{},"43":{},"44":{}},"component":{}}],["nonce}}_{\\text{64",{"_index":1587,"title":{},"name":{},"text":{"20":{},"37":{}},"component":{}}],["nondeterminist",{"_index":981,"title":{},"name":{},"text":{"12":{}},"component":{}}],["none",{"_index":1616,"title":{},"name":{},"text":{"20":{},"36":{},"43":{}},"component":{}}],["nonneg",{"_index":406,"title":{},"name":{},"text":{"4":{},"13":{},"14":{},"17":{}},"component":{}}],["normal",{"_index":1073,"title":{},"name":{},"text":{"13":{}},"component":{}}],["not_receiv",{"_index":1004,"title":{"29-2":{}},"name":{},"text":{"12":{},"42":{},"44":{}},"component":{}}],["notabl",{"_index":135,"title":{"20-2":{}},"name":{},"text":{"3":{}},"component":{}}],["note",{"_index":163,"title":{"21":{},"19-28":{},"21-4":{},"21-6":{},"21-8":{},"21-10":{},"21-12":{},"21-14":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"21":{},"24":{},"35":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["noth",{"_index":1518,"title":{},"name":{},"text":{"20":{},"39":{}},"component":{}}],["notic",{"_index":1319,"title":{},"name":{},"text":{"17":{},"33":{},"39":{}},"component":{}}],["nov",{"_index":1632,"title":{"21-5":{}},"name":{},"text":{},"component":{}}],["novelti",{"_index":1497,"title":{},"name":{},"text":{"20":{}},"component":{}}],["now",{"_index":418,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"9":{},"13":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"27":{},"29":{},"30":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["num_of_storage_upd",{"_index":2040,"title":{},"name":{},"text":{"37":{}},"component":{}}],["number",{"_index":493,"title":{"14-7":{}},"name":{},"text":{"4":{},"6":{},"7":{},"9":{},"14":{},"18":{},"20":{},"21":{},"23":{},"27":{},"28":{},"30":{},"36":{},"37":{},"39":{},"43":{},"44":{},"45":{}},"component":{}}],["number=pend",{"_index":754,"title":{},"name":{},"text":{"6":{}},"component":{}}],["nunknown",{"_index":1293,"title":{},"name":{},"text":{"17":{}},"component":{}}],["object",{"_index":1867,"title":{},"name":{},"text":{"28":{},"30":{},"33":{}},"component":{}}],["observ",{"_index":393,"title":{},"name":{},"text":{"4":{},"37":{}},"component":{}}],["obsolet",{"_index":1876,"title":{},"name":{},"text":{"29":{}},"component":{}}],["obtain",{"_index":799,"title":{},"name":{},"text":{"6":{},"17":{},"30":{},"43":{},"44":{}},"component":{}}],["obvious",{"_index":2114,"title":{},"name":{},"text":{"39":{}},"component":{}}],["occupi",{"_index":2115,"title":{},"name":{},"text":{"39":{}},"component":{}}],["oct",{"_index":1635,"title":{"21-7":{}},"name":{},"text":{},"component":{}}],["offer",{"_index":1796,"title":{},"name":{},"text":{"25":{},"27":{}},"component":{}}],["offici",{"_index":1374,"title":{},"name":{},"text":{"19":{}},"component":{}}],["offset",{"_index":1936,"title":{},"name":{},"text":{"31":{},"34":{}},"component":{}}],["old",{"_index":1170,"title":{},"name":{},"text":{"14":{},"19":{},"20":{},"21":{}},"component":{}}],["old/new",{"_index":1571,"title":{},"name":{},"text":{"20":{}},"component":{}}],["old_declared_class",{"_index":1597,"title":{},"name":{},"text":{"20":{}},"component":{}}],["old_root",{"_index":773,"title":{},"name":{},"text":{"6":{}},"component":{}}],["older",{"_index":1491,"title":{},"name":{},"text":{"20":{}},"component":{}}],["omit",{"_index":2355,"title":{},"name":{},"text":{"44":{}},"component":{}}],["on",{"_index":281,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"10":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"25":{},"27":{},"34":{},"36":{},"37":{},"38":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["onc",{"_index":711,"title":{},"name":{},"text":{"6":{},"13":{},"15":{},"19":{},"20":{},"21":{},"26":{},"29":{},"36":{},"38":{},"42":{}},"component":{}}],["ongo",{"_index":1645,"title":{},"name":{},"text":{"21":{}},"component":{}}],["op",{"_index":1713,"title":{},"name":{},"text":{"21":{}},"component":{}}],["openzeppelin",{"_index":164,"title":{},"name":{},"text":{"3":{},"24":{},"44":{}},"component":{}}],["openzeppelin’",{"_index":143,"title":{},"name":{},"text":{"3":{}},"component":{}}],["oper",{"_index":10,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"7":{},"11":{},"12":{},"21":{},"25":{},"27":{},"36":{},"37":{},"42":{},"43":{},"44":{}},"component":{}}],["opinion",{"_index":973,"title":{},"name":{},"text":{"12":{}},"component":{}}],["opposit",{"_index":445,"title":{},"name":{},"text":{"4":{}},"component":{}}],["optim",{"_index":1341,"title":{},"name":{},"text":{"18":{},"19":{},"21":{},"45":{}},"component":{}}],["optimis",{"_index":1434,"title":{},"name":{},"text":{"19":{}},"component":{}}],["optimization.if",{"_index":2379,"title":{},"name":{},"text":{"45":{}},"component":{}}],["option",{"_index":70,"title":{"45":{},"19-18":{},"45-6":{}},"name":{"45":{}},"text":{"2":{},"6":{},"19":{},"44":{}},"component":{}}],["order",{"_index":114,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"9":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"30":{},"34":{},"37":{},"40":{},"42":{}},"component":{}}],["orient",{"_index":1951,"title":{},"name":{},"text":{"33":{}},"component":{}}],["origin",{"_index":554,"title":{},"name":{},"text":{"5":{},"14":{},"15":{},"20":{},"36":{},"39":{}},"component":{}}],["os",{"_index":36,"title":{},"name":{},"text":{"1":{},"13":{},"14":{},"16":{},"20":{},"36":{},"39":{}},"component":{}}],["os.path.dirnam",{"_index":1246,"title":{},"name":{},"text":{"16":{}},"component":{}}],["os.path.join",{"_index":1245,"title":{},"name":{},"text":{"16":{}},"component":{}}],["otherwis",{"_index":1009,"title":{},"name":{},"text":{"12":{},"13":{},"14":{},"20":{},"21":{},"25":{},"36":{},"41":{},"44":{}},"component":{}}],["out",{"_index":247,"title":{},"name":{},"text":{"4":{},"6":{},"17":{},"20":{}},"component":{}}],["outlin",{"_index":1785,"title":{},"name":{},"text":{"25":{}},"component":{}}],["output",{"_index":152,"title":{"45-16":{}},"name":{},"text":{"3":{},"4":{},"6":{},"7":{},"9":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"31":{},"34":{},"36":{},"40":{},"45":{}},"component":{}}],["output_array",{"_index":1943,"title":{},"name":{},"text":{"31":{}},"component":{}}],["output_builtin",{"_index":1883,"title":{},"name":{},"text":{"29":{}},"component":{}}],["outsid",{"_index":871,"title":{},"name":{},"text":{"8":{},"10":{}},"component":{}}],["over",{"_index":13,"title":{},"name":{},"text":{"1":{},"11":{},"15":{},"21":{},"25":{},"28":{},"30":{},"39":{},"40":{},"41":{}},"component":{}}],["overal",{"_index":2090,"title":{"39-12":{}},"name":{},"text":{},"component":{}}],["overflow",{"_index":479,"title":{},"name":{},"text":{"4":{}},"component":{}}],["overli",{"_index":219,"title":{},"name":{},"text":{"3":{},"44":{}},"component":{}}],["overrid",{"_index":207,"title":{},"name":{},"text":{"3":{},"21":{}},"component":{}}],["overview",{"_index":2088,"title":{"39-3":{}},"name":{},"text":{},"component":{}}],["own",{"_index":127,"title":{},"name":{},"text":{"3":{},"25":{}},"component":{}}],["ownabl",{"_index":817,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["ownable.cairo",{"_index":826,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ownable_abi.json",{"_index":828,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["ownable_class_hash",{"_index":829,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["ownable_class_hash.read",{"_index":902,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_class_hash.writ",{"_index":898,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_class_hash_",{"_index":897,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_compiled.json",{"_index":827,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ownable_contract",{"_index":893,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract.cairo",{"_index":912,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_address",{"_index":921,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_deploy",{"_index":896,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_deployed.emit",{"_index":909,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_deployer.cairo",{"_index":911,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_deployer_abi.json",{"_index":914,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_contract_deployer_compiled.json",{"_index":913,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ownable_deployer_class_hash",{"_index":915,"title":{},"name":{},"text":{"9":{}},"component":{}}],["owner",{"_index":809,"title":{},"name":{},"text":{"7":{},"9":{},"24":{},"27":{}},"component":{}}],["owner.read",{"_index":823,"title":{},"name":{},"text":{"7":{}},"component":{}}],["owner.writ",{"_index":820,"title":{},"name":{},"text":{"7":{}},"component":{}}],["owner_address",{"_index":819,"title":{},"name":{},"text":{"7":{},"9":{}},"component":{}}],["p",{"_index":1728,"title":{"23-5":{}},"name":{},"text":{"23":{},"31":{},"38":{},"40":{}},"component":{}}],["p1",{"_index":2211,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p2",{"_index":2212,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p3\\right]_x",{"_index":2213,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p=2^{251}+17\\cdot",{"_index":2190,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p]_x",{"_index":2219,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p_0",{"_index":2210,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p_1",{"_index":2215,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p_2",{"_index":2216,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p_3",{"_index":2217,"title":{},"name":{},"text":{"40":{}},"component":{}}],["p_l",{"_index":2328,"title":{},"name":{},"text":{"43":{}},"component":{}}],["p_r",{"_index":2331,"title":{},"name":{},"text":{"43":{}},"component":{}}],["pa",{"_index":1559,"title":{},"name":{},"text":{"20":{}},"component":{}}],["packag",{"_index":106,"title":{},"name":{},"text":{"3":{},"16":{},"44":{}},"component":{}}],["page",{"_index":534,"title":{},"name":{},"text":{"5":{},"12":{},"16":{}},"component":{}}],["paid",{"_index":1079,"title":{},"name":{},"text":{"13":{},"39":{},"41":{}},"component":{}}],["pair",{"_index":1019,"title":{},"name":{},"text":{"13":{},"14":{},"15":{},"20":{},"25":{},"34":{},"38":{}},"component":{}}],["paradigm",{"_index":1703,"title":{},"name":{},"text":{"21":{}},"component":{}}],["parallel",{"_index":1653,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["paramet",{"_index":862,"title":{},"name":{},"text":{"8":{},"23":{},"36":{},"37":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["parent",{"_index":746,"title":{},"name":{},"text":{"6":{},"28":{},"43":{}},"component":{}}],["parent_block_hash",{"_index":724,"title":{},"name":{},"text":{"6":{},"28":{}},"component":{}}],["pars",{"_index":856,"title":{},"name":{},"text":{"8":{}},"component":{}}],["part",{"_index":209,"title":{},"name":{},"text":{"3":{},"6":{},"12":{},"13":{},"17":{},"20":{},"21":{},"30":{},"32":{},"34":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["parti",{"_index":1769,"title":{},"name":{},"text":{"24":{},"37":{}},"component":{}}],["particular",{"_index":579,"title":{},"name":{},"text":{"5":{},"12":{},"20":{},"21":{},"24":{},"25":{},"37":{}},"component":{}}],["partiular",{"_index":1610,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pass",{"_index":203,"title":{"14-4":{},"14-5":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"10":{},"12":{},"13":{},"14":{},"29":{},"30":{},"36":{},"44":{}},"component":{}}],["passiv",{"_index":1774,"title":{},"name":{},"text":{"25":{}},"component":{}}],["past",{"_index":1839,"title":{},"name":{},"text":{"27":{}},"component":{}}],["path",{"_index":1243,"title":{},"name":{},"text":{"16":{},"17":{},"20":{},"43":{},"44":{},"45":{}},"component":{}}],["pathfind",{"_index":1367,"title":{"19":{}},"name":{},"text":{"19":{},"37":{}},"component":{}}],["pathfinder_getproof",{"_index":1399,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pathfinder_vers",{"_index":1368,"title":{},"name":{"19":{}},"text":{"19":{}},"component":{}}],["pathfinder’",{"_index":2070,"title":{},"name":{},"text":{"37":{}},"component":{}}],["patricia",{"_index":1548,"title":{"43-2":{}},"name":{},"text":{"20":{},"28":{},"43":{}},"component":{}}],["pattern",{"_index":227,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["pay",{"_index":78,"title":{},"name":{},"text":{"2":{},"3":{},"13":{},"21":{},"25":{},"30":{},"39":{},"41":{}},"component":{}}],["payabl",{"_index":2266,"title":{},"name":{},"text":{"41":{}},"component":{}}],["payableamount",{"_index":1098,"title":{},"name":{},"text":{"13":{}},"component":{}}],["payload",{"_index":662,"title":{},"name":{},"text":{"6":{},"13":{},"36":{},"39":{},"41":{}},"component":{}}],["payload.length",{"_index":2241,"title":{},"name":{},"text":{"41":{}},"component":{}}],["payload=message_payload",{"_index":1067,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["payload[0",{"_index":2030,"title":{},"name":{},"text":{"36":{}},"component":{}}],["payload[1",{"_index":2031,"title":{},"name":{},"text":{"36":{}},"component":{}}],["payload_s",{"_index":2025,"title":{},"name":{},"text":{"36":{}},"component":{}}],["payload_size=1",{"_index":2232,"title":{},"name":{},"text":{"41":{}},"component":{}}],["payload_size=3",{"_index":1066,"title":{},"name":{},"text":{"13":{}},"component":{}}],["paymast",{"_index":1798,"title":{},"name":{},"text":{"25":{}},"component":{}}],["payment",{"_index":1809,"title":{"26-1":{}},"name":{},"text":{"27":{}},"component":{}}],["pb",{"_index":1563,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pc=0:129",{"_index":1304,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:155",{"_index":1302,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:28",{"_index":1326,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:32:\\ngot",{"_index":1314,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:38:\\ngot",{"_index":1290,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:453",{"_index":1316,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:484",{"_index":1296,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:494",{"_index":1315,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:510",{"_index":1317,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:522",{"_index":1295,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:590",{"_index":1297,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:6",{"_index":1329,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pc=0:6:\\ngot",{"_index":1301,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pedersen",{"_index":837,"title":{"40-3":{}},"name":{},"text":{"8":{},"12":{},"20":{},"28":{},"30":{},"32":{},"34":{},"35":{},"38":{},"39":{},"40":{},"41":{},"43":{}},"component":{}}],["pedersen_builtin",{"_index":652,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["pedersen_hash",{"_index":1222,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pedersen_ptr",{"_index":360,"title":{},"name":{},"text":{"4":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{}},"component":{}}],["pend",{"_index":753,"title":{"29-4":{},"29-8":{}},"name":{},"text":{"6":{},"10":{},"12":{},"19":{},"21":{},"29":{},"44":{}},"component":{}}],["per",{"_index":332,"title":{},"name":{},"text":{"4":{},"18":{},"21":{},"39":{}},"component":{}}],["perform",{"_index":585,"title":{},"name":{},"text":{"5":{},"18":{},"19":{},"20":{},"21":{},"27":{},"39":{},"42":{},"44":{}},"component":{}}],["permissionless",{"_index":3,"title":{},"name":{},"text":{"1":{},"11":{},"42":{}},"component":{}}],["persist",{"_index":1972,"title":{},"name":{},"text":{"35":{}},"component":{}}],["person",{"_index":972,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pertin",{"_index":1474,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pessimist",{"_index":2162,"title":{},"name":{},"text":{"39":{}},"component":{}}],["phase",{"_index":1875,"title":{},"name":{},"text":{"29":{}},"component":{}}],["phone",{"_index":1807,"title":{},"name":{},"text":{"25":{}},"component":{}}],["phone’",{"_index":1805,"title":{},"name":{},"text":{"25":{}},"component":{}}],["phrase",{"_index":1782,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pip",{"_index":1239,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pipelin",{"_index":1649,"title":{},"name":{},"text":{"21":{}},"component":{}}],["place",{"_index":1338,"title":{},"name":{},"text":{"18":{},"20":{},"23":{},"27":{},"43":{},"44":{}},"component":{}}],["placehold",{"_index":1868,"title":{},"name":{},"text":{"28":{},"30":{},"33":{}},"component":{}}],["plan",{"_index":2295,"title":{},"name":{},"text":{"42":{}},"component":{}}],["play",{"_index":296,"title":{},"name":{},"text":{"4":{},"13":{}},"component":{}}],["pleas",{"_index":1366,"title":{"19-28":{}},"name":{},"text":{"19":{},"21":{}},"component":{}}],["point",{"_index":804,"title":{"8":{}},"name":{},"text":{"6":{},"8":{},"14":{},"21":{},"27":{},"30":{},"31":{},"33":{},"34":{},"35":{},"38":{},"40":{},"41":{},"43":{}},"component":{}}],["pointer",{"_index":883,"title":{},"name":{},"text":{"9":{},"13":{},"14":{},"36":{}},"component":{}}],["points[1].i",{"_index":1156,"title":{},"name":{},"text":{"14":{}},"component":{}}],["points[1].x",{"_index":1154,"title":{},"name":{},"text":{"14":{}},"component":{}}],["points_len",{"_index":1938,"title":{},"name":{},"text":{"31":{}},"component":{}}],["pool",{"_index":282,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pool_bal",{"_index":349,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pool_balance.read",{"_index":417,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pool_balance.writ",{"_index":415,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pool_upper_bound",{"_index":472,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pool’",{"_index":441,"title":{},"name":{},"text":{"4":{}},"component":{}}],["portion",{"_index":2099,"title":{},"name":{},"text":{"39":{}},"component":{}}],["poseidon",{"_index":1485,"title":{"20-22":{}},"name":{},"text":{"20":{}},"component":{}}],["posit",{"_index":1060,"title":{"45-4":{}},"name":{},"text":{"13":{},"17":{}},"component":{}}],["possess",{"_index":1773,"title":{},"name":{},"text":{"25":{}},"component":{}}],["possibl",{"_index":578,"title":{},"name":{},"text":{"5":{},"12":{},"19":{},"27":{},"29":{},"30":{},"36":{},"38":{},"39":{},"44":{}},"component":{}}],["post",{"_index":1592,"title":{},"name":{},"text":{"20":{},"21":{}},"component":{}}],["potenti",{"_index":1508,"title":{},"name":{},"text":{"20":{},"39":{},"41":{}},"component":{}}],["power",{"_index":277,"title":{},"name":{},"text":{"4":{}},"component":{}}],["practic",{"_index":1780,"title":{},"name":{},"text":{"25":{},"27":{}},"component":{}}],["pre",{"_index":1471,"title":{},"name":{},"text":{"19":{},"39":{}},"component":{}}],["precis",{"_index":2267,"title":{},"name":{},"text":{"41":{}},"component":{}}],["predefin",{"_index":353,"title":{},"name":{},"text":{"4":{}},"component":{}}],["predetermin",{"_index":2121,"title":{},"name":{},"text":{"39":{}},"component":{}}],["prefix",{"_index":1696,"title":{},"name":{},"text":{"21":{},"30":{},"32":{},"41":{}},"component":{}}],["prepar",{"_index":1012,"title":{"13-5":{}},"name":{},"text":{},"component":{}}],["prepend",{"_index":586,"title":{},"name":{},"text":{"5":{}},"component":{}}],["preprocess",{"_index":2373,"title":{"45-15":{}},"name":{},"text":{"45":{}},"component":{}}],["preprocessor",{"_index":2383,"title":{},"name":{},"text":{"45":{}},"component":{}}],["present",{"_index":696,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"39":{}},"component":{}}],["prevent",{"_index":478,"title":{},"name":{},"text":{"4":{},"14":{},"15":{},"19":{},"20":{},"41":{}},"component":{}}],["previou",{"_index":271,"title":{},"name":{},"text":{"4":{},"12":{},"13":{},"19":{},"20":{},"21":{},"27":{},"35":{},"37":{},"41":{},"42":{},"43":{}},"component":{}}],["previous",{"_index":68,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"20":{},"24":{},"27":{},"33":{},"36":{}},"component":{}}],["previous\\_lin",{"_index":1965,"title":{},"name":{},"text":{"34":{}},"component":{}}],["price",{"_index":189,"title":{},"name":{},"text":{"3":{},"6":{},"13":{},"27":{},"39":{}},"component":{}}],["primari",{"_index":420,"title":{},"name":{},"text":{"4":{},"19":{}},"component":{}}],["prime",{"_index":2371,"title":{"45-13":{}},"name":{},"text":{"45":{}},"component":{}}],["primit",{"_index":789,"title":{},"name":{},"text":{"6":{},"12":{}},"component":{}}],["print",{"_index":795,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"15":{},"17":{}},"component":{}}],["prior",{"_index":747,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["priv_key=private_key",{"_index":1229,"title":{},"name":{},"text":{"15":{}},"component":{}}],["privat",{"_index":212,"title":{},"name":{},"text":{"3":{},"15":{},"17":{},"25":{},"44":{}},"component":{}}],["private_key",{"_index":1224,"title":{},"name":{},"text":{"15":{}},"component":{}}],["private_to_stark_key",{"_index":1223,"title":{},"name":{},"text":{"15":{}},"component":{}}],["probabl",{"_index":969,"title":{},"name":{},"text":{"12":{},"13":{},"29":{}},"component":{}}],["problem",{"_index":1567,"title":{},"name":{},"text":{"20":{}},"component":{}}],["proce",{"_index":419,"title":{},"name":{},"text":{"4":{},"20":{},"26":{},"37":{},"43":{}},"component":{}}],["process",{"_index":857,"title":{},"name":{},"text":{"8":{},"13":{},"20":{},"25":{},"27":{},"34":{},"42":{}},"component":{}}],["produc",{"_index":705,"title":{},"name":{},"text":{"6":{},"20":{},"27":{},"28":{}},"component":{}}],["product",{"_index":289,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["program",{"_index":944,"title":{"12-2":{}},"name":{},"text":{"12":{},"25":{},"33":{},"34":{},"36":{},"39":{},"45":{}},"component":{}}],["programm",{"_index":1791,"title":{},"name":{},"text":{"25":{}},"component":{}}],["programmat",{"_index":341,"title":{},"name":{},"text":{"4":{}},"component":{}}],["program’",{"_index":2380,"title":{},"name":{},"text":{"45":{}},"component":{}}],["progress",{"_index":1094,"title":{},"name":{},"text":{"13":{}},"component":{}}],["promin",{"_index":835,"title":{},"name":{},"text":{"8":{}},"component":{}}],["proof",{"_index":32,"title":{},"name":{},"text":{"1":{},"19":{},"30":{},"35":{},"37":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["proof’",{"_index":2026,"title":{},"name":{},"text":{"36":{}},"component":{}}],["propag",{"_index":1877,"title":{},"name":{},"text":{"29":{}},"component":{}}],["properli",{"_index":1415,"title":{},"name":{},"text":{"19":{}},"component":{}}],["properti",{"_index":1013,"title":{},"name":{},"text":{"13":{},"27":{}},"component":{}}],["propos",{"_index":1784,"title":{},"name":{},"text":{"25":{}},"component":{}}],["protect",{"_index":1752,"title":{"24-1":{}},"name":{},"text":{"24":{},"25":{},"27":{},"41":{},"43":{}},"component":{}}],["protocol",{"_index":1022,"title":{},"name":{},"text":{"13":{},"21":{},"24":{},"25":{},"27":{},"28":{},"30":{},"41":{},"43":{}},"component":{}}],["protocol_vers",{"_index":1854,"title":{},"name":{},"text":{"28":{}},"component":{}}],["prove",{"_index":980,"title":{"42-5":{},"42-8":{}},"name":{},"text":{"12":{},"20":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["proven",{"_index":1502,"title":{},"name":{},"text":{"20":{}},"component":{}}],["prover",{"_index":1690,"title":{},"name":{},"text":{"21":{},"26":{},"39":{},"42":{}},"component":{}}],["provid",{"_index":97,"title":{"3-3":{}},"name":{},"text":{"3":{},"4":{},"16":{},"19":{},"22":{},"24":{},"36":{},"37":{},"43":{},"44":{}},"component":{}}],["proxi",{"_index":226,"title":{"19-20":{}},"name":{},"text":{"3":{},"5":{},"8":{},"19":{},"20":{}},"component":{}}],["proxy_contract",{"_index":559,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["proxy_contract.cairo",{"_index":555,"title":{},"name":{},"text":{"5":{}},"component":{}}],["proxy_contract_abi.json",{"_index":561,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pscott",{"_index":1396,"title":{},"name":{},"text":{"19":{}},"component":{}}],["public",{"_index":156,"title":{},"name":{},"text":{"3":{},"7":{},"15":{},"17":{},"25":{},"30":{}},"component":{}}],["public_key",{"_index":1227,"title":{},"name":{},"text":{"15":{}},"component":{}}],["public_key=us",{"_index":1206,"title":{},"name":{},"text":{"15":{}},"component":{}}],["publish",{"_index":1578,"title":{},"name":{},"text":{"20":{},"27":{}},"component":{}}],["pull",{"_index":1604,"title":{},"name":{},"text":{"20":{}},"component":{}}],["purpos",{"_index":224,"title":{},"name":{},"text":{"3":{},"4":{},"19":{},"20":{},"24":{},"27":{},"36":{},"44":{}},"component":{}}],["put",{"_index":1676,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pytest",{"_index":1237,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pytest.mark.asyncio",{"_index":1251,"title":{},"name":{},"text":{"16":{}},"component":{}}],["python",{"_index":791,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"13":{},"15":{},"16":{},"17":{},"30":{},"37":{}},"component":{}}],["python'",{"_index":1248,"title":{},"name":{},"text":{"16":{}},"component":{}}],["python3.7",{"_index":1694,"title":{},"name":{},"text":{"21":{}},"component":{}}],["python3.9",{"_index":1695,"title":{},"name":{},"text":{"21":{}},"component":{}}],["q_1",{"_index":2168,"title":{},"name":{},"text":{"39":{}},"component":{}}],["q_i",{"_index":2180,"title":{},"name":{},"text":{"39":{}},"component":{}}],["q_t",{"_index":2169,"title":{},"name":{},"text":{"39":{}},"component":{}}],["queri",{"_index":513,"title":{"6-15":{},"12-8":{}},"name":{},"text":{"4":{},"6":{},"9":{},"10":{},"12":{},"17":{},"19":{},"29":{},"44":{}},"component":{}}],["question",{"_index":987,"title":{},"name":{},"text":{"12":{},"27":{}},"component":{}}],["quit",{"_index":1460,"title":{},"name":{},"text":{"19":{}},"component":{}}],["r",{"_index":1684,"title":{},"name":{},"text":{"21":{},"43":{}},"component":{}}],["r=h",{"_index":2337,"title":{},"name":{},"text":{"43":{}},"component":{}}],["rais",{"_index":2017,"title":{},"name":{},"text":{"36":{},"39":{}},"component":{}}],["ran",{"_index":978,"title":{},"name":{},"text":{"12":{},"26":{}},"component":{}}],["random",{"_index":1219,"title":{},"name":{},"text":{"15":{},"44":{}},"component":{}}],["rang",{"_index":1120,"title":{"40-1":{}},"name":{},"text":{"14":{},"17":{},"19":{},"23":{},"35":{},"39":{}},"component":{}}],["range.read",{"_index":1123,"title":{},"name":{},"text":{"14":{}},"component":{}}],["range.writ",{"_index":1124,"title":{},"name":{},"text":{"14":{}},"component":{}}],["range_check",{"_index":838,"title":{},"name":{},"text":{"8":{},"14":{}},"component":{}}],["range_check_builtin",{"_index":653,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["range_check_ptr",{"_index":362,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{}},"component":{}}],["ratio",{"_index":494,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{}}],["raw_input",{"_index":845,"title":{},"name":{},"text":{"8":{}},"component":{}}],["raw_output",{"_index":846,"title":{},"name":{},"text":{"8":{}},"component":{}}],["re",{"_index":542,"title":{},"name":{},"text":{"5":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"21":{},"31":{},"35":{},"41":{}},"component":{}}],["reach",{"_index":757,"title":{},"name":{},"text":{"6":{},"39":{}},"component":{}}],["read",{"_index":273,"title":{},"name":{},"text":{"4":{},"6":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"35":{},"36":{},"44":{}},"component":{}}],["reader",{"_index":387,"title":{},"name":{},"text":{"4":{}},"component":{}}],["readi",{"_index":807,"title":{},"name":{},"text":{"7":{}},"component":{}}],["readm",{"_index":1385,"title":{},"name":{},"text":{"19":{}},"component":{}}],["real",{"_index":1048,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["realiz",{"_index":2120,"title":{},"name":{},"text":{"39":{}},"component":{}}],["realli",{"_index":1070,"title":{},"name":{},"text":{"13":{}},"component":{}}],["reason",{"_index":642,"title":{"17-6":{}},"name":{},"text":{"6":{},"12":{},"17":{},"29":{},"41":{},"43":{}},"component":{}}],["recal",{"_index":2105,"title":{},"name":{},"text":{"39":{}},"component":{}}],["receipt",{"_index":644,"title":{"29-9":{}},"name":{},"text":{"6":{},"9":{},"29":{},"38":{},"44":{}},"component":{}}],["receiv",{"_index":439,"title":{"13-7":{},"29-3":{}},"name":{},"text":{"4":{},"12":{},"13":{},"20":{},"26":{},"29":{},"36":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["recent",{"_index":51,"title":{},"name":{},"text":{"2":{},"17":{},"39":{}},"component":{}}],["recepi",{"_index":2287,"title":{},"name":{},"text":{"42":{}},"component":{}}],["recipi",{"_index":2226,"title":{},"name":{},"text":{"41":{},"42":{},"44":{}},"component":{}}],["recipient’",{"_index":2027,"title":{},"name":{},"text":{"36":{}},"component":{}}],["recognit",{"_index":1804,"title":{},"name":{},"text":{"25":{}},"component":{}}],["recommend",{"_index":512,"title":{},"name":{},"text":{"4":{},"13":{},"19":{},"36":{}},"component":{}}],["recompil",{"_index":592,"title":{},"name":{},"text":{"5":{}},"component":{}}],["reconstruct",{"_index":1323,"title":{},"name":{},"text":{"17":{},"37":{}},"component":{}}],["record",{"_index":2244,"title":{},"name":{},"text":{"41":{},"42":{}},"component":{}}],["recoveri",{"_index":1800,"title":{},"name":{},"text":{"25":{}},"component":{}}],["recurs",{"_index":1687,"title":{},"name":{},"text":{"21":{},"43":{}},"component":{}}],["redeploy",{"_index":593,"title":{},"name":{},"text":{"5":{}},"component":{}}],["reduc",{"_index":1707,"title":{},"name":{},"text":{"21":{},"42":{}},"component":{}}],["ref_block_explor",{"_index":1719,"title":{},"name":{"22":{}},"text":{},"component":{}}],["refer",{"_index":267,"title":{"45":{}},"name":{},"text":{"4":{},"6":{},"12":{},"20":{},"24":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["refund",{"_index":2164,"title":{},"name":{},"text":{"39":{}},"component":{}}],["regard",{"_index":1609,"title":{},"name":{},"text":{"20":{},"21":{}},"component":{}}],["regardless",{"_index":2288,"title":{},"name":{},"text":{"42":{}},"component":{}}],["regenesi",{"_index":1489,"title":{},"name":{},"text":{"20":{}},"component":{}}],["regular",{"_index":338,"title":{},"name":{},"text":{"4":{},"5":{},"12":{},"18":{},"20":{},"41":{}},"component":{}}],["reject",{"_index":1005,"title":{"29-5":{}},"name":{},"text":{"12":{},"17":{},"21":{},"25":{},"29":{},"44":{}},"component":{}}],["rel",{"_index":1657,"title":{},"name":{},"text":{"21":{},"39":{},"44":{}},"component":{}}],["relat",{"_index":2185,"title":{},"name":{},"text":{"39":{}},"component":{}}],["releas",{"_index":52,"title":{"19-25":{},"21-4":{},"21-6":{},"21-8":{},"21-10":{},"21-12":{},"21-14":{}},"name":{},"text":{"2":{},"4":{},"12":{},"19":{},"20":{},"21":{},"30":{}},"component":{}}],["relev",{"_index":322,"title":{},"name":{},"text":{"4":{},"6":{},"8":{},"17":{},"20":{},"41":{},"42":{},"44":{}},"component":{}}],["reli",{"_index":1453,"title":{},"name":{},"text":{"19":{}},"component":{}}],["relianc",{"_index":28,"title":{},"name":{},"text":{"1":{}},"component":{}}],["remain",{"_index":1576,"title":{},"name":{},"text":{"20":{},"27":{},"39":{}},"component":{}}],["remaind",{"_index":467,"title":{},"name":{},"text":{"4":{}},"component":{}}],["rememb",{"_index":1091,"title":{},"name":{},"text":{"13":{}},"component":{}}],["remov",{"_index":49,"title":{"2":{},"2-2":{},"20-17":{}},"name":{},"text":{"2":{},"5":{},"6":{},"12":{},"13":{},"19":{},"20":{},"21":{},"30":{}},"component":{}}],["renam",{"_index":1442,"title":{},"name":{},"text":{"19":{},"20":{},"21":{}},"component":{}}],["render",{"_index":2263,"title":{},"name":{},"text":{"41":{}},"component":{}}],["repeatedli",{"_index":2262,"title":{},"name":{},"text":{"41":{}},"component":{}}],["replac",{"_index":337,"title":{"20-8":{},"20-10":{},"20-21":{}},"name":{},"text":{"4":{},"5":{},"7":{},"9":{},"10":{},"12":{},"15":{},"20":{},"21":{},"28":{},"36":{}},"component":{}}],["replace_class",{"_index":1527,"title":{},"name":{},"text":{"20":{}},"component":{}}],["replaced_class",{"_index":1594,"title":{},"name":{},"text":{"20":{}},"component":{}}],["replay",{"_index":1173,"title":{"24-1":{}},"name":{},"text":{"14":{},"15":{},"24":{},"25":{},"43":{}},"component":{}}],["repo",{"_index":1950,"title":{},"name":{},"text":{"32":{},"37":{}},"component":{}}],["repositori",{"_index":1376,"title":{},"name":{},"text":{"19":{}},"component":{}}],["repres",{"_index":132,"title":{},"name":{},"text":{"3":{},"6":{},"12":{},"15":{},"17":{},"20":{},"30":{},"34":{},"39":{},"42":{},"43":{},"44":{}},"component":{}}],["represent",{"_index":1500,"title":{},"name":{},"text":{"20":{},"23":{},"25":{},"31":{}},"component":{}}],["reproduc",{"_index":2342,"title":{},"name":{},"text":{"43":{}},"component":{}}],["request",{"_index":428,"title":{},"name":{},"text":{"4":{},"8":{},"13":{},"20":{},"36":{},"42":{},"44":{}},"component":{}}],["requir",{"_index":165,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"12":{},"14":{},"17":{},"19":{},"20":{},"25":{},"27":{},"36":{},"39":{},"44":{}},"component":{}}],["res=point",{"_index":1152,"title":{},"name":{},"text":{"14":{}},"component":{}}],["res=r",{"_index":552,"title":{},"name":{},"text":{"5":{},"12":{},"17":{}},"component":{}}],["resembl",{"_index":153,"title":{},"name":{},"text":{"3":{},"6":{},"10":{},"13":{}},"component":{}}],["reset",{"_index":999,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["resid",{"_index":2276,"title":{},"name":{},"text":{"42":{}},"component":{}}],["resolv",{"_index":2382,"title":{},"name":{},"text":{"45":{}},"component":{}}],["resourc",{"_index":647,"title":{},"name":{},"text":{"6":{},"24":{},"27":{},"29":{},"39":{}},"component":{}}],["respect",{"_index":1881,"title":{},"name":{},"text":{"29":{},"30":{},"35":{},"43":{}},"component":{}}],["respons",{"_index":514,"title":{},"name":{},"text":{"4":{},"20":{},"29":{},"44":{}},"component":{}}],["rest",{"_index":861,"title":{},"name":{},"text":{"8":{}},"component":{}}],["restrict",{"_index":1182,"title":{},"name":{},"text":{"14":{},"20":{},"27":{}},"component":{}}],["result",{"_index":633,"title":{},"name":{},"text":{"6":{},"9":{},"10":{},"12":{},"13":{},"14":{},"16":{},"19":{},"20":{},"21":{},"25":{},"27":{},"34":{},"41":{},"43":{}},"component":{}}],["retdata",{"_index":849,"title":{},"name":{},"text":{"8":{},"36":{}},"component":{}}],["retdata=retdata",{"_index":855,"title":{},"name":{},"text":{"8":{}},"component":{}}],["retdata_s",{"_index":848,"title":{},"name":{},"text":{"8":{},"36":{}},"component":{}}],["retdata_size=retdata_s",{"_index":854,"title":{},"name":{},"text":{"8":{}},"component":{}}],["retriev",{"_index":376,"title":{"14-6":{},"17-6":{}},"name":{},"text":{"4":{},"6":{},"14":{},"17":{},"25":{}},"component":{}}],["return",{"_index":374,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"26":{},"35":{},"36":{},"44":{}},"component":{}}],["revert",{"_index":1210,"title":{"17-6":{},"27-5":{}},"name":{},"text":{"15":{},"17":{},"24":{},"27":{}},"component":{}}],["review",{"_index":240,"title":{},"name":{},"text":{"4":{},"6":{},"39":{}},"component":{}}],["revis",{"_index":1343,"title":{},"name":{},"text":{"18":{}},"component":{}}],["richer",{"_index":1759,"title":{},"name":{},"text":{"24":{}},"component":{}}],["right",{"_index":2182,"title":{},"name":{},"text":{"39":{},"43":{}},"component":{}}],["right\\neq",{"_index":2336,"title":{},"name":{},"text":{"43":{}},"component":{}}],["rightarrow",{"_index":2192,"title":{},"name":{},"text":{"40":{}},"component":{}}],["rise",{"_index":1823,"title":{},"name":{},"text":{"27":{}},"component":{}}],["risk",{"_index":2256,"title":{},"name":{},"text":{"41":{},"42":{}},"component":{}}],["roadmap",{"_index":1654,"title":{},"name":{},"text":{"21":{}},"component":{}}],["role",{"_index":297,"title":{},"name":{},"text":{"4":{},"20":{},"24":{}},"component":{}}],["rollup",{"_index":6,"title":{},"name":{},"text":{"1":{},"11":{},"37":{}},"component":{}}],["root",{"_index":748,"title":{},"name":{},"text":{"6":{},"19":{},"28":{},"43":{}},"component":{}}],["roughli",{"_index":1948,"title":{},"name":{},"text":{"32":{},"35":{},"39":{}},"component":{}}],["rout",{"_index":1462,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["rpc",{"_index":1364,"title":{"19-26":{},"20-16":{}},"name":{},"text":{"19":{},"20":{}},"component":{}}],["rpc/pathfind",{"_index":1432,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rpc/pathfinder/v0.1",{"_index":1458,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rpc/pathfinder/v0.1/pathfinder_getproof",{"_index":1403,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rpc/v0.1",{"_index":1464,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rpc/v0.2",{"_index":1466,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rpc/v0.2/pathfinder_getproof",{"_index":1404,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rule",{"_index":2320,"title":{},"name":{},"text":{"43":{}},"component":{}}],["run",{"_index":149,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"10":{},"12":{},"13":{},"16":{},"17":{},"19":{},"20":{},"28":{},"34":{}},"component":{}}],["rust",{"_index":1413,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{}}],["s",{"_index":2305,"title":{},"name":{},"text":{"43":{}},"component":{}}],["safe",{"_index":1371,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["safest",{"_index":29,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sake",{"_index":1192,"title":{},"name":{},"text":{"15":{},"17":{},"39":{}},"component":{}}],["salt",{"_index":880,"title":{},"name":{},"text":{"9":{},"32":{},"36":{},"44":{}},"component":{}}],["salt.read",{"_index":901,"title":{},"name":{},"text":{"9":{}},"component":{}}],["salt.writ",{"_index":907,"title":{},"name":{},"text":{"9":{}},"component":{}}],["same",{"_index":581,"title":{},"name":{},"text":{"5":{},"6":{},"8":{},"9":{},"20":{},"21":{},"36":{},"37":{},"39":{},"41":{},"44":{}},"component":{}}],["sampl",{"_index":278,"title":{},"name":{},"text":{"4":{}},"component":{}}],["save",{"_index":825,"title":{},"name":{},"text":{"7":{},"9":{},"10":{},"13":{},"15":{},"17":{},"27":{}},"component":{}}],["saw",{"_index":787,"title":{},"name":{},"text":{"6":{}},"component":{}}],["scalabl",{"_index":30,"title":{},"name":{},"text":{"1":{},"4":{}},"component":{}}],["scalar",{"_index":1714,"title":{},"name":{},"text":{"21":{}},"component":{}}],["scale",{"_index":19,"title":{},"name":{},"text":{"1":{},"11":{}},"component":{}}],["scenario",{"_index":2250,"title":{},"name":{},"text":{"41":{}},"component":{}}],["scheme",{"_index":137,"title":{},"name":{},"text":{"3":{},"20":{},"25":{},"27":{},"30":{},"43":{}},"component":{}}],["scope",{"_index":252,"title":{},"name":{},"text":{"4":{},"20":{},"36":{}},"component":{}}],["script",{"_index":1673,"title":{},"name":{},"text":{"21":{},"37":{}},"component":{}}],["seamlessli",{"_index":248,"title":{},"name":{},"text":{"4":{}},"component":{}}],["second",{"_index":409,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"13":{},"14":{},"20":{},"25":{}},"component":{}}],["secp",{"_index":1688,"title":{},"name":{},"text":{"21":{}},"component":{}}],["section",{"_index":502,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"10":{},"12":{},"13":{},"15":{},"19":{},"20":{},"21":{},"26":{},"29":{},"36":{},"39":{},"44":{}},"component":{}}],["secur",{"_index":25,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"11":{},"12":{},"15":{},"25":{},"44":{}},"component":{}}],["securityqq",{"_index":1386,"title":{},"name":{},"text":{"19":{}},"component":{}}],["see",{"_index":79,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"26":{},"29":{},"30":{},"32":{},"34":{},"36":{},"38":{},"39":{},"41":{},"42":{},"45":{}},"component":{}}],["seed",{"_index":1781,"title":{},"name":{},"text":{"25":{},"44":{}},"component":{}}],["seem",{"_index":966,"title":{},"name":{},"text":{"12":{}},"component":{}}],["seen",{"_index":877,"title":{},"name":{},"text":{"9":{},"24":{}},"component":{}}],["segment",{"_index":1989,"title":{},"name":{},"text":{"35":{}},"component":{}}],["select",{"_index":1361,"title":{"19-19":{}},"name":{},"text":{"19":{},"25":{},"26":{}},"component":{}}],["selector",{"_index":676,"title":{},"name":{},"text":{"6":{},"8":{},"13":{},"21":{},"30":{},"34":{},"36":{},"41":{}},"component":{}}],["semant",{"_index":813,"title":{"20-9":{}},"name":{},"text":{"7":{},"33":{}},"component":{}}],["send",{"_index":69,"title":{"13-6":{}},"name":{},"text":{"2":{},"13":{},"20":{},"21":{},"25":{},"27":{},"36":{},"37":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["send_messag",{"_index":1028,"title":{},"name":{},"text":{"13":{}},"component":{}}],["send_message_to_l1",{"_index":1023,"title":{"36-12":{}},"name":{},"text":{"13":{},"36":{},"39":{},"41":{}},"component":{}}],["send_message_to_l1{syscall_ptr",{"_index":2024,"title":{},"name":{},"text":{"36":{}},"component":{}}],["sender",{"_index":1107,"title":{},"name":{},"text":{"13":{},"30":{},"36":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["sender_address",{"_index":1534,"title":{},"name":{},"text":{"20":{},"30":{}},"component":{}}],["sendmessagetol2",{"_index":1078,"title":{},"name":{},"text":{"13":{},"41":{}},"component":{}}],["sens",{"_index":1074,"title":{},"name":{},"text":{"13":{}},"component":{}}],["sent",{"_index":192,"title":{},"name":{},"text":{"3":{},"6":{},"12":{},"13":{},"20":{},"21":{},"24":{},"26":{},"29":{},"30":{},"37":{},"39":{},"41":{},"43":{}},"component":{}}],["separ",{"_index":989,"title":{},"name":{},"text":{"12":{},"20":{},"21":{},"27":{},"33":{},"38":{},"39":{},"45":{}},"component":{}}],["sept",{"_index":1637,"title":{"21-9":{}},"name":{},"text":{},"component":{}}],["sequenc",{"_index":640,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"14":{},"19":{},"20":{},"21":{},"23":{},"26":{},"27":{},"28":{},"29":{},"36":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["sequencer_address",{"_index":726,"title":{},"name":{},"text":{"6":{},"28":{},"36":{}},"component":{}}],["sequenti",{"_index":1669,"title":{},"name":{},"text":{"21":{},"24":{},"25":{}},"component":{}}],["serial",{"_index":1428,"title":{},"name":{},"text":{"19":{}},"component":{}}],["serv",{"_index":1400,"title":{},"name":{},"text":{"19":{},"24":{}},"component":{}}],["servic",{"_index":1817,"title":{},"name":{},"text":{"27":{},"36":{}},"component":{}}],["set",{"_index":93,"title":{"3":{},"3-2":{},"44-2":{},"44-3":{}},"name":{},"text":{"3":{},"4":{},"7":{},"9":{},"12":{},"13":{},"16":{},"17":{},"19":{},"20":{},"21":{},"27":{},"36":{},"43":{},"44":{}},"component":{}}],["set_pool_token_bal",{"_index":414,"title":{},"name":{},"text":{"4":{}},"component":{}}],["setup",{"_index":1426,"title":{},"name":{},"text":{"19":{}},"component":{}}],["sever",{"_index":1117,"title":{},"name":{},"text":{"14":{},"19":{},"20":{},"21":{},"37":{}},"component":{}}],["shall",{"_index":953,"title":{},"name":{},"text":{"12":{}},"component":{}}],["shift\\_point",{"_index":2214,"title":{},"name":{},"text":{"40":{}},"component":{}}],["short",{"_index":270,"title":{},"name":{},"text":{"4":{},"20":{},"27":{}},"component":{}}],["shortli",{"_index":1833,"title":{},"name":{},"text":{"27":{}},"component":{}}],["shouldn’t",{"_index":1035,"title":{},"name":{},"text":{"13":{}},"component":{}}],["show",{"_index":256,"title":{},"name":{},"text":{"4":{},"13":{},"37":{},"43":{},"45":{}},"component":{}}],["shown",{"_index":697,"title":{},"name":{},"text":{"6":{},"13":{}},"component":{}}],["sibl",{"_index":2339,"title":{},"name":{},"text":{"43":{}},"component":{}}],["sierra",{"_index":1498,"title":{},"name":{},"text":{"20":{}},"component":{}}],["sierra_program",{"_index":1622,"title":{},"name":{},"text":{"20":{}},"component":{}}],["sig",{"_index":1200,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sign",{"_index":1168,"title":{},"name":{},"text":{"14":{},"15":{},"19":{},"20":{},"21":{},"25":{},"44":{}},"component":{}}],["signatur",{"_index":136,"title":{"15":{},"30-11":{}},"name":{},"text":{"3":{},"6":{},"7":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"24":{},"25":{},"27":{},"28":{},"30":{},"36":{},"39":{},"44":{}},"component":{}}],["signature_abi.json",{"_index":1216,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signature_compiled.json",{"_index":1215,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signature_contract_class_hash",{"_index":1217,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signature_inform",{"_index":2357,"title":{},"name":{},"text":{"44":{}},"component":{}}],["signature_len",{"_index":1172,"title":{},"name":{},"text":{"14":{}},"component":{}}],["signature_r=sig[0",{"_index":1207,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signature_s=sig[1",{"_index":1208,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signature_verif",{"_index":1186,"title":{},"name":{"15":{}},"text":{},"component":{}}],["signature_verification.cairo",{"_index":1214,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signaturebuiltin",{"_index":1194,"title":{},"name":{},"text":{"15":{}},"component":{}}],["signed=fals",{"_index":1932,"title":{},"name":{},"text":{"30":{}},"component":{}}],["signific",{"_index":2312,"title":{},"name":{},"text":{"43":{}},"component":{}}],["significantli",{"_index":1184,"title":{},"name":{},"text":{"14":{}},"component":{}}],["similar",{"_index":573,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"13":{},"14":{},"19":{},"21":{},"24":{},"27":{}},"component":{}}],["similarli",{"_index":413,"title":{},"name":{},"text":{"4":{},"5":{},"8":{},"17":{},"20":{},"43":{}},"component":{}}],["simpl",{"_index":174,"title":{"4":{},"13-4":{}},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"19":{},"25":{},"27":{},"39":{}},"component":{}}],["simplest",{"_index":1512,"title":{},"name":{},"text":{"20":{}},"component":{}}],["simpli",{"_index":119,"title":{},"name":{},"text":{"3":{},"4":{},"6":{},"12":{},"17":{}},"component":{}}],["simplic",{"_index":307,"title":{},"name":{},"text":{"4":{},"39":{},"42":{}},"component":{}}],["simplifi",{"_index":1810,"title":{"26":{}},"name":{},"text":{},"component":{}}],["simplified_transaction_flow",{"_index":1811,"title":{},"name":{"26":{}},"text":{},"component":{}}],["simul",{"_index":181,"title":{"6-5":{}},"name":{},"text":{"3":{},"6":{},"13":{},"16":{}},"component":{}}],["singl",{"_index":956,"title":{},"name":{},"text":{"12":{},"14":{},"17":{},"27":{},"35":{},"37":{},"38":{},"39":{},"42":{},"43":{},"44":{}},"component":{}}],["size",{"_index":881,"title":{},"name":{},"text":{"9":{},"13":{},"18":{},"21":{},"31":{},"35":{},"36":{},"38":{},"39":{},"43":{},"45":{}},"component":{}}],["sketch",{"_index":2303,"title":{},"name":{},"text":{"43":{}},"component":{}}],["skip",{"_index":1007,"title":{},"name":{},"text":{"12":{},"13":{},"17":{},"20":{},"29":{},"39":{},"43":{}},"component":{}}],["skip_valid",{"_index":1599,"title":{},"name":{},"text":{"20":{}},"component":{}}],["slightli",{"_index":141,"title":{},"name":{},"text":{"3":{},"20":{}},"component":{}}],["slot",{"_index":1836,"title":{},"name":{},"text":{"27":{},"35":{},"39":{}},"component":{}}],["small",{"_index":171,"title":{},"name":{},"text":{"3":{}},"component":{}}],["smaller",{"_index":486,"title":{},"name":{},"text":{"4":{}},"component":{}}],["smart",{"_index":1488,"title":{},"name":{},"text":{"20":{},"24":{},"25":{},"27":{},"30":{},"36":{}},"component":{}}],["smooth",{"_index":1492,"title":{},"name":{},"text":{"20":{}},"component":{}}],["sn\\_keccak",{"_index":1903,"title":{},"name":{},"text":{"30":{},"40":{}},"component":{}}],["sn_goerli",{"_index":1934,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sn_goerli2",{"_index":1935,"title":{},"name":{},"text":{"30":{}},"component":{}}],["sn_keccak",{"_index":1980,"title":{},"name":{},"text":{"35":{}},"component":{}}],["sn_main",{"_index":1933,"title":{},"name":{},"text":{"30":{}},"component":{}}],["snippet",{"_index":1929,"title":{},"name":{},"text":{"30":{}},"component":{}}],["social",{"_index":1799,"title":{},"name":{},"text":{"25":{}},"component":{}}],["soft",{"_index":1429,"title":{},"name":{},"text":{"19":{}},"component":{}}],["solid",{"_index":574,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["solut",{"_index":1793,"title":{},"name":{},"text":{"25":{}},"component":{}}],["solv",{"_index":1658,"title":{},"name":{},"text":{"21":{}},"component":{}}],["somehow",{"_index":1834,"title":{},"name":{},"text":{"27":{}},"component":{}}],["someon",{"_index":1212,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sometim",{"_index":1455,"title":{},"name":{},"text":{"19":{},"25":{}},"component":{}}],["sound",{"_index":988,"title":{},"name":{},"text":{"12":{}},"component":{}}],["sourc",{"_index":715,"title":{},"name":{},"text":{"6":{},"16":{},"17":{},"45":{}},"component":{}}],["source=contract_fil",{"_index":1257,"title":{},"name":{},"text":{"16":{}},"component":{}}],["space",{"_index":1973,"title":{},"name":{},"text":{"35":{},"44":{}},"component":{}}],["spars",{"_index":2340,"title":{},"name":{},"text":{"43":{}},"component":{}}],["spec",{"_index":2108,"title":{},"name":{},"text":{"39":{}},"component":{}}],["specif",{"_index":243,"title":{"6-15":{},"43-3":{}},"name":{},"text":{"4":{},"6":{},"12":{},"17":{},"19":{},"20":{},"21":{},"27":{},"30":{},"39":{},"40":{},"42":{},"43":{},"44":{}},"component":{}}],["specifi",{"_index":194,"title":{},"name":{},"text":{"3":{},"4":{},"13":{},"19":{},"20":{},"21":{},"30":{},"39":{},"41":{},"43":{},"44":{}},"component":{}}],["split",{"_index":1596,"title":{},"name":{},"text":{"20":{},"21":{}},"component":{}}],["squeez",{"_index":2124,"title":{},"name":{},"text":{"39":{}},"component":{}}],["stabl",{"_index":1340,"title":{},"name":{},"text":{"18":{}},"component":{}}],["stage",{"_index":1812,"title":{},"name":{},"text":{"26":{},"37":{},"41":{},"44":{}},"component":{}}],["standalon",{"_index":1996,"title":{},"name":{},"text":{"36":{}},"component":{}}],["standard",{"_index":144,"title":{},"name":{},"text":{"3":{},"12":{},"20":{},"21":{},"24":{},"43":{},"45":{}},"component":{}}],["stark",{"_index":34,"title":{"40-4":{}},"name":{},"text":{"1":{},"15":{},"17":{},"21":{},"30":{},"36":{},"40":{},"42":{}},"component":{}}],["starkgat",{"_index":175,"title":{"42":{},"42-1":{},"42-10":{}},"name":{},"text":{"3":{},"42":{}},"component":{}}],["starknet",{"_index":2,"title":{"3":{},"12":{},"20":{},"22":{},"24":{},"38":{},"43":{},"45":{},"4-1":{},"12-5":{},"12-6":{},"19-27":{},"21-1":{},"21-2":{},"21-3":{},"21-5":{},"21-7":{},"21-9":{},"21-11":{},"21-13":{},"23-1":{},"23-2":{},"23-3":{},"40-2":{},"42-4":{},"44-2":{},"44-4":{},"44-5":{},"44-6":{},"44-7":{},"44-8":{},"44-9":{},"44-10":{},"44-11":{},"44-12":{},"44-13":{},"44-14":{},"44-15":{},"44-16":{}},"name":{"38":{},"43":{},"45":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"27":{},"28":{},"29":{},"30":{},"31":{},"32":{},"33":{},"34":{},"35":{},"36":{},"37":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["starknet.deploy",{"_index":1256,"title":{},"name":{},"text":{"16":{}},"component":{}}],["starknet.empti",{"_index":1255,"title":{},"name":{},"text":{"16":{}},"component":{}}],["starknet_cal",{"_index":1392,"title":{},"name":{},"text":{"19":{}},"component":{}}],["starknet_contract_address",{"_index":1945,"title":{},"name":{},"text":{"32":{}},"component":{}}],["starknet_estimatefe",{"_index":1393,"title":{},"name":{},"text":{"19":{}},"component":{}}],["starknet_ev",{"_index":1433,"title":{},"name":{},"text":{"19":{}},"component":{}}],["starknet_getev",{"_index":1408,"title":{},"name":{},"text":{"19":{},"36":{}},"component":{}}],["starknet_getstateupd",{"_index":1411,"title":{},"name":{},"text":{"19":{}},"component":{}}],["starknet_keccak",{"_index":1959,"title":{},"name":{},"text":{"34":{}},"component":{}}],["starknet_network",{"_index":120,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"13":{},"17":{},"44":{}},"component":{}}],["starknet_network=alpha",{"_index":123,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"44":{}},"component":{}}],["starknet_vers",{"_index":728,"title":{},"name":{},"text":{"6":{},"21":{}},"component":{}}],["starknet_wallet",{"_index":147,"title":{},"name":{},"text":{"3":{},"17":{}},"component":{}}],["starknet_wallet=starkware.starknet.wallets.open_zeppelin.openzeppelinaccount",{"_index":148,"title":{},"name":{},"text":{"3":{},"44":{}},"component":{}}],["starkneterrorcode.transaction_fail",{"_index":1289,"title":{},"name":{},"text":{"17":{}},"component":{}}],["starknet’",{"_index":27,"title":{},"name":{},"text":{"1":{},"6":{},"11":{},"12":{},"17":{},"21":{},"24":{},"27":{},"30":{},"36":{},"37":{},"39":{},"40":{},"42":{},"43":{}},"component":{}}],["starkscan",{"_index":1722,"title":{},"name":{},"text":{"22":{}},"component":{}}],["starkwar",{"_index":2273,"title":{},"name":{},"text":{"42":{}},"component":{}}],["starkware.cairo.common.alloc",{"_index":890,"title":{},"name":{},"text":{"9":{},"13":{}},"component":{}}],["starkware.cairo.common.bool",{"_index":892,"title":{},"name":{},"text":{"9":{}},"component":{}}],["starkware.cairo.common.cairo_builtin",{"_index":818,"title":{},"name":{},"text":{"7":{},"8":{},"9":{},"12":{},"13":{},"15":{}},"component":{}}],["starkware.cairo.common.hash",{"_index":1195,"title":{},"name":{},"text":{"15":{}},"component":{}}],["starkware.cairo.common.math",{"_index":1041,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["starkware.cairo.common.signatur",{"_index":1197,"title":{},"name":{},"text":{"15":{}},"component":{}}],["starkware.crypto.signature.signatur",{"_index":1221,"title":{},"name":{},"text":{"15":{}},"component":{}}],["starkware.starknet.common.messag",{"_index":1043,"title":{},"name":{},"text":{"13":{}},"component":{}}],["starkware.starknet.common.syscal",{"_index":572,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"14":{},"17":{},"35":{},"38":{}},"component":{}}],["starkware.starknet.compiler.compil",{"_index":937,"title":{},"name":{},"text":{"10":{},"13":{}},"component":{}}],["starkware.starknet.public.abi",{"_index":792,"title":{},"name":{},"text":{"6":{},"17":{}},"component":{}}],["starkware.starknet.testing.starknet",{"_index":1242,"title":{},"name":{},"text":{"16":{}},"component":{}}],["starkware.starknet.wallet",{"_index":210,"title":{},"name":{},"text":{"3":{},"44":{}},"component":{}}],["starkware’",{"_index":2094,"title":{},"name":{},"text":{"39":{}},"component":{}}],["start",{"_index":250,"title":{"11":{}},"name":{},"text":{"4":{},"5":{},"6":{},"10":{},"12":{},"13":{},"16":{},"19":{},"20":{},"21":{},"27":{},"34":{},"35":{},"36":{},"41":{}},"component":{}}],["startl1tol2messagecancel",{"_index":2259,"title":{},"name":{},"text":{"41":{}},"component":{}}],["state",{"_index":233,"title":{"43":{},"4-2":{},"20-7":{},"20-23":{},"43-1":{}},"name":{"43":{}},"text":{"4":{},"5":{},"6":{},"7":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"27":{},"28":{},"30":{},"33":{},"36":{},"37":{},"39":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["state_diff",{"_index":775,"title":{},"name":{},"text":{"6":{}},"component":{}}],["state_root",{"_index":729,"title":{},"name":{},"text":{"6":{},"20":{}},"component":{}}],["stateless",{"_index":955,"title":{},"name":{},"text":{"12":{}},"component":{}}],["statement",{"_index":923,"title":{},"name":{},"text":{"10":{},"12":{},"15":{},"21":{},"45":{}},"component":{}}],["statemut",{"_index":992,"title":{},"name":{},"text":{"12":{}},"component":{}}],["statu",{"_index":53,"title":{"29-1":{}},"name":{},"text":{"2":{},"4":{},"6":{},"10":{},"12":{},"17":{},"29":{},"36":{},"38":{},"42":{},"44":{}},"component":{}}],["status",{"_index":635,"title":{},"name":{},"text":{"6":{},"12":{},"29":{},"44":{}},"component":{}}],["status_upd",{"_index":1937,"title":{},"name":{},"text":{"31":{}},"component":{}}],["stay",{"_index":2300,"title":{},"name":{},"text":{"42":{}},"component":{}}],["stdout",{"_index":2384,"title":{},"name":{},"text":{"45":{}},"component":{}}],["steal",{"_index":1822,"title":{},"name":{},"text":{"27":{}},"component":{}}],["step",{"_index":942,"title":{"42-3":{},"42-4":{},"42-5":{},"42-7":{},"42-8":{},"42-9":{}},"name":{},"text":{"11":{},"18":{},"20":{},"21":{},"27":{},"39":{},"41":{},"42":{},"43":{},"45":{}},"component":{}}],["still",{"_index":58,"title":{},"name":{},"text":{"2":{},"12":{},"13":{},"17":{},"19":{},"20":{},"21":{},"27":{}},"component":{}}],["stolen",{"_index":1808,"title":{},"name":{},"text":{"25":{}},"component":{}}],["stop",{"_index":229,"title":{},"name":{},"text":{"3":{},"45":{}},"component":{}}],["storag",{"_index":323,"title":{"35":{},"14-1":{},"14-2":{},"17-1":{},"35-1":{},"35-2":{},"35-3":{},"39-9":{}},"name":{"35":{}},"text":{"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"17":{},"19":{},"20":{},"21":{},"27":{},"33":{},"35":{},"36":{},"37":{},"39":{},"41":{},"43":{},"44":{}},"component":{}}],["storage_diff",{"_index":779,"title":{},"name":{},"text":{"6":{}},"component":{}}],["storage_read",{"_index":602,"title":{"36-13":{}},"name":{},"text":{"5":{},"35":{},"36":{}},"component":{}}],["storage_read{syscall_ptr",{"_index":2032,"title":{},"name":{},"text":{"36":{}},"component":{}}],["storage_var",{"_index":347,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"17":{},"35":{}},"component":{}}],["storage_writ",{"_index":1974,"title":{"36-14":{}},"name":{},"text":{"35":{}},"component":{}}],["storage_write{syscall_ptr",{"_index":2035,"title":{},"name":{},"text":{"36":{}},"component":{}}],["store",{"_index":344,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"13":{},"20":{},"35":{},"41":{},"42":{},"43":{}},"component":{}}],["straightforward",{"_index":284,"title":{},"name":{},"text":{"4":{},"36":{}},"component":{}}],["string",{"_index":1901,"title":{},"name":{},"text":{"30":{},"32":{},"36":{},"38":{},"44":{}},"component":{}}],["struct",{"_index":1114,"title":{"14-2":{},"14-4":{},"14-5":{}},"name":{},"text":{"14":{},"21":{},"31":{},"35":{},"38":{}},"component":{}}],["structur",{"_index":671,"title":{"28":{},"30":{},"20-4":{},"25-1":{},"41-2":{},"41-6":{}},"name":{},"text":{"6":{},"20":{},"24":{},"27":{},"41":{},"43":{}},"component":{}}],["subject",{"_index":1342,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["submiss",{"_index":2095,"title":{},"name":{},"text":{"39":{}},"component":{}}],["submit",{"_index":1818,"title":{},"name":{},"text":{"27":{},"30":{},"39":{},"42":{}},"component":{}}],["submitt",{"_index":2186,"title":{},"name":{},"text":{"39":{}},"component":{}}],["subscrib",{"_index":1647,"title":{},"name":{},"text":{"21":{}},"component":{}}],["subset",{"_index":1511,"title":{},"name":{},"text":{"20":{}},"component":{}}],["subtract",{"_index":384,"title":{},"name":{},"text":{"4":{}},"component":{}}],["subtre",{"_index":2309,"title":{},"name":{},"text":{"43":{}},"component":{}}],["succe",{"_index":1874,"title":{},"name":{},"text":{"29":{}},"component":{}}],["success",{"_index":1540,"title":{},"name":{},"text":{"20":{},"27":{},"44":{}},"component":{}}],["successfulli",{"_index":986,"title":{},"name":{},"text":{"12":{},"26":{},"29":{}},"component":{}}],["such",{"_index":400,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"8":{},"12":{},"14":{},"19":{},"20":{},"25":{},"36":{},"37":{},"39":{},"41":{},"42":{}},"component":{}}],["suffic",{"_index":173,"title":{},"name":{},"text":{"3":{},"37":{},"43":{}},"component":{}}],["suffici",{"_index":1029,"title":{},"name":{},"text":{"13":{}},"component":{}}],["suggest",{"_index":1450,"title":{},"name":{},"text":{"19":{}},"component":{}}],["suitabl",{"_index":2258,"title":{},"name":{},"text":{"41":{}},"component":{}}],["sum\\limits_{i=1}^t",{"_index":2179,"title":{},"name":{},"text":{"39":{}},"component":{}}],["sum_point",{"_index":1151,"title":{},"name":{},"text":{"14":{}},"component":{}}],["sum_points_arr",{"_index":1157,"title":{},"name":{},"text":{"14":{}},"component":{}}],["summar",{"_index":1991,"title":{},"name":{},"text":{"35":{}},"component":{}}],["summari",{"_index":1465,"title":{},"name":{},"text":{"19":{},"29":{}},"component":{}}],["suppli",{"_index":979,"title":{},"name":{},"text":{"12":{},"17":{},"41":{},"42":{},"44":{}},"component":{}}],["support",{"_index":39,"title":{"19-27":{}},"name":{},"text":{"1":{},"2":{},"6":{},"14":{},"19":{},"20":{},"21":{},"27":{},"29":{},"30":{},"36":{},"42":{}},"component":{}}],["suppos",{"_index":1267,"title":{},"name":{},"text":{"17":{},"20":{},"39":{},"43":{}},"component":{}}],["sure",{"_index":484,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"12":{},"13":{},"27":{}},"component":{}}],["surround",{"_index":1783,"title":{},"name":{},"text":{"25":{}},"component":{}}],["swap",{"_index":234,"title":{"4-3":{}},"name":{},"text":{"4":{},"19":{},"20":{}},"component":{}}],["symbol",{"_index":1742,"title":{},"name":{},"text":{"23":{}},"component":{}}],["sync",{"_index":1379,"title":{},"name":{},"text":{"19":{}},"component":{}}],["syntax",{"_index":389,"title":{"44-1":{}},"name":{},"text":{"4":{},"21":{},"36":{},"38":{},"44":{}},"component":{}}],["syscal",{"_index":91,"title":{"20-8":{},"20-21":{}},"name":{},"text":{"2":{},"9":{},"20":{},"21":{},"30":{},"39":{},"41":{}},"component":{}}],["syscall_ptr",{"_index":359,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"17":{}},"component":{}}],["syscalls.cairo",{"_index":2003,"title":{},"name":{},"text":{"36":{}},"component":{}}],["system",{"_index":33,"title":{"36":{},"9-1":{},"20-9":{}},"name":{"36":{}},"text":{"1":{},"8":{},"9":{},"12":{},"13":{},"16":{},"20":{},"21":{},"29":{},"33":{},"35":{},"36":{},"38":{},"43":{},"44":{}},"component":{}}],["t",{"_index":442,"title":{},"name":{},"text":{"4":{},"27":{},"39":{}},"component":{}}],["t=token_type_a",{"_index":444,"title":{},"name":{},"text":{"4":{}},"component":{}}],["t=token_type_b",{"_index":443,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tabl",{"_index":1345,"title":{},"name":{},"text":{"18":{},"22":{},"30":{},"41":{}},"component":{}}],["tag",{"_index":2356,"title":{},"name":{},"text":{"44":{}},"component":{}}],["take",{"_index":525,"title":{"19-28":{}},"name":{},"text":{"4":{},"13":{},"20":{},"25":{},"27":{},"33":{},"37":{},"39":{},"41":{}},"component":{}}],["taken",{"_index":1032,"title":{},"name":{},"text":{"13":{},"27":{},"35":{}},"component":{}}],["target",{"_index":1611,"title":{},"name":{},"text":{"20":{},"41":{},"43":{}},"component":{}}],["task",{"_index":1269,"title":{},"name":{},"text":{"17":{}},"component":{}}],["team",{"_index":1763,"title":{},"name":{},"text":{"24":{}},"component":{}}],["technic",{"_index":1190,"title":{"21-4":{},"21-6":{},"21-8":{},"21-10":{},"21-12":{},"21-14":{}},"name":{},"text":{"15":{},"21":{}},"component":{}}],["temporari",{"_index":2363,"title":{},"name":{},"text":{"44":{}},"component":{}}],["tempvar",{"_index":365,"title":{},"name":{},"text":{"4":{},"13":{}},"component":{}}],["term",{"_index":1494,"title":{},"name":{},"text":{"20":{},"42":{}},"component":{}}],["termin",{"_index":2377,"title":{},"name":{},"text":{"45":{}},"component":{}}],["test",{"_index":223,"title":{"16":{}},"name":{},"text":{"3":{},"16":{},"21":{},"31":{},"44":{}},"component":{}}],["test_increase_bal",{"_index":1253,"title":{},"name":{},"text":{"16":{}},"component":{}}],["testnet",{"_index":115,"title":{"12-5":{},"12-6":{},"23-2":{},"23-3":{}},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"12":{},"13":{},"14":{},"19":{},"23":{},"30":{},"44":{}},"component":{}}],["testnet/mainnet",{"_index":1607,"title":{},"name":{},"text":{"20":{}},"component":{}}],["testnet2",{"_index":1416,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["text",{"_index":1425,"title":{},"name":{},"text":{"19":{},"28":{},"30":{},"41":{},"43":{}},"component":{}}],["textrm{number_of_lin",{"_index":1968,"title":{},"name":{},"text":{"34":{}},"component":{}}],["text{\"constructor",{"_index":1897,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{\"declar",{"_index":1919,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{\"deploy",{"_index":1894,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{\"invok",{"_index":1909,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{\"l1_handl",{"_index":2270,"title":{},"name":{},"text":{"41":{}},"component":{}}],["text{amount_from",{"_index":464,"title":{},"name":{},"text":{"4":{}},"component":{}}],["text{amount_from}}{\\text{amm_from_bal",{"_index":463,"title":{},"name":{},"text":{"4":{}},"component":{}}],["text{amount_to",{"_index":461,"title":{},"name":{},"text":{"4":{}},"component":{}}],["text{api_vers",{"_index":1963,"title":{},"name":{},"text":{"34":{}},"component":{}}],["text{block_numb",{"_index":1863,"title":{},"name":{},"text":{"28":{}},"component":{}}],["text{cairoresourcefeeweights}_k",{"_index":2140,"title":{},"name":{},"text":{"39":{}},"component":{}}],["text{calldata",{"_index":1911,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{chain_id",{"_index":1899,"title":{},"name":{},"text":{"30":{},"41":{}},"component":{}}],["text{class_hash",{"_index":1920,"title":{},"name":{},"text":{"30":{},"43":{}},"component":{}}],["text{constructor_calldata",{"_index":1898,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{contract_address",{"_index":1916,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{data_hash",{"_index":2085,"title":{},"name":{},"text":{"38":{}},"component":{}}],["text{declar",{"_index":1921,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{declare_v0_tx_hash",{"_index":1922,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{declare_v1_tx_hash",{"_index":1918,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{deploy_tx_hash",{"_index":1893,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{entry_point_selector",{"_index":1917,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{event_commit",{"_index":1865,"title":{},"name":{},"text":{"28":{}},"component":{}}],["text{event_nam",{"_index":2079,"title":{},"name":{},"text":{"38":{}},"component":{}}],["text{from_address",{"_index":2083,"title":{},"name":{},"text":{"38":{}},"component":{}}],["text{gas_price}\\cdot",{"_index":2158,"title":{},"name":{},"text":{"39":{}},"component":{}}],["text{gas_price}\\cdot\\left",{"_index":2172,"title":{},"name":{},"text":{"39":{}},"component":{}}],["text{if",{"_index":2322,"title":{},"name":{},"text":{"43":{}},"component":{}}],["text{invok",{"_index":1914,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{invoke_v0_tx_hash",{"_index":1915,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{invoke_v1_tx_hash",{"_index":1908,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{keys_hash",{"_index":2084,"title":{},"name":{},"text":{"38":{}},"component":{}}],["text{l1_handl",{"_index":2271,"title":{},"name":{},"text":{"41":{}},"component":{}}],["text{l1_handler_tx_hash",{"_index":2269,"title":{},"name":{},"text":{"41":{}},"component":{}}],["text{max_fe",{"_index":1912,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{nonc",{"_index":1913,"title":{},"name":{},"text":{"30":{},"43":{}},"component":{}}],["text{number_of_lin",{"_index":1969,"title":{},"name":{},"text":{"34":{}},"component":{}}],["text{otherwis",{"_index":2323,"title":{},"name":{},"text":{"43":{}},"component":{}}],["text{sender_address",{"_index":1910,"title":{},"name":{},"text":{"30":{}},"component":{}}],["text{sn_keccak",{"_index":1896,"title":{},"name":{},"text":{"30":{},"38":{}},"component":{}}],["text{storage_root",{"_index":2307,"title":{},"name":{},"text":{"43":{}},"component":{}}],["text{tracecells}[tx]/l",{"_index":2117,"title":{},"name":{},"text":{"39":{}},"component":{}}],["text{transaction_count",{"_index":1864,"title":{},"name":{},"text":{"28":{}},"component":{}}],["text{vers",{"_index":1895,"title":{},"name":{},"text":{"30":{}},"component":{}}],["thank",{"_index":26,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["the`validate_deploy",{"_index":1660,"title":{},"name":{},"text":{"21":{}},"component":{}}],["themselv",{"_index":1459,"title":{},"name":{},"text":{"19":{}},"component":{}}],["theoret",{"_index":1779,"title":{},"name":{},"text":{"25":{}},"component":{}}],["therebi",{"_index":1787,"title":{},"name":{},"text":{"25":{}},"component":{}}],["therefor",{"_index":1034,"title":{},"name":{},"text":{"13":{},"19":{},"27":{},"39":{}},"component":{}}],["there’",{"_index":1776,"title":{},"name":{},"text":{"25":{}},"component":{}}],["think",{"_index":1832,"title":{},"name":{},"text":{"27":{},"38":{}},"component":{}}],["third",{"_index":1565,"title":{},"name":{},"text":{"20":{}},"component":{}}],["those",{"_index":272,"title":{},"name":{},"text":{"4":{},"10":{},"20":{},"21":{},"24":{},"25":{},"30":{},"37":{},"38":{}},"component":{}}],["though",{"_index":2278,"title":{},"name":{},"text":{"42":{}},"component":{}}],["three",{"_index":964,"title":{},"name":{},"text":{"12":{},"20":{},"30":{},"36":{},"38":{},"39":{},"43":{}},"component":{}}],["through",{"_index":204,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"8":{},"9":{},"11":{},"12":{},"17":{},"19":{},"24":{},"25":{},"29":{},"34":{},"35":{},"44":{}},"component":{}}],["throughout",{"_index":1575,"title":{},"name":{},"text":{"20":{},"38":{},"40":{}},"component":{}}],["thu",{"_index":1006,"title":{},"name":{},"text":{"12":{},"14":{},"20":{},"27":{},"29":{},"37":{}},"component":{}}],["time",{"_index":752,"title":{},"name":{},"text":{"6":{},"13":{},"14":{},"15":{},"20":{},"21":{},"27":{},"28":{},"39":{},"41":{}},"component":{}}],["timelin",{"_index":1477,"title":{},"name":{},"text":{"19":{}},"component":{}}],["timestamp",{"_index":731,"title":{"14-7":{}},"name":{},"text":{"6":{},"14":{},"19":{},"21":{},"28":{},"36":{}},"component":{}}],["to/from",{"_index":1018,"title":{},"name":{},"text":{"13":{}},"component":{}}],["to_address",{"_index":665,"title":{},"name":{},"text":{"6":{},"36":{},"41":{},"44":{}},"component":{}}],["to_address=l1_contract_address",{"_index":1065,"title":{},"name":{},"text":{"13":{}},"component":{}}],["to_address=to_address",{"_index":2231,"title":{},"name":{},"text":{"41":{}},"component":{}}],["toaddress",{"_index":2238,"title":{},"name":{},"text":{"41":{}},"component":{}}],["today",{"_index":1626,"title":{},"name":{},"text":{"20":{},"25":{},"27":{},"29":{},"44":{}},"component":{}}],["togeth",{"_index":1049,"title":{},"name":{},"text":{"13":{}},"component":{}}],["token",{"_index":235,"title":{"42":{},"4-3":{},"13-4":{},"23-4":{}},"name":{"42":{}},"text":{"4":{},"10":{},"13":{},"23":{},"25":{},"42":{},"44":{}},"component":{}}],["token_a",{"_index":470,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_a_amount",{"_index":482,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_b",{"_index":471,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_b_amount",{"_index":483,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_from",{"_index":421,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_from=token_from",{"_index":435,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_to",{"_index":432,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_to=token_to",{"_index":436,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_typ",{"_index":350,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type=token_from",{"_index":430,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type=token_to",{"_index":450,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type=token_typ",{"_index":372,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type=token_type_a",{"_index":473,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type=token_type_b",{"_index":475,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type_a",{"_index":425,"title":{},"name":{},"text":{"4":{}},"component":{}}],["token_type_b",{"_index":426,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tool",{"_index":1685,"title":{},"name":{},"text":{"21":{},"45":{}},"component":{}}],["top",{"_index":498,"title":{},"name":{},"text":{"4":{},"25":{}},"component":{}}],["topic",{"_index":1890,"title":{},"name":{},"text":{"30":{},"36":{}},"component":{}}],["total",{"_index":2289,"title":{},"name":{},"text":{"42":{}},"component":{}}],["trace",{"_index":669,"title":{},"name":{},"text":{"6":{},"21":{},"39":{}},"component":{}}],["traceback",{"_index":1292,"title":{},"name":{},"text":{"17":{}},"component":{}}],["track",{"_index":1093,"title":{},"name":{},"text":{"13":{},"20":{},"37":{},"39":{}},"component":{}}],["transact",{"_index":84,"title":{"26":{},"29":{},"30":{},"6-5":{},"14-6":{},"20-4":{},"20-5":{},"27-2":{},"27-5":{},"29-1":{},"29-9":{},"30-1":{},"30-2":{},"30-3":{},"30-4":{},"30-5":{},"30-6":{},"30-7":{},"30-8":{},"30-9":{},"30-10":{},"42-8":{}},"name":{"29":{},"30":{}},"text":{"2":{},"3":{},"5":{},"6":{},"7":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"26":{},"27":{},"28":{},"29":{},"30":{},"32":{},"33":{},"34":{},"36":{},"37":{},"38":{},"39":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["transaction'",{"_index":1176,"title":{},"name":{},"text":{"14":{}},"component":{}}],["transaction_commit",{"_index":1851,"title":{},"name":{},"text":{"28":{}},"component":{}}],["transaction_count",{"_index":1850,"title":{},"name":{},"text":{"28":{}},"component":{}}],["transaction_fail",{"_index":1313,"title":{},"name":{},"text":{"17":{}},"component":{}}],["transaction_failure_reason",{"_index":641,"title":{},"name":{},"text":{"6":{}},"component":{}}],["transaction_hash",{"_index":616,"title":{},"name":{},"text":{"6":{},"10":{},"12":{},"14":{},"29":{},"44":{}},"component":{}}],["transaction_index",{"_index":632,"title":{},"name":{},"text":{"6":{},"29":{}},"component":{}}],["transaction_receipt",{"_index":733,"title":{},"name":{},"text":{"6":{}},"component":{}}],["transaction’",{"_index":527,"title":{},"name":{},"text":{"4":{},"6":{},"13":{},"30":{},"36":{},"39":{},"41":{},"43":{}},"component":{}}],["transfer",{"_index":100,"title":{"3-5":{},"42-2":{},"42-5":{},"42-6":{},"42-9":{}},"name":{},"text":{"3":{},"10":{},"39":{},"41":{},"42":{}},"component":{}}],["transit",{"_index":1493,"title":{},"name":{},"text":{"20":{},"43":{}},"component":{}}],["translat",{"_index":1284,"title":{},"name":{},"text":{"17":{}},"component":{}}],["tree",{"_index":750,"title":{"43-2":{}},"name":{},"text":{"6":{},"20":{},"28":{},"43":{}},"component":{}}],["tri",{"_index":951,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["trie",{"_index":2326,"title":{},"name":{},"text":{"43":{}},"component":{}}],["trigger",{"_index":1336,"title":{"18":{},"42-4":{}},"name":{},"text":{"18":{},"42":{}},"component":{}}],["triplet",{"_index":2308,"title":{},"name":{},"text":{"43":{}},"component":{}}],["true",{"_index":886,"title":{},"name":{},"text":{"9":{},"20":{},"45":{}},"component":{}}],["trust",{"_index":1406,"title":{},"name":{},"text":{"19":{}},"component":{}}],["trustlessli",{"_index":1506,"title":{},"name":{},"text":{"20":{}},"component":{}}],["tune",{"_index":2301,"title":{},"name":{},"text":{"42":{}},"component":{}}],["tupl",{"_index":1115,"title":{"14-4":{}},"name":{},"text":{"14":{},"21":{},"35":{}},"component":{}}],["ture",{"_index":1995,"title":{},"name":{},"text":{"36":{}},"component":{}}],["turn",{"_index":1419,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["tutori",{"_index":108,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"13":{},"36":{}},"component":{}}],["twice",{"_index":1258,"title":{},"name":{},"text":{"16":{}},"component":{}}],["two",{"_index":325,"title":{},"name":{},"text":{"4":{},"5":{},"12":{},"13":{},"14":{},"20":{},"21":{},"24":{},"25":{},"27":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"43":{},"45":{}},"component":{}}],["twofold",{"_index":1825,"title":{},"name":{},"text":{"27":{}},"component":{}}],["tx",{"_index":2304,"title":{},"name":{},"text":{"43":{}},"component":{}}],["tx_failure_reason",{"_index":1312,"title":{},"name":{},"text":{"17":{}},"component":{}}],["tx_hash",{"_index":1282,"title":{},"name":{},"text":{"17":{}},"component":{}}],["tx_info",{"_index":1165,"title":{},"name":{},"text":{"14":{},"36":{}},"component":{}}],["tx_statu",{"_index":636,"title":{"44-16":{}},"name":{},"text":{"6":{},"12":{},"13":{},"17":{},"44":{}},"component":{}}],["txinfo",{"_index":1167,"title":{},"name":{},"text":{"14":{},"36":{}},"component":{}}],["type",{"_index":298,"title":{},"name":{},"text":{"4":{},"6":{},"10":{},"12":{},"13":{},"14":{},"20":{},"21":{},"23":{},"24":{},"28":{},"30":{},"31":{},"38":{},"39":{},"42":{}},"component":{}}],["typic",{"_index":870,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{}}],["uint256",{"_index":2039,"title":{},"name":{},"text":{"37":{},"41":{}},"component":{}}],["uint256.cairo",{"_index":1663,"title":{},"name":{},"text":{"21":{}},"component":{}}],["uint256_mul_div_mod",{"_index":1662,"title":{},"name":{},"text":{"21":{}},"component":{}}],["unambigu",{"_index":1954,"title":{},"name":{},"text":{"33":{}},"component":{}}],["unbatch",{"_index":1351,"title":{},"name":{},"text":{"18":{}},"component":{}}],["unchang",{"_index":1591,"title":{},"name":{},"text":{"20":{}},"component":{}}],["uncoupl",{"_index":1792,"title":{},"name":{},"text":{"25":{}},"component":{}}],["under",{"_index":1033,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["underbrace{0\\cdots0}_{\\text{127",{"_index":1584,"title":{},"name":{},"text":{"20":{}},"component":{}}],["underbrace{0\\cdots0}_{\\text{128",{"_index":2041,"title":{},"name":{},"text":{"37":{}},"component":{}}],["underbrace{\\text",{"_index":1588,"title":{},"name":{},"text":{"20":{},"37":{}},"component":{}}],["underbrace{\\text{flag}}_{\\text{1",{"_index":1585,"title":{},"name":{},"text":{"20":{}},"component":{}}],["underbrace{\\text{new",{"_index":1586,"title":{},"name":{},"text":{"20":{},"37":{}},"component":{}}],["underli",{"_index":1748,"title":{},"name":{},"text":{"23":{}},"component":{}}],["understand",{"_index":264,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["unencrypt",{"_index":214,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unexpectedli",{"_index":1456,"title":{},"name":{},"text":{"19":{}},"component":{}}],["unfortun",{"_index":970,"title":{},"name":{},"text":{"12":{},"19":{}},"component":{}}],["ungracefulli",{"_index":1503,"title":{},"name":{},"text":{"20":{}},"component":{}}],["uniqu",{"_index":744,"title":{},"name":{},"text":{"6":{},"12":{},"24":{},"27":{},"32":{},"39":{},"43":{}},"component":{}}],["uniswap",{"_index":268,"title":{},"name":{},"text":{"4":{}},"component":{}}],["unit",{"_index":517,"title":{"16":{},"39-2":{}},"name":{},"text":{"4":{},"16":{}},"component":{}}],["unit_test",{"_index":1235,"title":{},"name":{"16":{}},"text":{},"component":{}}],["unix",{"_index":1177,"title":{},"name":{},"text":{"14":{}},"component":{}}],["unjustifi",{"_index":1820,"title":{},"name":{},"text":{"27":{}},"component":{}}],["unknown",{"_index":1320,"title":{},"name":{},"text":{"17":{}},"component":{}}],["unless",{"_index":1038,"title":{},"name":{},"text":{"13":{},"21":{}},"component":{}}],["unlik",{"_index":63,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"12":{},"29":{},"41":{}},"component":{}}],["unlimit",{"_index":18,"title":{},"name":{},"text":{"1":{},"11":{}},"component":{}}],["unnecessari",{"_index":1709,"title":{},"name":{},"text":{"21":{}},"component":{}}],["unprov",{"_index":1504,"title":{},"name":{},"text":{"20":{}},"component":{}}],["unsign",{"_index":465,"title":{},"name":{},"text":{"4":{}},"component":{}}],["unsigned_div_rem",{"_index":452,"title":{},"name":{},"text":{"4":{}},"component":{}}],["unsuccessfulli",{"_index":1873,"title":{},"name":{},"text":{"29":{}},"component":{}}],["unsupport",{"_index":1892,"title":{},"name":{},"text":{"30":{}},"component":{}}],["until",{"_index":566,"title":{},"name":{},"text":{"5":{},"12":{},"13":{},"19":{},"20":{}},"component":{}}],["untouch",{"_index":1577,"title":{},"name":{},"text":{"20":{}},"component":{}}],["unus",{"_index":2386,"title":{},"name":{},"text":{"45":{}},"component":{}}],["up",{"_index":94,"title":{"3":{},"3-2":{}},"name":{},"text":{"3":{},"4":{},"12":{},"20":{},"27":{},"39":{},"43":{},"44":{}},"component":{}}],["upcom",{"_index":1469,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{}}],["upcoming_vers",{"_index":1486,"title":{},"name":{"20":{}},"text":{},"component":{}}],["updat",{"_index":453,"title":{"20-20":{},"39-9":{}},"name":{},"text":{"4":{},"12":{},"13":{},"15":{},"17":{},"19":{},"20":{},"21":{},"27":{},"36":{},"37":{},"39":{},"41":{},"42":{},"43":{}},"component":{}}],["updates}}_{\\text{64",{"_index":1589,"title":{},"name":{},"text":{"20":{},"37":{}},"component":{}}],["upgrad",{"_index":228,"title":{},"name":{},"text":{"3":{},"19":{},"20":{},"21":{}},"component":{}}],["upon",{"_index":1536,"title":{},"name":{},"text":{"20":{},"27":{},"37":{},"41":{}},"component":{}}],["upper",{"_index":381,"title":{},"name":{},"text":{"4":{}},"component":{}}],["url",{"_index":1435,"title":{},"name":{},"text":{"19":{},"20":{},"22":{},"23":{},"44":{}},"component":{}}],["us",{"_index":41,"title":{"23":{},"9-2":{},"13-8":{},"33-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"28":{},"29":{},"30":{},"33":{},"34":{},"35":{},"36":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{},"45":{}},"component":{}}],["usabl",{"_index":1666,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["usag",{"_index":187,"title":{"45-1":{}},"name":{},"text":{"3":{},"4":{},"6":{},"13":{},"20":{},"27":{},"39":{}},"component":{}}],["usdc",{"_index":2292,"title":{},"name":{},"text":{"42":{}},"component":{}}],["usdt",{"_index":2293,"title":{},"name":{},"text":{"42":{}},"component":{}}],["user",{"_index":410,"title":{"17":{}},"name":{},"text":{"4":{},"6":{},"7":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"20":{},"23":{},"25":{},"29":{},"31":{},"35":{},"39":{},"41":{},"42":{}},"component":{}}],["user'",{"_index":1204,"title":{},"name":{},"text":{"15":{}},"component":{}}],["user=us",{"_index":1051,"title":{},"name":{},"text":{"13":{},"15":{},"17":{}},"component":{}}],["user_auth",{"_index":1266,"title":{},"name":{"17":{}},"text":{},"component":{}}],["user_auth.cairo",{"_index":1278,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_auth.cairo:15:6",{"_index":1330,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_auth.cairo:20:9",{"_index":1332,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_auth_abi.json",{"_index":1280,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_auth_class_hash",{"_index":1281,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_auth_compiled.json",{"_index":1279,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_balance_key",{"_index":1285,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user_vot",{"_index":1132,"title":{},"name":{},"text":{"14":{}},"component":{}}],["user_voted.writ",{"_index":1133,"title":{},"name":{},"text":{"14":{}},"component":{}}],["userid",{"_index":1086,"title":{},"name":{},"text":{"13":{}},"component":{}}],["user}:\\n{user_balance_key",{"_index":1287,"title":{},"name":{},"text":{"17":{}},"component":{}}],["user’",{"_index":1057,"title":{},"name":{},"text":{"13":{},"17":{},"20":{},"25":{},"27":{},"42":{}},"component":{}}],["usual",{"_index":755,"title":{},"name":{},"text":{"6":{},"13":{},"20":{},"40":{}},"component":{}}],["util",{"_index":1447,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ux",{"_index":1768,"title":{},"name":{},"text":{"24":{}},"component":{}}],["v",{"_index":1691,"title":{"45-12":{}},"name":{},"text":{"21":{},"39":{},"45":{}},"component":{}}],["v0",{"_index":85,"title":{"30-7":{},"30-10":{}},"name":{},"text":{"2":{},"30":{}},"component":{}}],["v0.1",{"_index":1410,"title":{},"name":{},"text":{"19":{}},"component":{}}],["v0.10.0",{"_index":1636,"title":{"21-9":{}},"name":{},"text":{},"component":{}}],["v0.10.1",{"_index":1634,"title":{"21-7":{}},"name":{},"text":{},"component":{}}],["v0.10.2",{"_index":1365,"title":{"19-27":{},"21-5":{}},"name":{},"text":{"19":{}},"component":{}}],["v0.10.3",{"_index":1417,"title":{"21-3":{}},"name":{},"text":{"19":{}},"component":{}}],["v0.11.0",{"_index":86,"title":{"20":{},"21-2":{}},"name":{},"text":{"2":{},"20":{},"21":{}},"component":{}}],["v0.2",{"_index":1463,"title":{},"name":{},"text":{"19":{}},"component":{}}],["v0.4.0",{"_index":1362,"title":{"19-25":{}},"name":{},"text":{},"component":{}}],["v0.4.1",{"_index":1359,"title":{"19-16":{}},"name":{},"text":{"19":{}},"component":{}}],["v0.4.2",{"_index":1358,"title":{"19-13":{}},"name":{},"text":{},"component":{}}],["v0.4.3",{"_index":1357,"title":{"19-10":{}},"name":{},"text":{},"component":{}}],["v0.4.4",{"_index":1356,"title":{"19-5":{}},"name":{},"text":{"19":{}},"component":{}}],["v0.4.5",{"_index":1353,"title":{"19-1":{}},"name":{},"text":{},"component":{}}],["v0.9.0",{"_index":1641,"title":{"21-13":{}},"name":{},"text":{},"component":{}}],["v0.9.1",{"_index":1639,"title":{"21-11":{}},"name":{},"text":{},"component":{}}],["v1",{"_index":1552,"title":{"30-6":{},"30-9":{}},"name":{},"text":{"20":{},"30":{}},"component":{}}],["v2",{"_index":1480,"title":{"20-3":{}},"name":{},"text":{"20":{}},"component":{}}],["v_k",{"_index":2174,"title":{},"name":{},"text":{"39":{}},"component":{}}],["valid",{"_index":5,"title":{"27":{},"27-1":{},"27-3":{}},"name":{},"text":{"1":{},"4":{},"12":{},"14":{},"19":{},"20":{},"21":{},"25":{},"26":{},"27":{},"29":{},"30":{},"37":{},"42":{},"45":{}},"component":{}}],["validate/execut",{"_index":1665,"title":{},"name":{},"text":{"21":{}},"component":{}}],["validate_and_execut",{"_index":1815,"title":{},"name":{"27":{}},"text":{},"component":{}}],["validate_declar",{"_index":1671,"title":{},"name":{},"text":{"21":{}},"component":{}}],["validate_invoc",{"_index":691,"title":{},"name":{},"text":{"6":{}},"component":{}}],["valu",{"_index":560,"title":{"14-1":{},"23-5":{}},"name":{},"text":{"5":{},"6":{},"8":{},"9":{},"10":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"23":{},"27":{},"30":{},"35":{},"36":{},"37":{},"38":{},"39":{},"40":{},"41":{},"42":{},"43":{},"44":{}},"component":{}}],["valuabl",{"_index":1036,"title":{},"name":{},"text":{"13":{},"19":{}},"component":{}}],["value=current_salt",{"_index":908,"title":{},"name":{},"text":{"9":{}},"component":{}}],["value=implementation_hash_",{"_index":844,"title":{},"name":{},"text":{"8":{}},"component":{}}],["value=new_bal",{"_index":373,"title":{},"name":{},"text":{"4":{}},"component":{}}],["value=ownable_class_hash_",{"_index":899,"title":{},"name":{},"text":{"9":{}},"component":{}}],["value=owner_address",{"_index":821,"title":{},"name":{},"text":{"7":{}},"component":{}}],["var.addr",{"_index":1979,"title":{},"name":{},"text":{"35":{}},"component":{}}],["var.read",{"_index":1976,"title":{},"name":{},"text":{"35":{}},"component":{}}],["var.writ",{"_index":1978,"title":{},"name":{},"text":{"35":{}},"component":{}}],["vari",{"_index":2073,"title":{},"name":{},"text":{"38":{}},"component":{}}],["variabl",{"_index":121,"title":{"14-1":{},"14-2":{},"35-3":{}},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"9":{},"12":{},"13":{},"14":{},"17":{},"19":{},"21":{},"35":{},"36":{},"44":{},"45":{}},"component":{}}],["variable_nam",{"_index":1981,"title":{},"name":{},"text":{"35":{}},"component":{}}],["variable’",{"_index":1975,"title":{},"name":{},"text":{"35":{}},"component":{}}],["variou",{"_index":2277,"title":{},"name":{},"text":{"42":{}},"component":{}}],["vastli",{"_index":1801,"title":{},"name":{},"text":{"25":{}},"component":{}}],["vector",{"_index":1509,"title":{},"name":{},"text":{"20":{},"39":{}},"component":{}}],["veri",{"_index":582,"title":{},"name":{},"text":{"5":{}},"component":{}}],["verif",{"_index":1185,"title":{"15":{}},"name":{},"text":{"21":{},"24":{},"39":{}},"component":{}}],["verifi",{"_index":316,"title":{},"name":{},"text":{"4":{},"12":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"23":{},"39":{},"41":{},"42":{}},"component":{}}],["verify_ecdsa_signatur",{"_index":1198,"title":{},"name":{},"text":{"15":{}},"component":{}}],["version",{"_index":73,"title":{"19":{},"21":{},"19-26":{},"20-17":{},"23-2":{},"23-3":{},"30-1":{},"30-4":{},"30-5":{},"45-12":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"12":{},"14":{},"19":{},"20":{},"21":{},"28":{},"30":{},"34":{},"36":{},"39":{},"41":{},"42":{},"43":{},"45":{}},"component":{}}],["version_not",{"_index":1644,"title":{},"name":{"21":{}},"text":{},"component":{}}],["via",{"_index":1398,"title":{},"name":{},"text":{"19":{},"20":{},"25":{},"33":{},"39":{},"41":{},"42":{},"44":{}},"component":{}}],["view",{"_index":411,"title":{},"name":{},"text":{"4":{},"5":{},"7":{},"12":{},"13":{},"14":{},"17":{},"19":{},"21":{},"45":{}},"component":{}}],["viewblock",{"_index":1724,"title":{},"name":{},"text":{"22":{}},"component":{}}],["visibl",{"_index":916,"title":{},"name":{},"text":{"9":{}},"component":{}}],["vital",{"_index":1517,"title":{},"name":{},"text":{"20":{}},"component":{}}],["vm",{"_index":1467,"title":{},"name":{},"text":{"19":{},"20":{},"23":{}},"component":{}}],["vote",{"_index":1131,"title":{},"name":{},"text":{"14":{}},"component":{}}],["voyag",{"_index":1726,"title":{},"name":{},"text":{"22":{}},"component":{}}],["w",{"_index":1700,"title":{},"name":{},"text":{"21":{},"39":{}},"component":{}}],["w_k",{"_index":2175,"title":{},"name":{},"text":{"39":{}},"component":{}}],["wait",{"_index":565,"title":{},"name":{},"text":{"5":{},"10":{},"12":{},"13":{},"25":{},"41":{},"42":{}},"component":{}}],["walk",{"_index":943,"title":{},"name":{},"text":{"11":{}},"component":{}}],["wallet",{"_index":96,"title":{"3-3":{}},"name":{},"text":{"3":{},"20":{},"21":{},"24":{},"25":{},"44":{}},"component":{}}],["wallet_nam",{"_index":2358,"title":{},"name":{},"text":{"44":{}},"component":{}}],["wallet_provid",{"_index":2366,"title":{},"name":{},"text":{"44":{}},"component":{}}],["want",{"_index":196,"title":{},"name":{},"text":{"3":{},"6":{},"7":{},"13":{},"17":{},"20":{},"25":{},"27":{},"36":{},"39":{},"43":{}},"component":{}}],["warn",{"_index":1438,"title":{},"name":{},"text":{"19":{}},"component":{}}],["wasn’t",{"_index":598,"title":{},"name":{},"text":{"5":{},"13":{},"42":{}},"component":{}}],["way",{"_index":169,"title":{},"name":{},"text":{"3":{},"5":{},"8":{},"9":{},"12":{},"13":{},"14":{},"15":{},"21":{},"25":{},"35":{},"44":{}},"component":{}}],["wbtc",{"_index":2294,"title":{},"name":{},"text":{"42":{}},"component":{}}],["web",{"_index":177,"title":{},"name":{},"text":{"3":{}},"component":{}}],["wei",{"_index":184,"title":{},"name":{},"text":{"3":{},"6":{},"13":{}},"component":{}}],["weight",{"_index":2136,"title":{},"name":{},"text":{"39":{}},"component":{}}],["well",{"_index":458,"title":{},"name":{},"text":{"4":{},"17":{},"19":{},"42":{}},"component":{}}],["we’ll",{"_index":239,"title":{},"name":{},"text":{"4":{},"13":{},"16":{}},"component":{}}],["we’r",{"_index":2315,"title":{},"name":{},"text":{"43":{}},"component":{}}],["whatev",{"_index":43,"title":{},"name":{},"text":{"1":{}},"component":{}}],["what’",{"_index":309,"title":{},"name":{},"text":{"4":{},"19":{}},"component":{}}],["whenev",{"_index":894,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"39":{},"41":{}},"component":{}}],["wherebi",{"_index":1786,"title":{},"name":{},"text":{"25":{}},"component":{}}],["wherev",{"_index":399,"title":{},"name":{},"text":{"4":{}},"component":{}}],["whether",{"_index":805,"title":{},"name":{},"text":{"6":{},"9":{},"20":{},"24":{}},"component":{}}],["whitelist",{"_index":983,"title":{},"name":{},"text":{"12":{}},"component":{}}],["whose",{"_index":1553,"title":{},"name":{},"text":{"20":{},"21":{},"36":{},"37":{},"43":{}},"component":{}}],["will",{"_index":1906,"title":{},"name":{},"text":{"30":{},"39":{}},"component":{}}],["wish",{"_index":1108,"title":{},"name":{},"text":{"13":{},"38":{}},"component":{}}],["with_attr",{"_index":1274,"title":{},"name":{},"text":{"17":{},"45":{}},"component":{}}],["withdraw",{"_index":1027,"title":{"42-6":{},"42-7":{}},"name":{},"text":{"13":{},"42":{}},"component":{}}],["withdrawal’",{"_index":2286,"title":{},"name":{},"text":{"42":{}},"component":{}}],["withdrawn",{"_index":1058,"title":{},"name":{},"text":{"13":{}},"component":{}}],["within",{"_index":576,"title":{},"name":{},"text":{"5":{},"6":{},"17":{},"21":{},"24":{},"25":{},"29":{},"36":{},"39":{},"42":{}},"component":{}}],["without",{"_index":21,"title":{"12-2":{},"39-5":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"11":{},"12":{},"13":{},"19":{},"21":{},"27":{},"33":{},"37":{},"39":{},"44":{}},"component":{}}],["won’t",{"_index":600,"title":{},"name":{},"text":{"5":{},"12":{}},"component":{}}],["word",{"_index":320,"title":{},"name":{},"text":{"4":{},"20":{},"23":{},"39":{}},"component":{}}],["work",{"_index":59,"title":{},"name":{},"text":{"2":{},"3":{},"5":{},"9":{},"12":{},"13":{},"14":{},"19":{},"26":{},"27":{},"44":{},"45":{}},"component":{}}],["world",{"_index":1957,"title":{},"name":{},"text":{"33":{},"39":{}},"component":{}}],["wouldn’t",{"_index":1053,"title":{},"name":{},"text":{"13":{}},"component":{}}],["would’v",{"_index":302,"title":{},"name":{},"text":{"4":{},"12":{}},"component":{}}],["wrap",{"_index":1276,"title":{},"name":{},"text":{"17":{}},"component":{}}],["write",{"_index":345,"title":{"12":{},"16":{}},"name":{},"text":{"4":{},"5":{},"8":{},"11":{},"12":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"35":{},"36":{},"44":{}},"component":{}}],["written",{"_index":37,"title":{},"name":{},"text":{"1":{},"4":{},"12":{},"13":{},"20":{},"30":{},"36":{},"41":{}},"component":{}}],["wrong",{"_index":1423,"title":{},"name":{},"text":{"19":{}},"component":{}}],["x",{"_index":291,"title":{},"name":{},"text":{"4":{},"14":{},"15":{},"21":{},"23":{},"31":{},"38":{},"40":{},"43":{}},"component":{}}],["x86",{"_index":1522,"title":{},"name":{},"text":{"20":{}},"component":{}}],["x=points[0].x",{"_index":1153,"title":{},"name":{},"text":{"14":{}},"component":{}}],["x=res.x",{"_index":1158,"title":{},"name":{},"text":{"14":{}},"component":{}}],["y",{"_index":293,"title":{},"name":{},"text":{"4":{},"14":{},"21":{},"31":{},"38":{}},"component":{}}],["y=points[0].i",{"_index":1155,"title":{},"name":{},"text":{"14":{}},"component":{}}],["y=res.i",{"_index":1160,"title":{},"name":{},"text":{"14":{}},"component":{}}],["y^2=x^3+\\alpha",{"_index":2199,"title":{},"name":{},"text":{"40":{}},"component":{}}],["ye",{"_index":1569,"title":{},"name":{},"text":{"20":{}},"component":{}}],["yield",{"_index":2101,"title":{},"name":{},"text":{"39":{}},"component":{}}],["you’ll",{"_index":996,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["you’r",{"_index":218,"title":{},"name":{},"text":{"3":{},"12":{},"44":{}},"component":{}}],["z",{"_index":1699,"title":{},"name":{},"text":{"21":{}},"component":{}}],["zero",{"_index":958,"title":{},"name":{},"text":{"12":{},"20":{},"21":{},"24":{},"28":{},"30":{},"32":{},"43":{},"44":{}},"component":{}}],["zk",{"_index":8,"title":{},"name":{},"text":{"1":{},"11":{},"37":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"Starknet is a permissionless decentralized Validity-Rollup (also known as a “ZK-Rollup”). It operates as an L2 network over Ethereum, enabling any dApp to achieve unlimited scale for its computation – without compromising Ethereum’s composability and security, thanks to Starknet’s reliance on the safest and most scalable cryptographic proof system – STARK. Starknet Contracts and the Starknet OS are written in Cairo – supporting the deployment and scaling of any use case, whatever the business logic.","title":"Introduction","component":"documentation","version":"","name":"index","url":"/documentation/","titles":[]},"2":{"id":2,"text":"The following features have been deprecated or removed from Starknet in recent releases. Status Description Deprecated Feature or capability is no longer actively supported. It may still work, but future fixes or enhancements are unlikely. Removed Feature or capability has been removed from Starknet. Name Description Free L2→ L1 messaging Previously, sending a message from L2 to L1 had an optional fee associated. From Starknet version 0.11.0, the fee mechanism will be enforced and the ability to pay without fees will be removed. See here for more details. invoke transaction v0 invoke transaction v0 is deprecated and will be removed on v0.11.0. declare transaction v0 declare transaction v0 is deprecated and will be removed on v0.11.0. Name Description deploy transaction The deploy transaction has been removed in version 0.10.3 of Starknet. To deploy new contract instances, you can use the deploy syscall.","title":"Deprecated and removed features","component":"documentation","version":"","name":"index","url":"/documentation/end_of_life_and_deprecated_features/","titles":[{"text":"Deprecated features","hash":"deprecated_features","id":1},{"text":"Removed features","hash":"removed_features","id":2}]},"3":{"id":3,"text":"Follow the installation instructions for the cairo-lang package in Setting up the environment. In this tutorial we will use the Starknet CLI (command line interface) to interact with Starknet. In order to instruct the CLI to work with the Starknet testnet you may either add the --network=alpha-goerli flag to every command, or simply set the STARKNET_NETWORK environment variable as follows: export STARKNET_NETWORK=alpha-goerli Unlike Ethereum, which distinguishes between Externally Owned Accounts (EOA) and contracts, Starknet doesn’t have this distinction. Instead, an account is represented by a deployed contract that defines the account’s logic – most notably the signature scheme that controls who can issue transactions from it. To interact with Starknet, you will need to deploy an account contract. In this tutorial, we will use a slightly modified version of OpenZeppelin’s standard for EOA contract (at the moment, the signature is computed differently). Set the STARKNET_WALLET environment variable as follows: export STARKNET_WALLET=starkware.starknet.wallets.open_zeppelin.OpenZeppelinAccount Run the following command to initialize an account: starknet new_account The output should resemble: Account address: $[ACCOUNT_ADDRESS_TRIMMED] Public key: ... Move the appropriate amount of funds to the account, and then deploy the account by invoking the 'starknet deploy_account' command. NOTE: This is a modified version of the OpenZeppelin account contract. The signature is computed differently. In order to pay the fees required to deploy the account and execute transactions on Starknet, you need enough ETH in your L2 account. You can acquire L2 ETH in the following ways: Use the Starknet Faucet to get small amounts of ETH directly to the account you have just created. This should suffice for simple transactions. Use StarkGate – the Starknet L2 bridge (L1 contract / Web App) to transfer your existing Goerli L1 ETH to and from the L2 account. To estimate the fee required to deploy the account, run the following command: starknet deploy_account --simulate Find the following lines in the output: The estimated fee is: 822400000000000 WEI (0.000822 ETH). Gas usage: 8224 Gas price: 100000000000 WEI You can also run the following command: starknet deploy_account --estimate_fee To deploy the account you initialized, run the following command: starknet deploy_account The output should resemble: Sent deploy account contract transaction. Contract address: ... Transaction hash: ... You may also specify a name for your account using --account=my_account if you want to maintain multiple accounts. If not specified, the default account (named __default__) is used. The STARKNET_WALLET environment variable instructs the Starknet CLI to use your account in the starknet invoke and starknet call commands. If you want to do a direct call to a contract, without passing through your account contract, you can pass the --no_wallet argument to the CLI, which overrides the STARKNET_WALLET variable. Using the builtin wallet providers that are part of the cairo-lang package (starkware.starknet.wallets…​) is not secure (for example, the private key may be kept unencrypted and without backup in your home directory). You should only use them if you’re not overly concerned with losing access to your accounts (for example, for testing purposes). In addition, they are not deployed using the proxy pattern, so they cannot be upgraded and may stop working in future versions of Starknet.","title":"Setting up a Starknet account","component":"documentation","version":"","name":"account_setup","url":"/documentation/getting_started/account_setup/","titles":[{"text":"Installation","hash":"installation","id":1},{"text":"Setting up the network","hash":"setting-up-the-network","id":2},{"text":"Choosing a wallet provider","hash":"choosing-a-wallet-provider","id":3},{"text":"Creating an account","hash":"creating-an-account","id":4},{"text":"Transferring Goerli ETH to the account","hash":"transferring-goerli-eth-to-the-account","id":5},{"text":"Deploying an account","hash":"deploying-an-account","id":6}]},"4":{"id":4,"text":"In this tutorial, we’ll review the code of a simple AMM, written as a Starknet contract, highlighting specific implementation details. The contract is deployable (and is actually deployed – go check it out) to the Starknet Alpha release, and will be seamlessly deployable and compatible with future Starknet releases. We will start by describing the scope of the contract functionality, and after that, we will dive into the implementation. Finally, we’ll show how to invoke the demo contract’s functionality on the Starknet Alpha environment with a few concrete examples. Before we begin, you can review the full contract code here. In order to understand the basics of automated market making, you may refer to the Uniswap docs, or check the short description in our previous AMM tutorial. For those who read the previous tutorial – comparing the code written there to the contract code in this tutorial can be a fun exercise that highlights the power of Starknet. In this sample contract we’ll limit our functionality to exactly one pool to be managed by the contract. We will implement a straightforward swap functionality (in both directions), using a simple curve; i.e. the constant product formula \\((x \\cdot y = k)\\). We will refer to the tokens managed by the AMM as token A and token B, which may play the role of any type of fungible tokens. Some aspects that ideally would’ve been implemented in other contracts, e.g. minting tokens in an ERC20 contract, are mocked in this sample contract for simplicity. This functionality is not inherent to AMM functionality. What’s important to learn from this example is how Starknet allows the developer of the application to focus on specifying their verifiable business logic and constraints, all while enjoying massive scalability without compromising security. In other words, only the invocable functions and the relevant storage variables used to maintain the state of the application need to be specified by the developer. Let’s dive into the implementation. We’ll start by reviewing how we maintain the state of the AMM. We require two dedicated fields in order to maintain the state: The pool balance – how much liquidity is available in the pool, per token. The account balances – how many tokens of each type are kept in each account. As explained above, this is only needed for this release, and will be replaced with regular ERC-20 interactions in the future. In Starknet, the programmatic model for storage is a simple key/value store. We can define a storage variable, so reading from and writing to storage is simply a matter of calling read and write on that variable. For the pool balance we define: @storage_var func pool_balance(token_type: felt) -> (balance: felt) { } The pool balance is defined as a mapping between the token type (predefined constants) and the balance available in the pool for that token type. For the account balances we define: @storage_var func account_balance(account_id: felt, token_type: felt) -> ( balance: felt ) { } The account balance is defined as a mapping from the account id and token type to the balance available in that account, for the given token type. We write a function that allows us to modify the balance of a given token type in a given account: func modify_account_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(account_id: felt, token_type: felt, amount: felt) { let (current_balance) = account_balance.read( account_id, token_type ); tempvar new_balance = current_balance + amount; assert_nn_le(new_balance, BALANCE_UPPER_BOUND - 1); account_balance.write( account_id=account_id, token_type=token_type, value=new_balance, ); return (); } The logic is fairly straightforward: Retrieve the existing account balance. Calculate the new balance. Assert it is not negative and doesn’t exceed the upper bound. Write it to the account balance storage variable. Note that this also covers cases where we subtract an amount from the balance. As mentioned before, we assume that the reader is familiar with Cairo syntax. For those who are not, we briefly mention the relevant concepts. First, we observe the usage of implicit arguments passed to this function inside the curly brackets. Specifically, the arguments necessary for the assertion and storage operations. Wherever such functionality is used, we’ll pass these implicit arguments. Next, the assert functions used here are imported from Cairo’s common math library . In this case, assert_nn_le asserts that the first argument is nonnegative and is less than or equal to the second argument. To allow a user to read the balance of an account, we define the following view function: @view func get_account_token_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(account_id: felt, token_type: felt) -> (balance: felt) { return account_balance.read(account_id, token_type); } Similarly, for the pool balance: func set_pool_token_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(token_type: felt, balance: felt) { assert_nn_le(balance, BALANCE_UPPER_BOUND - 1); pool_balance.write(token_type, balance); return (); } @view func get_pool_token_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(token_type: felt) -> (balance: felt) { return pool_balance.read(token_type); } We now proceed to the primary functionality of the contract – swapping tokens. @external func swap{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(token_from: felt, amount_from: felt) -> (amount_to: felt) { let (account_id) = get_caller_address(); // Verify that token_from is either TOKEN_TYPE_A or TOKEN_TYPE_B. assert (token_from - TOKEN_TYPE_A) * (token_from - TOKEN_TYPE_B) = 0; // Check that the requested amount_from is valid. assert_nn_le(amount_from, BALANCE_UPPER_BOUND - 1); // Check that the user has enough funds. let (account_from_balance) = get_account_token_balance( account_id=account_id, token_type=token_from ); assert_le(amount_from, account_from_balance); // Execute the actual swap. let (token_to) = get_opposite_token(token_type=token_from); let (amount_to) = do_swap( account_id=account_id, token_from=token_from, token_to=token_to, amount_from=amount_from, ); return (amount_to=amount_to); } swap receives as inputs the account id, the token type and an amount of the token to be swapped. The function starts by verifying the validity of the inputs: The token type is a valid token, by asserting that it is equal to one of the pool’s token types. The amount requested to be swapped is valid – it does not exceed the upper bound, and the account has enough funds to swap. If all checks pass, we proceed to execute the swap. func get_opposite_token(token_type: felt) -> (t: felt) { if (token_type == TOKEN_TYPE_A) { return (t=TOKEN_TYPE_B); } else { return (t=TOKEN_TYPE_A); } } get_opposite_token receives as input a token type and returns the opposite token type. func do_swap{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }( account_id: felt, token_from: felt, token_to: felt, amount_from: felt, ) -> (amount_to: felt) { alloc_locals; // Get pool balance. let (local amm_from_balance) = get_pool_token_balance( token_type=token_from ); let (local amm_to_balance) = get_pool_token_balance( token_type=token_to ); // Calculate swap amount. let (local amount_to, _) = unsigned_div_rem( amm_to_balance * amount_from, amm_from_balance + amount_from, ); // Update token_from balances. modify_account_balance( account_id=account_id, token_type=token_from, amount=-amount_from, ); set_pool_token_balance( token_type=token_from, balance=amm_from_balance + amount_from, ); // Update token_to balances. modify_account_balance( account_id=account_id, token_type=token_to, amount=amount_to, ); set_pool_token_balance( token_type=token_to, balance=amm_to_balance - amount_to ); return (amount_to=amount_to); } The logic of the swapping itself is fairly straightforward: Retrieve the amount of tokens available in the pool, per token type. Calculate the amount of tokens of the opposite type to be received by the pool. Update the account balances for both tokens, as well as the pool’s balances. Most of this implementation invokes functions we described earlier (get_pool_token_balance, modify_account_balance, set_pool_token_balance). Note that the calculation of the amount to be swapped essentially implements the AMM constant product formula: \\(\\text{amount_to} = \\frac{\\text{amm_to_balance} \\cdot \\text{amount_from}}{\\text{amm_from_balance} + \\text{amount_from}}\\) We use Cairo’s common math library, specifically unsigned_div_rem (unsigned division with remainder) to calculate the amount of tokens to be received. As we don’t have contract interaction and liquidity providers in this version, we will now define how to initialize the AMM – both the liquidity pool itself and some account balances. @external func init_pool{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(token_a: felt, token_b: felt) { assert_nn_le(token_a, POOL_UPPER_BOUND - 1); assert_nn_le(token_b, POOL_UPPER_BOUND - 1); set_pool_token_balance(token_type=TOKEN_TYPE_A, bal=token_a); set_pool_token_balance(token_type=TOKEN_TYPE_B, bal=token_b); return (); } Initializing the pool is a simple function that accepts two balances for the tokens (A,B), and sets them using the set_pool_token_balance function we defined above: The POOL_UPPER_BOUND is a constant defined to prevent overflows. Having this function defined, we proceed to add demo tokens to an account: @external func add_demo_token{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(token_a_amount: felt, token_b_amount: felt) { let (account_id) = get_caller_address(); // Make sure the account's balance is much smaller than // the pool init balance. assert_nn_le(token_a_amount, ACCOUNT_BALANCE_BOUND - 1); assert_nn_le(token_b_amount, ACCOUNT_BALANCE_BOUND - 1); modify_account_balance( account_id=account_id, token_type=TOKEN_TYPE_A, amount=token_a_amount, ); modify_account_balance( account_id=account_id, token_type=TOKEN_TYPE_B, amount=token_b_amount, ); return (); } Note that here we add another business constraint (for demo purposes) that the account is capped at some number calculated as a ratio from the pool cap. Specifically, ACCOUNT_BALANCE_BOUND is defined as POOL_UPPER_BOUND divided by 1000, so the cap for an account is 1/1000 that of a pool. All constants are defined at the top of the contract file. We can now explore a few examples that demonstrate contract interaction using the Starknet CLI. Set the environment variable STARKNET_NETWORK as follows: export STARKNET_NETWORK=alpha-goerli For this section you need the amm_sample.cairo contract code. To generate the ABI of the contract, enter the following commands: starknet-compile amm_sample.cairo \\ --output amm_sample_compiled.json \\ --abi amm_sample_abi.json First, declare and deploy the contract as explained in Declare the contract on the Starknet testnet and Deploy the contract on the Starknet testnet. Denote the new deployed contract address by ${AMM_ADDRESS}. We assume you are familiar with the Starknet CLI. If this is not the case, we recommend you review this section. Query the pool’s balance using: starknet call \\ --address ${AMM_ADDRESS} \\ --abi amm_sample_abi.json \\ --function get_pool_token_balance \\ --inputs 1 In response, you should get the pool’s balance of token 1. Now let’s add some tokens to our account’s balance. (Note that every interaction with a contract through a function invocation must be done using an account. To set up an account, see Setting up a Starknet account.) starknet invoke \\ --address ${AMM_ADDRESS} \\ --abi amm_sample_abi.json \\ --function add_demo_token \\ --inputs 1000 1000 Now that we have some tokens, we can use the AMM and swap 500 units of token 1 in exchange for some units of token 2 (the exact number depends on the current balance of the pool). starknet invoke \\ --address ${AMM_ADDRESS} \\ --abi amm_sample_abi.json \\ --function swap \\ --inputs 1 500 You can now query the account’s balance of token 2 after the swap (replace ${ACCOUNT_ADDRESS} with your account address): starknet call \\ --address ${AMM_ADDRESS} \\ --abi amm_sample_abi.json \\ --function get_account_token_balance \\ --inputs ${ACCOUNT_ADDRESS} 2 Note that the change will only take effect after the swap transaction’s status is either ACCEPTED_ON_L2 or ACCEPTED_ON_L1.","title":"A simple Automated Market Maker (AMM)","component":"documentation","version":"","name":"amm","url":"/documentation/getting_started/amm/","titles":[{"text":"AMM implementation in Starknet Alpha","hash":"amm-implementation-in-starknet-alpha","id":1},{"text":"The AMM state","hash":"the-amm-state","id":2},{"text":"Swapping tokens","hash":"swapping-tokens","id":3},{"text":"Initializing the AMM","hash":"initializing-the-amm","id":4},{"text":"Interaction examples","hash":"interaction-examples","id":5}]},"5":{"id":5,"text":"A contract function may invoke an external function of another contract. Start by deploying the example contract in Writing Starknet contracts (the compilation and deployment instructions can be found at the bottom of the page). Denote the address of this contract by BALANCE_CONTRACT. In order to call this contract from another contract, define an interface by copying the declarations of the external functions: @contract_interface namespace IBalanceContract { func increase_balance(amount: felt) { } func get_balance() -> (res: felt) { } } Note that the body of the functions and the implicit arguments should be removed from the definitions. You can use IBalanceContract.increase_balance() and IBalanceContract.get_balance() to invoke these functions on another contract. For example: @external func call_increase_balance{syscall_ptr: felt*, range_check_ptr}( contract_address: felt, amount: felt ) { IBalanceContract.increase_balance( contract_address=contract_address, amount=amount ); return (); } @view func call_get_balance{syscall_ptr: felt*, range_check_ptr}( contract_address: felt ) -> (res: felt) { let (res) = IBalanceContract.get_balance( contract_address=contract_address ); return (res=res); } Note that calling a function of another contract requires passing one additional argument before the function’s original arguments – the address of the called contract. For example, IBalanceContract.increase_balance gets two arguments: contract_address and amount (rather than just amount). In addition, the syscall_ptr and the range_check_ptr implicit arguments are required. Create a file named proxy_contract.cairo containing the interface declaration and the two functions call_increase_balance() and call_get_balance(), and deploy the contract. Denote the address of the new contract by PROXY_CONTRACT. Now, invoke call_increase_balance with BALANCE_CONTRACT as the value of the contract_address argument. Make sure you replace PROXY_CONTRACT and BALANCE_CONTRACT with the addresses you got when you deployed the two contracts: starknet invoke \\ --address PROXY_CONTRACT \\ --abi proxy_contract_abi.json \\ --function call_increase_balance \\ --inputs BALANCE_CONTRACT 10000 This will increase the balance stored in BALANCE_CONTRACT. Note that in our case, the storage of PROXY_CONTRACT will not be affected. Wait until the transaction is added to a block, and then check the balance using the following two ways: Directly through BALANCE_CONTRACT starknet call \\ --address BALANCE_CONTRACT \\ --abi balance_contract_abi.json \\ --function get_balance Indirectly through PROXY_CONTRACT starknet call \\ --address PROXY_CONTRACT \\ --abi proxy_contract_abi.json \\ --function call_get_balance \\ --inputs BALANCE_CONTRACT Both commands should return 10000. You can get the current contract’s address by using the get_contract_address() library function. from starkware.starknet.common.syscalls import ( get_contract_address, ) // ... let (contract_address) = get_contract_address(); The above is similar to address(this) in Solidity. A library call is a way to invoke a function declared in a given contract class within the context of the calling contract. It is possible to invoke a function defined in any previously declared class (in particular, a class of any contract which is already deployed). Storage-changing operations in the invoked function will change the state of the calling contract. Similarly, get_caller_address() and get_contract_address() will return the same value they would have returned if they were called from the calling function. Note that a library call is very similar to Ethereum’s delegate call. The difference is that a delegate call requires a deployed contract, while a library call works with a contract class (the contract instance is not used in Ethereum’s delegate call anyway). To perform a library call, use the contract interface as above, but prepend library_call_ to the function name and pass a class hash instead of a contract address. // Define a local balance variable in our proxy contract. @storage_var func balance() -> (res: felt) { } @external func increase_my_balance{syscall_ptr: felt*, range_check_ptr}( class_hash: felt, amount: felt ) { // Increase the local balance variable using a function from a // different contract class by using a library call. IBalanceContract.library_call_increase_balance( class_hash=class_hash, amount=amount ); return (); } Modify the file proxy_contract.cairo you created earlier by adding the code above. Recompile and redeploy this new version of the proxy contract, and denote its address by PROXY_CONTRACT. Next, declare a library class, in our case – the already compiled example balance contract. starknet declare --contract balance_contract_compiled.json Denote the hash of this class by BALANCE_CLASS_HASH. Now, invoke increase_my_balance: starknet invoke \\ --address PROXY_CONTRACT \\ --abi proxy_contract_abi.json \\ --function increase_my_balance \\ --inputs BALANCE_CLASS_HASH 12321 This increases the balance in the proxy contract’s storage using the increase_balance() function of the balance contract class. Unlike a regular contract call, here the balance of the calling contract (rather than of another contract) is modified. Note: you can use library call to invoke a function that changes a storage variable which wasn’t defined in the calling contract. In such a case, the new corresponding storage variable will be created in the calling contract, but it won’t be easily accessible (you can access it by a second library call, or directly using storage_read()).","title":"Calling another contract","component":"documentation","version":"","name":"calling_contracts","url":"/documentation/getting_started/calling_contracts/","titles":[{"text":"Getting the current contract’s address","hash":"getting-the-current-contract-s-address","id":1},{"text":"Library calls","hash":"library-calls","id":2}]},"6":{"id":6,"text":"To get transaction information run the following: starknet get_transaction --hash TRANSACTION_HASH The output should resemble: { \"block_hash\": \"0x0\", \"block_number\": 0, \"status\": \"ACCEPTED_ON_L2\", \"transaction\": { \"calldata\": [ \"0x1\", \"$[INTRO_CONTRACT_ADDRESS_TRIMMED]\", \"0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320\", \"0x0\", \"0x1\", \"0x1\", \"0x4d2\" ], \"contract_address\": \"$[ACCOUNT_ADDRESS_TRIMMED]\", \"max_fee\": \"0x0\", \"nonce\": \"0x3\", \"signature\": [ \"0x26ee1f973def2e6d5c7f32aaad96c84dab32df6a62ee0e8b530a72bc5478fe6\", \"0x502b15e440cc2a8a1966f0c973015096715e366fde36a4659c56f84249688e\" ], \"transaction_hash\": \"0x69d743891f69d758928e163eff1e3d7256752f549f134974d4aa8d26d5d7da8\", \"type\": \"INVOKE_FUNCTION\", \"version\": \"0x1\" }, \"transaction_index\": 1 } The result contains: transaction_hash – The hash of the transaction. status – The status of the transaction. For a detailed list of supported transaction statuses, refer to the tx_status usage example. transaction – The transaction data. It may also include each of the following optional fields (according to the transaction’s status): block_hash – The hash of the block containing the transaction. block_number – The sequence number of the block containing the transaction. transaction_index – The index of the transaction within the block containing it. transaction_failure_reason – The reason for the transaction failure. Transaction receipt contains execution information, such as L1L2 interaction and consumed resources, in addition to its block information, similar to get_transaction. To get the transaction’s receipt, run the following: starknet get_transaction_receipt --hash TRANSACTION_HASH The output should resemble: { \"actual_fee\": \"0x0\", \"block_hash\": \"0x0\", \"block_number\": 0, \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"pedersen_builtin\": 2, \"range_check_builtin\": 10 }, \"n_memory_holes\": 25, \"n_steps\": 309 }, \"l2_to_l1_messages\": [ { \"from_address\": \"0x7dacca7a41e893630664a61f4d8ec05550ca1a212849c62417cb3ecf4bad863\", \"payload\": [ \"0x0\", \"0xbc614e\", \"0x3e8\" ], \"to_address\": \"0x9E4c14403d7d9A8A782044E86a93CAE09D7B2ac9\" } ], \"status\": \"ACCEPTED_ON_L2\", \"transaction_hash\": \"0x7797c6673a1a0aeebbcb1c726702e263e5138123124ddef7edd85cd925b11ec\", \"transaction_index\": 2 } The result contains (in addition to get_transaction fields): l2_to_l1_messages – Messages sent from L2 to L1. l1_to_l2_consumed_message – The consumed message, in case the transaction was sent from L1. execution_resources – Resources consumed by the transaction execution. Transaction trace contains execution information in a nested structure of calls; every call, starting from the external transaction, contains a list of inner calls, ordered chronologically. For each such call, the trace holds the following: caller/callee addresses, selector, calldata along with execution information such as its return value, emitted events, and sent messages. To get the transaction’s trace, run the following: starknet get_transaction_trace --hash TRANSACTION_HASH The output should resemble: { \"function_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x1\", \"$[INTRO_CONTRACT_ADDRESS_TRIMMED]\", \"0x15511cc3694f64379908437d6d64458dc76d02482052bfb8a5b33a72c054c77\", \"0x0\", \"0x2\", \"0x2\", \"0xbc614e\", \"0x3e8\" ], \"caller_address\": \"0x0\", \"class_hash\": \"0x74acbf20e655c80c4fa16e3574489073e0093fd8b386d9614ab2d6cf5b866bf\", \"contract_address\": \"0x78d796e87cfa496bffad27be9ed42f2709bd6e32a6366f842fdf38664a1412d\", \"entry_point_type\": \"EXTERNAL\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"pedersen_builtin\": 2, \"range_check_builtin\": 10 }, \"n_memory_holes\": 25, \"n_steps\": 309 }, \"internal_calls\": [ ... ], \"messages\": [], \"result\": [], \"selector\": \"0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad\" }, \"signature\": [ \"0x6e4606a3c0f3bd0eac37ddfbf2645f62c04474e5eac51a2f6225ee7702996a\", \"0x389d0bae9be71ceb3b6092dda9b76279543bc2bfe271c3d05a812c3dbeffeb7\" ], \"validate_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x1\", \"0x39564c4f6d9f45a963a6dc8cf32737f0d51a08e446304626173fd838bd70e1c\", \"0x15511cc3694f64379908437d6d64458dc76d02482052bfb8a5b33a72c054c77\", \"0x0\", \"0x2\", \"0x2\", \"0xbc614e\", \"0x3e8\" ], \"caller_address\": \"0x0\", \"class_hash\": \"0x74acbf20e655c80c4fa16e3574489073e0093fd8b386d9614ab2d6cf5b866bf\", \"contract_address\": \"0x78d796e87cfa496bffad27be9ed42f2709bd6e32a6366f842fdf38664a1412d\", \"entry_point_type\": \"EXTERNAL\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"ecdsa_builtin\": 1, \"range_check_builtin\": 2 }, \"n_memory_holes\": 0, \"n_steps\": 89 }, \"internal_calls\": [], \"messages\": [], \"result\": [], \"selector\": \"0x162da33a4585851fe8d3af3c2a9c60b557814e221e0d4f30ff0b2189d9c7775\" } } You can estimate the fee of a given transaction before executing it by adding the --estimate_fee flag to the invoke or declare commands. This will simulate the transaction and return the estimated fee associated with it. You can read more about the fee mechanism here. The result is presented in WEI and ETH, as shown below. Note that with the --estimate_fee flag, the state of the contracts does not change. For example, the following code will not affect the balance stored in BALANCE_CONTRACT. To estimate the fee of a given transaction run the following: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function increase_balance \\ --inputs 1234 \\ --estimate_fee The output should resemble: The estimated fee is: 756800000000000 WEI (0.000757 ETH). Gas usage: 7568 Gas price: 100000000000 WEI The --simulate flag is similar to --estimate_fee, except that it also returns the trace produced by executing the transaction. Note that with the --simulate flag, as with --estimate_fee, the state of the contracts does not change. For example, the command below will not affect the balance stored in BALANCE_CONTRACT. To simulate the execution of a given transaction run the following: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function increase_balance \\ --inputs 1234 \\ --simulate The output should resemble: The estimated fee is: 756800000000000 WEI (0.000757 ETH). Gas usage: 7568 Gas price: 100000000000 WEI { \"function_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x1\", \"$[INTRO_CONTRACT_ADDRESS_TRIMMED]\", \"0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320\", \"0x0\", \"0x1\", \"0x1\", \"0x4d2\" ], \"caller_address\": \"0x0\", \"class_hash\": \"$[ACCOUNT_CLASS_HASH]\", \"contract_address\": \"$[ACCOUNT_ADDRESS_TRIMMED]\", \"entry_point_type\": \"EXTERNAL\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"range_check_builtin\": 2 }, \"n_memory_holes\": 3, \"n_steps\": 206 }, \"internal_calls\": [ ... ], \"messages\": [], \"result\": [], \"selector\": \"0x15d40a3d6ca2ac30f4031e42be28da9b056fef9bb7357ac5e85627ee876e5ad\" }, \"signature\": [ \"0x6501fcc88705e138910cf5d8f88cedbc7b6ffde47da5562a94dbc834ce92f4e\", \"0x52371924f8c82221dd895d705eac391f7faefb57b9c55293ede92990355e086\" ], \"validate_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x1\", \"$[INTRO_CONTRACT_ADDRESS_TRIMMED]\", \"0x362398bec32bc0ebb411203221a35a0301193a96f317ebe5e40be9f60d15320\", \"0x0\", \"0x1\", \"0x1\", \"0x4d2\" ], \"caller_address\": \"0x0\", \"class_hash\": \"$[ACCOUNT_CLASS_HASH]\", \"contract_address\": \"$[ACCOUNT_ADDRESS_TRIMMED]\", \"entry_point_type\": \"EXTERNAL\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"ecdsa_builtin\": 1, \"range_check_builtin\": 2 }, \"n_memory_holes\": 0, \"n_steps\": 89 }, \"internal_calls\": [], \"messages\": [], \"result\": [], \"selector\": \"0x162da33a4585851fe8d3af3c2a9c60b557814e221e0d4f30ff0b2189d9c7775\" } } Once the deploy transaction is accepted on-chain, you will be able to see the code of the contract you have just deployed. The output consists of a list of bytecodes, rather than the source code. This is because the Starknet network gets the contract after compilation. To get the contract at a specific address, run the following command: starknet get_code --contract_address ${CONTRACT_ADDRESS} The output should resemble: { \"abi\": [ { \"inputs\": [ { \"name\": \"amount\", \"type\": \"felt\" } ], \"name\": \"increase_balance\", \"outputs\": [], \"type\": \"function\" }, ... \"0x48127ffb7fff8000\", \"0x48127ffb7fff8000\", \"0x48127ffb7fff8000\", \"0x208b7fff7fff7ffe\" ] } To get the full class compatible with a specific hash, run the following command: starknet get_class_by_hash --class_hash CLASS_HASH The output should resemble: { \"abi\": [ { \"inputs\": [ { \"name\": \"amount\", \"type\": \"felt\" } ], \"name\": \"increase_balance\", \"outputs\": [], \"type\": \"function\" }, ... } } To get the full contract class of a contract at a specific address, run the following command: starknet get_full_contract --contract_address ${CONTRACT_ADDRESS} The output should resemble: { \"abi\": [ { \"inputs\": [ { \"name\": \"amount\", \"type\": \"felt\" } ], \"name\": \"increase_balance\", \"outputs\": [], \"type\": \"function\" }, ... } } To get the hash of a contract at a specific address, run the following command: starknet get_class_hash_at --contract_address ${CONTRACT_ADDRESS} The output should resemble: 0x2951dd06d31f492e8ed1e91da115dbcd3ffd7c688f39b4878db99d86995e4c Instead of querying a specific contract or transaction, you may want to query an entire block and examine the transactions contained within it. To do this, run the following: starknet get_block --number BLOCK_NUMBER The output should resemble: { \"block_hash\": \"0x15344d9ce0bd1aa5d7577885c0bef948494ac926a9b7080c45ef2754bb2a59a\", \"block_number\": 0, \"gas_price\": \"0x174876e800\", \"parent_block_hash\": \"0x19bbfaf06c332eda3d6a0f3bf45583d4312707435e8df265a02524853c7491e\", \"sequencer_address\": \"0x310959e4d55cfe4712291a5f9787893fb392d1ffb96905aba549b21e91e9fc9\", \"starknet_version\": \"$[VERSION]\", \"state_root\": \"079354de0075c5c1f2a6af40c7dd70a92dc93c68b54ecc327b61c8426fea177c\", \"status\": \"ACCEPTED_ON_L2\", \"timestamp\": 105, \"transaction_receipts\": [ { \"actual_fee\": \"0x0\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": {}, \"n_memory_holes\": 0, \"n_steps\": 41 }, \"l2_to_l1_messages\": [], \"transaction_hash\": \"0x7f00beb6bd9ee1cb5bc6eaf824d0be2f2d5b3580955085c99ff0fc7228dcc07\", \"transaction_index\": 0 } ], \"transactions\": [ { \"class_hash\": \"0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d\", \"constructor_calldata\": [ \"0x5e797f7945a9a34ad6ab316302b5e752645e07e6d9dcc494fd4bb05da849520\" ], \"contract_address\": \"0x4c16242a45b33e2bf7517a2b757ceba7021d31d0f18b675e3670163ebbafec\", \"contract_address_salt\": \"0x5d0a87ee7d3b7c70f8683a9f13c12f2fa36c83bbe2b0fa85f6dc9256faf6a\", \"max_fee\": \"0x0\", \"nonce\": \"0x0\", \"signature\": [ \"0x3216167b64f5daf104c820d7dfe5df93df158464b10cf5537ed898b2c5ddee7\", \"0x76a7d396f5ac4275c97461763e4737829d81ce767aa4cf16d53f0a9ee89bcfc\" ], \"transaction_hash\": \"0x7f00beb6bd9ee1cb5bc6eaf824d0be2f2d5b3580955085c99ff0fc7228dcc07\", \"type\": \"DEPLOY_ACCOUNT\", \"version\": \"0x1\" } ] } The result contains: block_hash – The block hash, a unique identifier of the block. parent_block_hash – The block hash of the parent block. block_number – The sequence number of the block, which is the number of blocks prior to this block. state_root – The root of a commitment tree representing the Starknet’s state after the given block. status – The status of the block (for example, ACCEPTED_ON_L2, which means that the block was created but has not been accepted on-chain yet). timestamp – A timestamp representing the time this block was created. transaction_receipts – Information about the transaction status and the corresponding L1L2 interaction, for every transaction included in the block. transactions – A mapping of the transactions included in the block, according to their transaction hashes. Note that these are the same hashes used in the transaction_receipts mapping. To query the pending block, simply pass --number=pending. To query a block by hash, use --hash instead. Note that at most one of these arguments can be given. You can retrieve the nonce of a contract (usually, an account contract) using the following command: starknet get_nonce --contract_address ${ACCOUNT_ADDRESS} Note that the nonce returned by this command is advanced only once the transaction reaches the pending (or later) state. Instead of querying a specific transaction, you may want to query an entire block and examine the traces of all the transactions contained within it (see get_transaction_trace above). To do this, run the following: starknet get_block_traces --number BLOCK_NUMBER The output should resemble: { \"traces\": [ { \"function_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x7a9e2c42b232648a4f974495cad18734c7d06c70b28f257715bf1d051d7ef38\" ], \"caller_address\": \"0x0\", \"class_hash\": \"0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d\", \"contract_address\": \"0x1271fa9e5d66cfb372e81591ccfa7107d6adfd4eea65a0023ced14be367a5d2\", \"entry_point_type\": \"CONSTRUCTOR\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": {}, \"n_memory_holes\": 0, \"n_steps\": 41 }, \"internal_calls\": [], \"messages\": [], \"result\": [], \"selector\": \"0x28ffe4ff0f226a9107253e17a904099aa4f63a02a5621de0576e5aa71bc5194\" }, \"signature\": [ \"0x3216167b64f5daf104c820d7dfe5df93df158464b10cf5537ed898b2c5ddee7\", \"0x76a7d396f5ac4275c97461763e4737829d81ce767aa4cf16d53f0a9ee89bcfc\" ], \"transaction_hash\": \"0x43507ba264f550a20f1957b0e63a8f55bff2648ced17e46f9724ef47c26472e\", \"validate_invocation\": { \"call_type\": \"CALL\", \"calldata\": [ \"0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d\", \"0x4f508479b71268536367e6225a9afbba484c753706df0c00bd11b2380e8ce9f\", \"0xf00de10171648ba2d82921388340bf47c83fe18921a7e71f4ded556099b5a5\" ], \"caller_address\": \"0x0\", \"class_hash\": \"0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d\", \"contract_address\": \"0x65fced1e7b6b3cf219cda7611966f72068780ad9b514d9bc4e60226f3c30d28\", \"entry_point_type\": \"EXTERNAL\", \"events\": [], \"execution_resources\": { \"builtin_instance_counter\": { \"ecdsa_builtin\": 1 }, \"n_memory_holes\": 0, \"n_steps\": 75 }, \"internal_calls\": [], \"messages\": [], \"result\": [], \"selector\": \"0x36fcbf06cd96843058359e1a75928beacfac10727dab22a3972f0af8aa92895\" } } ] } You can use the following command to get the state changes in a specific block (for example, what storage cells have changed): starknet get_state_update --block_number BLOCK_NUMBER The output should resemble: { \"block_hash\": \"0x703fad93522cd338891ce4e009ca3d71ff742a31fcf87c46d8a5f644e77fbe3\", \"new_root\": \"0714e01d3a891f71aeaea0dc1af25958fdb71aa0566773e9e208c8ea1adfd3ab\", \"old_root\": \"02e5810fb9ecbb8d561bcb54b03cfcc3f1b88eda7043148291e2eb974e5ba16c\", \"state_diff\": { \"declared_contracts\": [], \"deployed_contracts\": [ { \"address\": \"0x3a0c6f9001e69edf3c5750475455010ad36eecc6084ebe9ed2c0aa45d029281\", \"class_hash\": \"0x1fac3074c9d5282f0acc5c69a4781a1c711efea5e73c550c5d9fb253cf7fd3d\" } ], \"nonces\": {}, \"storage_diffs\": { \"0x304a44f9c5a902743a96071794c89959bf2435bd8ebb24ee88bf55ed2b02c04\": [ { \"key\": \"0x3b28019ccfdbd30ffc65951d94bb85c9e2b8434111a000b5afd533ce65f57a4\", \"value\": \"0x64e10e4399a5760d8db27ea20311380c2cb02063dbd34da731a083b3074c34e\" } ] } } } The result contains: block_hash – The block hash, a unique identifier of the block. new_root – The root of a commitment tree representing the Starknet’s state after the given block. old_root – The root of a commitment tree representing the Starknet’s state before the given block. state_diff – The changes in the state applied in this block, given as a mapping of addresses to the new values and/or new contracts. To query the last block, simply remove the --block_number argument. To query a block by hash, use --block_hash instead. Note that at most one of these arguments can be given. Other than querying the contract’s code, you may also want to query the contract’s storage at a specific key. To do so, you first need to understand which key is of interest to you. As you saw before, Starknet introduces a new primitive, which is storage variables. Each storage variable is mapped to a storage key (a field element). To compute this key, run the following Python code: from starkware.starknet.public.abi import get_storage_var_address balance_key = get_storage_var_address('balance') print(f'Balance key: {balance_key}') You should get: Balance key: 916907772491729262376534102982219947830828984996257231353398618781993312401 Now, you can query the balance using: starknet get_storage_at \\ --contract_address ${CONTRACT_ADDRESS} \\ --key 916907772491729262376534102982219947830828984996257231353398618781993312401 Using the same contract we have used so far, you should get: 0x4d2 Note that this is the same result obtained by the call to get_balance. Later on, at the user authentication section, you will see a generalization of storage variables, which allows, for example, having a balance variable for each user. This will require minor adjustments to the code above, which we will review in the relevant section. Some of the aforementioned CLI functions have an additional argument, --block_hash, which applies the given query to a specific block. For example, you may want to query the balance variable at some specific point in time. To find out whether a CLI function can be executed as a block-specific query, simply use the --help argument to see if --block_hash is part of the optional arguments for that function. In case you do not use the --block_hash argument, the query will be applied to the last block.","title":"More CLI commands","component":"documentation","version":"","name":"cli","url":"/documentation/getting_started/cli/","titles":[{"text":"get_transaction","hash":"get-transaction","id":1},{"text":"get_transaction_receipt","hash":"get-transaction-receipt","id":2},{"text":"get_transaction_trace","hash":"get-transaction-trace","id":3},{"text":"Estimate fee","hash":"estimate-fee","id":4},{"text":"Simulate transaction","hash":"simulate-transaction","id":5},{"text":"get_code","hash":"get-code","id":6},{"text":"get_class_by_hash","hash":"get-class-by-hash","id":7},{"text":"get_full_contract","hash":"get-full-contract","id":8},{"text":"get_class_hash_at","hash":"get-class-hash-at","id":9},{"text":"get_block","hash":"get-block","id":10},{"text":"get_nonce","hash":"get-nonce","id":11},{"text":"get_block_traces","hash":"get-block-traces","id":12},{"text":"get_state_update","hash":"get-state-update","id":13},{"text":"get_storage_at","hash":"get-storage-at","id":14},{"text":"Block-specific queries","hash":"block-specific-queries","id":15}]},"7":{"id":7,"text":"A contract may need to initialize its state before it is ready for public use. For example, one may want to designate a contract owner, that can do certain operations that other users can’t. Setting a storage variable to the owner can be done by the contract constructor. The contract constructor is defined using the @constructor decorator and its name must be constructor. The constructor semantics are similar to that of any other external function, except that the constructor is guaranteed to run during the contract deployment and it cannot be invoked again after the contract is deployed. For example, we can define an ownable contract as follows: %lang starknet from starkware.cairo.common.cairo_builtins import HashBuiltin // Define a storage variable for the owner address. @storage_var func owner() -> (owner_address: felt) { } @constructor func constructor{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(owner_address: felt) { owner.write(value=owner_address); return (); } @view func get_owner{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }() -> (address: felt) { let (address) = owner.read(); return (address=address); } Save the contract as ownable.cairo and then compile and declare it. starknet-compile ownable.cairo \\ --output ownable_compiled.json \\ --abi ownable_abi.json starknet declare --contract ownable_compiled.json After compiling the contract, you can deploy it. When you deploy the contract, replace ${OWNABLE_CLASS_HASH} with the class hash you got from starknet declare, and pass the arguments using the --inputs flag. The number of inputs must match the signature of the constructor, or the deploy transaction will fail. starknet deploy --class_hash ${OWNABLE_CLASS_HASH} --inputs 123 When a contract is deployed, the contract address, contract class hash and the constructor calldata are included in the on-chain data.","title":"Constructors","component":"documentation","version":"","name":"constructors","url":"/documentation/getting_started/constructors/","titles":[]},"8":{"id":8,"text":"There are cases where the contract entry points are not known in advance. The most prominent example is a delegate proxy that forwards calls to an implementation contract class. Such a proxy can be implemented using the __default__ entry point as follows: %lang starknet %builtins pedersen range_check bitwise from starkware.cairo.common.cairo_builtins import HashBuiltin from starkware.starknet.common.syscalls import library_call // The implementation class hash. @storage_var func implementation_hash() -> (class_hash: felt) { } @constructor func constructor{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(implementation_hash_: felt) { implementation_hash.write(value=implementation_hash_); return (); } @external @raw_input @raw_output func __default__{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(selector: felt, calldata_size: felt, calldata: felt*) -> ( retdata_size: felt, retdata: felt* ) { let (class_hash) = implementation_hash.read(); let (retdata_size: felt, retdata: felt*) = library_call( class_hash=class_hash, function_selector=selector, calldata_size=calldata_size, calldata=calldata, ); return (retdata_size=retdata_size, retdata=retdata); } The __default__ entry point is executed if the requested selector does not match any of the entry point selectors in the contract. The @raw_input decorator instructs the compiler to pass the calldata as-is to the entry point, instead of parsing it into the requested arguments. In such a case, the function’s arguments must be selector, calldata_size and calldata. Similarly, the @raw_output decorator instructs the compiler not to process the function’s return value. In such a case the function’s return values must be retdata_size and retdata. Let’s see how to use this proxy pattern. Create a file named balance_contract.cairo containing the example balance contract code in Writing Starknet contracts and declare that contract as explained in Declare the contract on the Starknet testnet. Denote the hash of the new contract class by ${BALANCE_CLASS_HASH}. Now, create a file named delegate_proxy.cairo containing the proxy code above, and declare the contract the same way as balance_contract.cairo. Denote the hash of the new contract by ${DELEGATE_PROXY_CLASS_HASH}, and deploy that contract, with the value ${BALANCE_CLASS_HASH} for the implementation_hash_ constructor argument: starknet deploy \\ --class_hash ${DELEGATE_PROXY_CLASS_HASH} \\ --inputs ${BALANCE_CLASS_HASH} Denote the address of the new contract by PROXY_CONTRACT. Invoke the increase_balance function of the balance class through the delegate proxy contract. You should use the address of the delegate proxy contract with the ABI of the implementation class, which is where the invoked function is defined. The rest of the parameters are as expected – the inputs of the function. starknet invoke \\ --address PROXY_CONTRACT \\ --abi balance_contract_abi.json \\ --function increase_balance \\ --inputs 10000 This will increase the balance stored in the proxy contract. Note that in our case, the implementation balance contract was only declared and not deployed, so it does not have storage of its own. In a similar way to __default__, the __l1_default__ entry point is executed when an L1 handler is invoked but the requested selector is missing. This entry point in combination with the library_call_l1_handler system call can be used to forward L1 handlers as follows: from starkware.starknet.common.syscalls import ( library_call_l1_handler, ) @l1_handler @raw_input func __l1_default__{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(selector: felt, calldata_size: felt, calldata: felt*) { let (class_hash) = implementation_hash.read(); library_call_l1_handler( class_hash=class_hash, function_selector=selector, calldata_size=calldata_size, calldata=calldata, ); return (); } The library_call_l1_handler system call is similar to library_call except that it invokes an l1_handler entry point instead of an external entry point. The system call does not consume an L1 → L2 message as in the typical use case, the relevant message is consumed by the L1 handler that issued the system call. Note that calling library_call_l1_handler outside of an L1 handler may be dangerous, as the called handler is likely to assume the appropriate message was consumed.","title":"Default entry point","component":"documentation","version":"","name":"default_entrypoint","url":"/documentation/getting_started/default_entrypoint/","titles":[]},"9":{"id":9,"text":"A contract may use the deploy system call in order to deploy another contract. Note that the contract class of the deployed contract must be declared before the transaction invoking the system call. The deploy system call is defined as follows: func deploy{syscall_ptr: felt*}( class_hash: felt, contract_address_salt: felt, constructor_calldata_size: felt, constructor_calldata: felt*, deploy_from_zero: felt, ) -> (contract_address: felt) { } As seen above, the deploy syscall expects the following arguments: class_hash: The class hash of the contract to deploy. contract_address_salt: An arbitrary value used to determine the address of the new contract. Using the same salt, the same class_hash and the same constructor arguments from the same contract will result in the same address, which means that the second deploy will fail. constructor_calldata_size: The size of the constructor’s arguments (calldata). Note that this may differ from the number of arguments in the cases where not all the arguments are felts. constructor_calldata: A pointer to an array containing the arguments for the constructor. deploy_from_zero: A flag determining whether the deployer’s address will affect the contract address or not. When equal to TRUE, the contract address computation will use 0 instead of the deployer address. When equal to FALSE, the actual deployer’s address will be used. The syscall returns contract_address: the address of the newly deployed contract. Consider the ownable contract in Constructors. The following contract is an example of using the deploy system call to deploy new instances of the ownable contract: %lang starknet from starkware.cairo.common.alloc import alloc from starkware.cairo.common.bool import FALSE from starkware.cairo.common.cairo_builtins import HashBuiltin from starkware.starknet.common.syscalls import deploy // Define a storage variable for the salt. @storage_var func salt() -> (value: felt) { } // Define a storage variable for the class hash of ownable_contract. @storage_var func ownable_class_hash() -> (value: felt) { } // An event emitted whenever deploy_ownable_contract() is called. @event func ownable_contract_deployed(contract_address: felt) { } @constructor func constructor{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(ownable_class_hash_: felt) { ownable_class_hash.write(value=ownable_class_hash_); return (); } @external func deploy_ownable_contract{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(owner_address: felt) { let (current_salt) = salt.read(); let (class_hash) = ownable_class_hash.read(); let (contract_address) = deploy( class_hash=class_hash, contract_address_salt=current_salt, constructor_calldata_size=1, constructor_calldata=cast(new (owner_address,), felt*), deploy_from_zero=FALSE, ); salt.write(value=current_salt + 1); ownable_contract_deployed.emit( contract_address=contract_address ); return (); } Note that the above will work only if the desired class has been previously declared. Save the new contract file as ownable_contract_deployer.cairo. Compile and declare the ownable contract as explained in Constructors. Note that you don’t need to deploy an instance of the contract, declaring the contract class is enough when using the deploy system call. See more details about the declare transaction in Declare the contract on the Starknet testnet. Set an environment variable named OWNABLE_CLASS_HASH to the class hash of ownable_contract.cairo. Compile and declare ownable_contract_deployer.cairo: starknet-compile ownable_contract_deployer.cairo \\ --output ownable_contract_deployer_compiled.json \\ --abi ownable_contract_deployer_abi.json starknet declare --contract ownable_contract_deployer_compiled.json Deploy the contract: starknet deploy --class_hash ${OWNABLE_DEPLOYER_CLASS_HASH} \\ --inputs ${OWNABLE_CLASS_HASH} where ${OWNABLE_DEPLOYER_CLASS_HASH} is the value of class_hash. Choose an arbitrary value for the owner address, and denote it by OWNER_ADDRESS. Now, invoke deploy_ownable_contract with OWNER_ADDRESS as the value of the owner_address argument. Make sure the CONTRACT_ADDRESS environment variable is set to the address you got when you deployed the contract: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi ownable_contract_deployer_abi.json \\ --function deploy_ownable_contract \\ --inputs OWNER_ADDRESS This will deploy a new ownable_contract with OWNER_ADDRESS as the owner address. The address of the contract is emitted and it is visible through the transaction receipt as explained in Events. The data in the events section contains the address of the deployed contract. The events section of the receipt should look like: \"events\": [ { \"data\": [ \"0x338027db29a197a7d5dbd49f1e15c9b6702d6a16758dda905efc751bb117153\" ], \"from_address\": \"0x7569242709918b8929078d3178ed14588348fb5459b44a41f100eb9a67dbeb6\", \"keys\": [ \"0x2902eb93dff1da1a2de652946319fafe27b03601628834219f8738fc9b361d7\" ] } ] Use the following command to query the owner address. Replace OWNABLE_CONTRACT_ADDRESS with the address of the deployed ownable_contract: starknet call \\ --address OWNABLE_CONTRACT_ADDRESS \\ --abi ownable_abi.json \\ --function get_owner The value returned should be the OWNER_ADDRESS used before. In the future, using the deploy syscall will be the only way to deploy new contracts.","title":"Deploying a contract by another contract","component":"documentation","version":"","name":"deploying_from_contracts","url":"/documentation/getting_started/deploying_from_contracts/","titles":[{"text":"The deploy system call","hash":"the-deploy-system-call","id":1},{"text":"Using the contract","hash":"using-the-contract","id":2}]},"10":{"id":10,"text":"The Starknet event mechanism allows a contract to output information during its execution that can later be used outside of Starknet. For example, consider a token contract that allows transfers of tokens between users. By only querying Starknet storage, a user can only see how many tokens they have, and not who transferred those tokens. An event, emitted by the contract whenever funds are transferred, can be used to allow the user to get this information. Consider the contract described in Adding User Authentication. Let’s add an event whenever the increase_balance() function is called. Start by defining the event: // An event emitted whenever increase_balance() is called. // current_balance is the balance before it was increased. @event func increase_balance_called( current_balance: felt, amount: felt ) { } Add the following lines before the return() statement in increase_balance(): // Emit the event. increase_balance_called.emit(current_balance=res, amount=amount); Save the new contract file as events.cairo. You can find the full contract here. Compile and declare the contract: starknet-compile events.cairo \\ --output events_compiled.json \\ --abi events_abi.json starknet declare --contract events_compiled.json Deploy the contract: starknet deploy --class_hash ${EVENTS_CLASS_HASH} where ${EVENTS_CLASS_HASH} is the value of class_hash. Invoke increase_balance(): starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi events_abi.json \\ --function increase_balance \\ --inputs 4321 Wait for the transaction to be accepted (when its status is PENDING at least) and run the following line to see the emitted event (replace ${TRANSACTION_HASH} with the transaction hash you got from the last command): starknet get_transaction_receipt --hash ${TRANSACTION_HASH} Consider the events section of the output. It should resemble: \"events\": [ { \"data\": [ \"0x0\", \"0x10e1\" ], \"from_address\": \"0x14acf3b7e92f97adee4d5359a7de3d673582f0ce03d33879cdbdbf03ec7fa5d\", \"keys\": [ \"0x3db3da4221c078e78bd987e54e1cc24570d89a7002cefa33e548d6c72c73f9d\" ] } ] The result contains the following fields: from_address – The address of the contract emitting the event. data – The arguments passed to increase_balance_called.emit: the balance before (0) and the amount (4321==0x10e1). key – The event’s key, which is derived from the name of the event (increase_balance_called). If your contract emits more than one type of event, you can use this field to distinguish between them. You can use Python to get the event key from its name: from starkware.starknet.compiler.compile import \\ get_selector_from_name print(hex(get_selector_from_name('increase_balance_called'))) Note that Starknet currently does not have an API to fetch all events from a given contract.","title":"Events","component":"documentation","version":"","name":"events","url":"/documentation/getting_started/events/","titles":[]},"11":{"id":11,"text":"Starknet is a permissionless decentralized ZK-Rollup operating as an L2 network over Ethereum, where any dApp can achieve unlimited scale for its computation, without compromising Ethereum’s composability and security. Currently, Starknet’s first step, Starknet Alpha, is deployed. This tutorial walks you through writing and deploying a Starknet contract.","title":"Getting started","component":"documentation","version":"","name":"index","url":"/documentation/getting_started/","titles":[]},"12":{"id":12,"text":"In order to follow this tutorial you should have basic familiarity with writing Cairo code. For example, you can read the first few pages of the Hello, Cairo tutorial. You should also set up your environment and make sure your installed Cairo version is at least 0.10.0 (you can check your version by running cairo-compile --version). Let’s start by looking at the following Starknet contract: // Declare this file as a Starknet contract. %lang starknet from starkware.cairo.common.cairo_builtins import HashBuiltin // Define a storage variable. @storage_var func balance() -> (res: felt) { } // Increases the balance by the given amount. @external func increase_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(amount: felt) { let (res) = balance.read(); balance.write(res + amount); return (); } // Returns the current balance. @view func get_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }() -> (res: felt) { let (res) = balance.read(); return (res=res); } The first line, %lang starknet declares that this file should be read as a Starknet contract file, rather than a regular Cairo program file. Trying to compile this file with cairo-compile will result in a compilation error. Compiling Starknet contracts should be done with the starknet-compile command as we shall see below. Next, we have an import statement. If you’re not familiar with this type of statement, refer to the Hello, Cairo tutorial. Note that you don’t need to explicitly use the %builtins directive in Starknet contracts. The first new primitive that we see in the code is @storage_var. Unlike a Cairo program, which is stateless, Starknet contracts have a state, called “the contract’s storage”. Transactions invoked on such contracts may modify this state, in a way defined by the contract. The @storage_var decorator declares a variable which will be kept as part of this storage. In our case, this variable consists of a single felt, called balance. To use this variable, we will use the balance.read() and balance.write() functions which are automatically created by the @storage_var decorator. When a contract is deployed, all its storage cells are initialized to zero. In particular, all storage variables are initially zero. Starknet contracts have no main() function. Instead, each function may be annotated as an external function (using the @external decorator). External functions may be called by the users of Starknet, and by other contracts (see Calling another contract). In our case, the contract has two external functions: increase_balance reads the current value of balance from the storage, adds the given amount to it and writes the new value back to storage. get_balance simply reads the balance and returns its value. The @view decorator is identical to the @external decorator. The only difference is that the method is annotated as a method that only queries the state rather than modifying it. Note that in the current version this is not enforced by the compiler. Consider the three implicit arguments: syscall_ptr, pedersen_ptr and range_check_ptr: You should be familiar with pedersen_ptr, which allows to compute the Pedersen hash function, and range_check_ptr, which allows to compare integers. But it seems that the contract doesn’t use any hash function or integer comparison, so why are they needed? The reason is that storage variables require these implicit arguments in order to compute the actual memory address of this variable. This may not be needed in simple variables such as balance, but with maps (see Storage maps) computing the Pedersen hash is part of what read() and write() do. syscall_ptr is a new primitive, unique to Starknet contracts (it doesn’t exist in Cairo). syscall_ptr allows the code to invoke system calls. It is also an implicit argument of read() and write() (required, in this case, because storage access is done using system calls). If you are familiar with programming in Cairo, you are probably familiar with hints. Unfortunately (or fortunately, depending on your personal opinion), using hints in Starknet is not possible. This is due to the fact that the contract’s author, the user invoking the function and the operator running it are likely to be different entities: The operator cannot run arbitrary Python code due to security concerns. The user won’t be able to verify that the operator ran the hint the contract author supplied. It is not possible to prove that nondeterministic code failed, since you should either prove you executed the hint or prove that for any hint the code would’ve failed. For efficiency, hints are still used by the standard library functions, through a mechanism of whitelisting (a function is whitelisted by an operator if it agrees to run it, when it knows that it can run its hints successfully. It doesn’t have to do with the question of the soundness of the library function, which should be verified separately). This means that not all the Cairo library functions can be used when writing a Starknet contract. See here for a list of the whitelisted library functions. Create a file named contract.cairo and copy the contract code into it. Run the following command to compile your contract: starknet-compile contract.cairo \\ --output contract_compiled.json \\ --abi contract_abi.json As mentioned above, we can’t compile Starknet contract using cairo-compile and we need to use starknet-compile instead. Let’s examine the file contract_abi.json that was created during the contract’s compilation: [ { \"inputs\": [ { \"name\": \"amount\", \"type\": \"felt\" } ], \"name\": \"increase_balance\", \"outputs\": [], \"type\": \"function\" }, { \"inputs\": [], \"name\": \"get_balance\", \"outputs\": [ { \"name\": \"res\", \"type\": \"felt\" } ], \"stateMutability\": \"view\", \"type\": \"function\" } ] The ABI file contains a list of all the callable functions and their expected inputs. In order to instruct the CLI to work with the Starknet testnet you should either pass --network=alpha-goerli on every use, or set the STARKNET_NETWORK environment variable as follows: export STARKNET_NETWORK=alpha-goerli Unlike Ethereum, Starknet distinguishes between a contract class and a contract instance. A contract class represents the code of a contract (but with no state), while a contract instance represents a specific instance of the class, with its own state. Run the following command to declare your contract class on the Starknet testnet: starknet declare --contract contract_compiled.json The output should look like: Declare transaction was sent. Contract class hash: 0x1e2208b571b2cb68908f37a196ed5e391c8933a6db23bb3939acedee40d9b8a Transaction hash: 0x762e166dd3326b2e263eb5bcfdccd225dc88e067fdf7c92cf8ce5e4ea01f9f1 You can see here the class hash of your new contract. You’ll need this class hash in order to deploy an instance of the contract using the deploy system call. The alpha release is an experimental release. Newer versions may require a reset of the network’s state (resulting in the removal of the deployed contracts). Run the following command to deploy your contract on the Starknet testnet (replace $CLASS_HASH with the class hash you got from starknet declare): starknet deploy --class_hash $CLASS_HASH The output should look like: Invoke transaction for contract deployment was sent. Contract address: 0x039564c4f6d9f45a963a6dc8cf32737f0d51a08e446304626173fd838bd70e1c Transaction hash: 0x125e4bc5251af8ee2664ea0d1495b36c593f25f78f1a78f637a3f7aafa9e22 You can see here the address of your new contract. You’ll need this address to interact with the contract. Set the following environment variable: # The deployment address of the previous contract. export CONTRACT_ADDRESS=\"\" Run the following command to invoke the increase_balance(): starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function increase_balance \\ --inputs 1234 The result should look like: Invoke transaction was sent. Contract address: 0x039564c4f6d9f45a963a6dc8cf32737f0d51a08e446304626173fd838bd70e1c Transaction hash: 0x69d743891f69d758928e163eff1e3d7256752f549f134974d4aa8d26d5d7da8 Due to the use of fees in Starknet, every interaction with a contract through a function invocation must be done using an account. To set up an account, see Setting up a Starknet account. The following command allows you to query the transaction status based on the transaction hash that you got (here you’ll have to replace TRANSACTION_HASH with the transaction hash printed by starknet invoke): starknet tx_status --hash TRANSACTION_HASH The result should look like: { \"block_hash\": \"0x0\", \"tx_status\": \"ACCEPTED_ON_L2\" } The possible statuses are: NOT_RECEIVED: The transaction has not been received yet (i.e., not written to storage). RECEIVED: The transaction was received by the sequencer. PENDING: The transaction passed the validation and entered the pending block. REJECTED: The transaction failed validation and thus was skipped. ACCEPTED_ON_L2: The transaction passed the validation and entered an actual created block. ACCEPTED_ON_L1: The transaction was accepted on-chain. Use the following command to query the current balance: starknet call \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function get_balance The result should be: 1234 To see the up-to-date balance you should wait until the increase_balance transaction status is at least ACCEPTED_ON_L2 (that is, ACCEPTED_ON_L2 or ACCEPTED_ON_L1). Otherwise, you’ll see the balance before the execution of the increase_balance transaction (that is, 0). In the next section we will describe other CLI functions for querying Starknet’s state. Note that while deploy and invoke affect Starknet’s state, all other functions are read-only. In particular, using call instead of invoke on a function that may change the state, such as increase_balance, will return the result of the function without actually applying it to the current state, allowing the user to dry-run before committing to a state update.","title":"Writing Starknet contracts","component":"documentation","version":"","name":"intro","url":"/documentation/getting_started/intro/","titles":[{"text":"Your first contract","hash":"your-first-contract","id":1},{"text":"Programming without hints","hash":"programming_without_hints","id":2},{"text":"Compile the contract","hash":"compile-the-contract","id":3},{"text":"The contract’s ABI","hash":"the-contract-s-abi","id":4},{"text":"Declare the contract on the Starknet testnet","hash":"declare-the-contract-on-the-starknet-testnet","id":5},{"text":"Deploy the contract on the Starknet testnet","hash":"deploy-the-contract-on-the-starknet-testnet","id":6},{"text":"Interact with the contract","hash":"interact-with-the-contract","id":7},{"text":"Query the balance","hash":"query-the-balance","id":8}]},"13":{"id":13,"text":"One important property of a good L2 system is the ability to interact with the L1 system it’s built on (since otherwise the system is, in fact, isolated). In this section we describe how Starknet contracts can interact with Ethereum L1 contracts. Every Starknet contract may send and receive messages to/from any L1 contract. Usually, it’s recommended to design a pair of contracts: an L2 contract and its L1 contract counterpart (for example, written in Solidity) and decide on the message protocol between the two contracts. Messages from L2 to L1 work as follows: The Starknet (L2) contract function calls the library function send_message_to_l1() in order to send the message. It specifies: The destination L1 contract (to). The data to send (payload). The Starknet OS adds the from address, which is the L2 address of the contract sending the message. Once a state update containing the L2 transaction is accepted on-chain, the message is stored on the L1 Starknet core contract, waiting to be consumed. The L1 contract specified by the to address invokes the consumeMessageFromL2() of the Starknet core contract. Note: Since any L2 contract can send messages to any L1 contract it is recommended that the L1 contract check the from address before processing the transaction. Below we will show how one can use this mechanism to implement a withdrawal transaction. The other direction is similar: The L1 contract calls (on L1) the send_message() function of the Starknet core contract with a message and a fee. The core contract stores the message and the fee. In this case the message includes an additional field - the selector, which determines what function to call in the corresponding L2 contract. Assuming the fee is sufficient, the Starknet Sequencer automatically consumes the message and invokes the requested L2 function of the contract designated by the “to” address. This direction is useful, for example, for deposit transactions. Note that while honest Sequencers automatically consume L1 → L2 messages, it is not enforced by the protocol (so a Sequencer may choose to skip a message). This should be taken into account when designing the message protocol between the two contracts. The Starknet Alpha system is still under development, and therefore from time to time the state of the system will reset and all contracts will be removed. This means that you shouldn’t move valuable assets to the Starknet system, unless you have a way to withdraw them given the removal of the L2 contract. In this section we’ll build a simple token bridge – the user will be able to deposit L1 tokens and their L2 balance will increase. Then, they will be able to withdraw some tokens, which will decrease their L2 balance and increase their L1 balance in return. Start with the %lang directive, a few imports and a few constants: %lang starknet from starkware.cairo.common.alloc import alloc from starkware.cairo.common.cairo_builtins import HashBuiltin from starkware.cairo.common.math import assert_nn from starkware.starknet.common.messages import send_message_to_l1 const L1_CONTRACT_ADDRESS = ( 0x8359E4B0152ed5A731162D3c7B0D8D56edB165A0); const MESSAGE_WITHDRAW = 0; Note that in real applications you may want to maintain the address of the L1 contract as a storage variable, rather than a constant. Then, define the storage variable that holds the balances, together with a getter @view function: // A mapping from a user (L1 Ethereum address) to their balance. @storage_var func balance(user: felt) -> (res: felt) { } @view func get_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: felt) -> (balance: felt) { let (res) = balance.read(user=user); return (balance=res); } Just so we’ll have some “funds” to play with, define a function that can mint new tokens (in real applications you probably wouldn’t want a function that lets the user effectively “print” money. In addition, you’ll want to check that amount is nonnegative): @external func increase_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: felt, amount: felt) { let (res) = balance.read(user=user); balance.write(user, res + amount); return (); } Sending a message to L1 can be useful for withdrawals: The user requesting the withdrawal invokes a withdraw (L2) transaction. The transaction decreases their L2 balance and sends a message to the L1 contract, indicating that the user’s L1 balance should be increased by the withdrawn amount. The L1 counterpart should allow the user to consume the message and increase their balance on L1 when doing so. @external func withdraw{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: felt, amount: felt) { // Make sure 'amount' is positive. assert_nn(amount); let (res) = balance.read(user=user); tempvar new_balance = res - amount; // Make sure the new balance will be positive. assert_nn(new_balance); // Update the new balance. balance.write(user, new_balance); // Send the withdrawal message. let (message_payload: felt*) = alloc(); assert message_payload[0] = MESSAGE_WITHDRAW; assert message_payload[1] = user; assert message_payload[2] = amount; send_message_to_l1( to_address=L1_CONTRACT_ADDRESS, payload_size=3, payload=message_payload, ); return (); } Note that a new implicit argument was added – the system call pointer (syscall_ptr). This argument allows us to invoke some functions of the Starknet OS, including the “send message” function. Sending a message is done at the end of withdraw() by calling send_message_to_l1(), which gets the L1 contract address, the size of the message and the message itself (as a felt*). Note that the message itself is given as a pointer, and therefore the message length must be passed explicitly. In our example, the message data is: MESSAGE_WITHDRAW, user, amount. We choose to use the first element as an indicator of the message type (note that we don’t really need it here since we only have one message type). Now let’s take a look at how the L1 contract counterpart may be written. Consider the withdraw() function: It gets the user and the amount, consumes the message (this part will fail if the message wasn’t received on-chain) and updates the user’s balance accordingly. As you’ll see below, we passed the address of the L2 contract as an argument to the function, so that the contract can be deployed once and used by anyone doing this tutorial. However, normally it doesn’t make sense to get the address of the L2 contract as an argument – the address should be fixed for each instance of the contract. In order to handle a message that was sent from an L1 contract, you should declare an L1 handler: @l1_handler func deposit{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(from_address: felt, user: felt, amount: felt) { // Make sure the message was sent by the intended L1 contract. assert from_address = L1_CONTRACT_ADDRESS; // Read the current balance. let (res) = balance.read(user=user); // Compute and update the new balance. tempvar new_balance = res + amount; balance.write(user, new_balance); return (); } An L1 handler is called by the Starknet OS in order to process a message sent from an L1 contract. A Starknet contract may define a few L1 handlers, and they are identified by an integer value called the selector. You can compute the selector based on the L1 handler name using the following Python code: from starkware.starknet.compiler.compile import \\ get_selector_from_name print(get_selector_from_name('deposit')) You should get: 352040181584456735608515580760888541466059565068553383579463728554843487745 When an L1 contract wants to send a message, it calls the sendMessageToL2() function of the Starknet Core contract specifying the L2 contract address, the selector for the handler to be invoked and the message payload. The message fee is paid in ETH and needs to be sent with the call. See the deposit function in the example L1 contract for an example. Save the new Starknet contract file as l1l2.cairo. You can find the full Cairo file here. Compile and declare the contract: starknet-compile l1l2.cairo \\ --output l1l2_compiled.json \\ --abi l1l2_abi.json starknet declare --contract l1l2_compiled.json Deploy the contract: starknet deploy --class_hash ${L1L2_CLASS_HASH} where ${L1L2_CLASS_HASH} is the value of class_hash. Don’t forget to set the STARKNET_NETWORK environment variable to alpha-goerli before running starknet deploy. Set the following environment variable: # The deployment address of the previous contract. export CONTRACT_ADDRESS=\"\" Choose your favorite USERID, it should be a 251-bit integer value: export USERID=\"\" Invoke the increase_balance function: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi l1l2_abi.json \\ --function increase_balance \\ --inputs \\ ${USERID} \\ 3333 After the balance is increased, invoke the withdraw function: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi l1l2_abi.json \\ --function withdraw \\ --inputs \\ ${USERID} \\ 1000 Call get_balance to check that the balance was computed correctly (remember that you’ll have to wait until the second transaction is included in a block): starknet call \\ --address ${CONTRACT_ADDRESS} \\ --abi l1l2_abi.json \\ --function get_balance \\ --inputs \\ ${USERID} You should get: 2333 Wait for the transaction to be accepted on-chain (this may take some time) – you can use starknet tx_status to track the transaction’s progress. Then, invoke the withdraw() function of the example contract, deployed at address 0x8359E4B0152ed5A731162D3c7B0D8D56edB165A0, with the following arguments: CONTRACT_ADDRESS, USERID, 1000 (where, as before, CONTRACT_ADDRESS is the address of the L2 contract you deployed). After the withdraw() transaction, the user’s L1 balance should be 1000 and their L2 balance should be 2333. After your withdraw() transaction is accepted on-chain, you can deposit some of the withdrawn funds back to L2. Call the deposit() function of the example contract with the following arguments: CONTRACT_ADDRESS, USERID, 600 and pay the message fee in ETH. For the Goerli testnet, you can use a message fee of 0.01 ETH. (Note that the ‘value’ to pay in ETH is displayed as payableAmount in Etherscan.) It may take some time until Starknet processes the incoming message and calls the L1 handler (for example, the system waits for a few blockchain confirmations). But after that time, you’ll be able to see the updated balance of the user by invoking starknet call for get_balance again. The new balances should be: L1 balance – 400 and L2 balance – 2933. You can estimate the L2 costs of a given message from L1 before sending it. The estimate_message_fee command estimates the L2 costs of handling a message from L1 without affecting the contract state. This is similar to using the estimate_fee flag for an invoke function. The result is presented in WEI and ETH, as shown below. First, set the sender address (an L1 address) of the message you wish to simulate. In our case, use the address of the example contract from the last section. export L1_CONTRACT_ADDRESS=0x8359E4B0152ed5A731162D3c7B0D8D56edB165A0 Now, to estimate the fee of a given message (in this example – invoking deposit()) run the following: starknet estimate_message_fee \\ --from_address ${L1_CONTRACT_ADDRESS} \\ --address ${CONTRACT_ADDRESS} \\ --abi l1l2_abi.json \\ --function deposit \\ --inputs \\ ${USERID} \\ 200 The output should resemble: The estimated fee is: 2081700000000000 WEI (0.002082 ETH). Gas usage: 20817 Gas price: 100000000000 WEI","title":"Interacting with L1 contracts","component":"documentation","version":"","name":"l1l2","url":"/documentation/getting_started/l1l2/","titles":[{"text":"Background","hash":"background","id":1},{"text":"Messages from L2 to L1","hash":"messages-from-l2-to-l1","id":2},{"text":"Messages from L1 to L2","hash":"messages-from-l1-to-l2","id":3},{"text":"An example of a simple token bridge","hash":"an-example-of-a-simple-token-bridge","id":4},{"text":"Some preparations","hash":"some-preparations","id":5},{"text":"Sending a message to L1","hash":"sending-a-message-to-l1","id":6},{"text":"Receiving a message from L1","hash":"receiving-a-message-from-l1","id":7},{"text":"Using the contract","hash":"using-the-contract","id":8},{"text":"Estimate message fee","hash":"estimate-message-fee","id":9}]},"14":{"id":14,"text":"A storage variable does not have to be a single field element, it can also be a tuple of several field elements. For example: // A mapping from user to a pair (min, max). @storage_var func range(user: felt) -> (res: (felt, felt)) { } You can read and write this value as follows: @external func extend_range{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: felt) { let (min_max) = range.read(user); range.write(user, (min_max[0] - 1, min_max[1] + 1)); return (); } Note that in this case the range.read() returns one item that is a pair. Thus, let (min, max) = range.read(user); will not work. An argument of a storage variable may also be a struct or a tuple, as long as they don’t contain pointers (such types, that don’t contain pointers, are called felts-only types). For example: struct User { first_name: felt, last_name: felt, } // A mapping from a user to 1 if they voted and 0 otherwise. @storage_var func user_voted(user: User) -> (res: felt) { } @external func vote{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: User) { user_voted.write(user, 1); return (); } An external function may get an array of field elements as an argument. In order to define an array named a, pass two consecutive arguments: a_len of type felt and a of type felt* (the first argument must be named a_len if the second argument is named a). For example: @external func compare_arrays( a_len: felt, a: felt*, b_len: felt, b: felt* ) { assert a_len = b_len; if (a_len == 0) { return (); } assert a[0] = b[0]; return compare_arrays( a_len=a_len - 1, a=&a[1], b_len=b_len - 1, b=&b[1] ); } In order to call compare_arrays with the arrays [10, 20, 30, 40] and [50, 60], you should pass the following inputs to starknet invoke: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function compare_arrays \\ --inputs 4 10 20 30 40 2 50 60 The first value, 4, is the length of the first array, then its 4 entires. After that, we have the length of the second arrays (2) followed by its entries. Note that calling compare_arrays with the aforementioned arguments will fail as the arrays are different. A Starknet contract using array arguments in external functions must have the range_check builtin, which is used to validate that the array’s length is nonnegative. Calldata arguments and return values may be of any type that does not contain pointers. E.g., structs with felt members, tuples of felts and tuples of tuples of felts. For example: struct Point { x: felt, y: felt, } @view func sum_points(points: (Point, Point)) -> (res: Point) { return ( res=Point( x=points[0].x + points[1].x, y=points[0].y + points[1].y), ); } In order to call sum_points with the points (1, 2), (10, 20), you should pass the following inputs to starknet call: starknet call \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function sum_points \\ --inputs 1 2 10 20 In a similar way, passing arrays of structs is supported, as long as the structs do not contain pointers: @external func sum_points_arr(a_len: felt, a: Point*) -> (res: Point) { if (a_len == 0) { return (res=Point(0, 0)); } let (res) = sum_points_arr(a_len=a_len - 1, a=&a[1]); return (res=Point(x=res.x + a[0].x, y=res.y + a[0].y)); } In order to call sum_points_arr with the 3 points (1, 2), (10, 20), (100, 200), you should pass the following inputs to starknet call: starknet call \\ --address ${CONTRACT_ADDRESS} \\ --abi contract_abi.json \\ --function sum_points_arr \\ --inputs 3 1 2 10 20 100 200 You can retrieve the transaction information (which includes, for example, the signature and the transaction fee), by using the get_tx_info() library function: from starkware.starknet.common.syscalls import get_tx_info func get_tx_max_fee{syscall_ptr: felt*}() -> (max_fee: felt) { let (tx_info) = get_tx_info(); return (max_fee=tx_info.max_fee); } The returned value is a pointer to a TxInfo struct, which is defined as follows: struct TxInfo { // The version of the transaction. It is fixed (currently, 1) in the OS, and should be // signed by the account contract. // This field allows invalidating old transactions, whenever the meaning of the other // transaction fields is changed (in the OS). version: felt, // The account contract from which this transaction originates. account_contract_address: felt, // The max_fee field of the transaction. max_fee: felt, // The signature of the transaction. signature_len: felt, signature: felt*, // The hash of the transaction. transaction_hash: felt, // The identifier of the chain. // This field can be used to prevent replay of testnet transactions on mainnet. chain_id: felt, // The transaction's nonce. nonce: felt, } You can get the current block number and timestamp (seconds since unix epoch) by using the get_block_number() and get_block_timestamp() library functions. from starkware.starknet.common.syscalls import ( get_block_number, get_block_timestamp, ) // ... let (block_number) = get_block_number(); let (block_timestamp) = get_block_timestamp(); Note that both of the above functions require the implicit argument syscall_ptr. Presently, the result of get_block_timestamp() is not enforced by the Starknet OS or Core contract (i.e., the sequencer may choose an arbitrary timestamp). In the future, some restrictions on the new timestamp will be added. Also note that the block timestamp is the time at the beginning of the block creation, which can differ significantly from the time the block is accepted on L1.","title":"More features","component":"documentation","version":"","name":"more_features","url":"/documentation/getting_started/more_features/","titles":[{"text":"Storage variable with multiple values","hash":"storage-variable-with-multiple-values","id":1},{"text":"Storage variable with struct arguments","hash":"storage-variable-with-struct-arguments","id":2},{"text":"Array arguments in calldata","hash":"array-arguments-in-calldata","id":3},{"text":"Passing tuples and structs in calldata","hash":"passing-tuples-and-structs-in-calldata","id":4},{"text":"Passing arrays of structs","hash":"passing-arrays-of-structs","id":5},{"text":"Retrieving the transaction information","hash":"retrieving-the-transaction-information","id":6},{"text":"Block number and timestamp","hash":"block-number-and-timestamp","id":7}]},"15":{"id":15,"text":"Cairo allows one to verify ECDSA signatures over the STARK-friendly elliptic curve (for technical details see STARK Curve). Note that in most cases the best way to handle authentication is by using account contracts, rather than verifying the signature directly in the contract. However, for the sake of completeness, in the following section we explain how to verify signatures in Cairo. Consider the following implementation of increase_balance(), which can replace the corresponding function in the contract found under Adding User Authentication: from starkware.cairo.common.cairo_builtins import ( HashBuiltin, SignatureBuiltin, ) from starkware.cairo.common.hash import hash2 from starkware.cairo.common.signature import ( verify_ecdsa_signature, ) // Increases the balance of the given user by the given amount. @external func increase_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, ecdsa_ptr: SignatureBuiltin*, }(user: felt, amount: felt, sig: (felt, felt)) { // Compute the hash of the message. // The hash of (x, 0) is equivalent to the hash of (x). let (amount_hash) = hash2{hash_ptr=pedersen_ptr}(amount, 0); // Verify the user's signature. verify_ecdsa_signature( message=amount_hash, public_key=user, signature_r=sig[0], signature_s=sig[1], ); let (res) = balance.read(user=user); balance.write(user, res + amount); return (); } Note that in this example user is represented by a public key (and not the address of an account contract, as was the case in the original example). verify_ecdsa_signature() behaves like an assert – in case the signature is invalid, the function will revert the entire transaction. Note that we don’t handle replay attacks here – once the user signs a transaction someone may call it multiple times. One way to prevent replay attacks is to add a nonce component to the signed message. Save the new contract file as signature_verification.cairo. You can find the full Cairo file here. Compile and declare the contract: starknet-compile signature_verification.cairo \\ --output signature_compiled.json \\ --abi signature_abi.json starknet declare --contract signature_compiled.json Deploy the contract: starknet deploy --class_hash ${SIGNATURE_CONTRACT_CLASS_HASH} where ${SIGNATURE_CONTRACT_CLASS_HASH} is the value of class_hash. First, we need to generate a pair of public and private keys. We will use a constant private key (of course, in a real application choosing a secure random private key is imperative). Then, we sign a message to increase the balance by 4321. For this, we will use the following Python statements: from starkware.crypto.signature.signature import ( pedersen_hash, private_to_stark_key, sign) private_key = 12345 message_hash = pedersen_hash(4321) public_key = private_to_stark_key(private_key) signature = sign( msg_hash=message_hash, priv_key=private_key) print(f'Public key: {public_key}') print(f'Signature: {signature}') You should get: Public key: 1628448741648245036800002906075225705100596136133912895015035902954123957052 Signature: (1225578735933442828068102633747590437426782890965066746429241472187377583468, 3568809569741913715045370357918125425757114920266578211811626257903121825123) Using this signature, we may now update the balance: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi signature_abi.json \\ --function increase_balance \\ --inputs \\ 1628448741648245036800002906075225705100596136133912895015035902954123957052 \\ 4321 \\ 1225578735933442828068102633747590437426782890965066746429241472187377583468 \\ 3568809569741913715045370357918125425757114920266578211811626257903121825123","title":"Signature verification","component":"documentation","version":"","name":"signature_verification","url":"/documentation/getting_started/signature_verification/","titles":[{"text":"Compile and deploy","hash":"compile-and-deploy","id":1},{"text":"Interacting with the contract","hash":"interacting-with-the-contract","id":2}]},"16":{"id":16,"text":"This page demonstrates how to write unit tests for your Starknet contracts. The cairo-lang package provides a set of Python classes that simulates the behavior of the Starknet system. We’ll use pytest as the unit test infrastructure. Start by installing pytest: pip install pytest pytest-asyncio Let’s write a unit test for the contract from Your first contract. Create a file named contract.cairo and copy the contract code into it. Now, copy the following code into a Python file named contract_test.py: import os import pytest from starkware.starknet.testing.starknet import Starknet # The path to the contract source code. CONTRACT_FILE = os.path.join( os.path.dirname(__file__), \"contract.cairo\") # The testing library uses Python's asyncio. So the following # decorator and the ``async`` keyword are needed. @pytest.mark.asyncio async def test_increase_balance(): # Create a new Starknet class that simulates the Starknet # system. starknet = await Starknet.empty() # Deploy the contract. contract = await starknet.deploy( source=CONTRACT_FILE, ) # Invoke increase_balance() twice. await contract.increase_balance(amount=10).execute() await contract.increase_balance(amount=20).execute() # Check the result of get_balance(). execution_info = await contract.get_balance().call() assert execution_info.result == (30,) This test creates an instance of the Starknet testing class. This class allows deploying Starknet contracts and interacting with them. The test deploys our contract and invokes increase_balance twice. At the end it verifies that calling the get_balance() method returns the expected result. Run the test using pytest: pytest contract_test.py","title":"Writing unit tests","component":"documentation","version":"","name":"unit_tests","url":"/documentation/getting_started/unit_tests/","titles":[]},"17":{"id":17,"text":"Suppose that instead of maintaining one global variable balance, we would like to have a balance for each user (users will be identified by their STARK public keys). Our first task will be to change the balance storage variable to a map from public key (user) to balance (instead of a single value). This can be done by simply adding an argument: // A map from user (represented by account contract address) // to their balance. @storage_var func balance(user: felt) -> (res: felt) { } In fact, the @storage_var decorator allows you to add multiple arguments to create even more complicated maps. The functions balance.read() and balance.write() will now have the following signatures: func read{ syscall_ptr: felt*, range_check_ptr, pedersen_ptr: HashBuiltin*, }(user: felt) -> (res: felt) { } func write{ syscall_ptr: felt*, range_check_ptr, pedersen_ptr: HashBuiltin*, }(user: felt, value: felt) { } Note that the default value of all the entries in the map is 0. In order to obtain the address of the account contract (or any other contract, in the case that the function was invoked by a contract) that invoked our function, we can use the get_caller_address() library function: from starkware.starknet.common.syscalls import get_caller_address // ... let (caller_address) = get_caller_address(); get_caller_address() returns the address of the source contract that called this contract. It can be the address of the account contract or the address of another contract (if the function was invoked by another contract). When the contract is called directly (rather than through a contract), the function returns 0. Note that if you use get_caller_address() in a function foo() that was called by another function bar() within your contract, it will still return the address of the contract that invoked bar() (or 0 if it was invoked directly). Change the code of increase_balance() to: from starkware.cairo.common.math import assert_nn // Increases the balance of the user by the given amount. @external func increase_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(amount: felt) { // Verify that the amount is positive. with_attr error_message( \"Amount must be positive. Got: {amount}.\") { assert_nn(amount); } // Obtain the address of the account contract. let (user) = get_caller_address(); // Read and update its balance. let (res) = balance.read(user=user); balance.write(user, res + amount); return (); } Note that we added a constraint that the value of amount must be nonnegative, by calling assert_nn. In order to obtain an indicative message in case of an error, we wrapped the function call with the with_attr error_message(...) block. See Retrieving the revert reason for more details. Similarly, change the code of get_balance(). Here we chose to allow the caller to query any user (since Starknet’s storage is not private anyway): // Returns the balance of the given user. @view func get_balance{ syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr, }(user: felt) -> (res: felt) { let (res) = balance.read(user=user); return (res=res); } Save the new contract file as user_auth.cairo. You can find the full Cairo file here. Compile and declare the contract: starknet-compile user_auth.cairo \\ --output user_auth_compiled.json \\ --abi user_auth_abi.json starknet declare --contract user_auth_compiled.json Deploy the contract: starknet deploy --class_hash ${USER_AUTH_CLASS_HASH} where ${USER_AUTH_CLASS_HASH} is the value of class_hash. Don’t forget to set the STARKNET_NETWORK and STARKNET_WALLET environment variables and deploy an account contract before running starknet deploy. Let’s update the balance: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi user_auth_abi.json \\ --function increase_balance \\ --inputs 4321 You can query the transaction status: starknet tx_status --hash TX_HASH Finally, after the transaction is executed (status ACCEPTED_ON_L2 or ACCEPTED_ON_L1) you may query the user’s balance: starknet call \\ --address ${CONTRACT_ADDRESS} \\ --abi user_auth_abi.json \\ --function get_balance \\ --inputs ${ACCOUNT_ADDRESS} You should get: 4321 Note that if you want to use the get_storage_at CLI command to query the balance of a specific user, you can no longer compute the relevant key by only supplying the name of the storage variable. That is because the balance storage variable now requires an additional argument, namely, the user key. Hence, you will need to supply the additional arguments when acquiring the key used in get_storage_at. In our case, this translates to the following Python code: from starkware.starknet.public.abi import get_storage_var_address user = ACCOUNT_ADDRESS user_balance_key = get_storage_var_address('balance', user) print(f'Storage key for user {user}:\\n{user_balance_key}') Let’s try to invoke increase_balance with a negative amount: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi user_auth_abi.json \\ --function increase_balance \\ --inputs -1000 Because this transaction is invalid (as the amount is negative), you will get an error from the Starknet gateway that contains the following: {\"code\": \"StarknetErrorCode.TRANSACTION_FAILED\", \"message\": \"Error at pc=0:38:\\nGot an exception while executing a hint.\\nCairo traceback (most recent call last):\\nUnknown location (pc=0:522)\\nUnknown location (pc=0:484)\\nUnknown location (pc=0:590)\\n\\nError in the called contract (0x548245153813267af2d2793c6e5d60c40cb95f34d7404f2ce75550fafabede0):\\nError at pc=0:6:\\nGot an exception while executing a hint.\\nCairo traceback (most recent call last):\\nUnknown location (pc=0:155)\\nError message: Amount must be positive. Got: -1000.\\nUnknown location (pc=0:129)\\n\\nTraceback (most recent call last):\\n File \\\"\\\", line 3, in \\nAssertionError: a = 3618502788666131213697322783095070105623107215331596699973092056135872019481 is out of range.\"} This indicates that the CLI could not estimate the transaction fee, because the transaction has failed. For the sake of demonstrating retrieving the revert reason, we will force the transaction to skip the fee estimation mechanism. To do so, add --max_fee 100000000000000000 to the former invoke transaction, as follows: starknet invoke \\ --address ${CONTRACT_ADDRESS} \\ --abi user_auth_abi.json \\ --function increase_balance \\ --inputs -1000 \\ --max_fee 100000000000000000 After this, when querying the transaction status, you should get: { \"tx_failure_reason\": { \"code\": \"TRANSACTION_FAILED\", \"error_message\": \"Error at pc=0:32:\\nGot an exception while executing a hint.\\nCairo traceback (most recent call last):\\nUnknown location (pc=0:494)\\nUnknown location (pc=0:453)\\nUnknown location (pc=0:510)\\n\\nError in the called contract (0x3632c8d1265888e0eadb518cbf4a83d071d00cd8f946ec72fd661e69eea1963):\\nError at pc=0:6:\\nGot an exception while executing a hint.\\nCairo traceback (most recent call last):\\nUnknown location (pc=0:155)\\nError message: Amount must be positive. Got: -1000.\\nUnknown location (pc=0:129)\\n\\nTraceback (most recent call last):\\n File \\\"\\\", line 3, in \\nAssertionError: a = 3618502788666131213697322783095070105623107215331596699973092056135872019481 is out of range.\" }, \"tx_status\": \"REJECTED\" } Notice that the error message entry states that the error location is unknown. This is because the Starknet network is not aware of the source code and debug information of a contract. To retrieve the error location and reconstruct the traceback, add the path to the relevant compiled contract in the transaction status query, using the --contracts argument. To better display the error (and only it), add the --error_message flag as well: starknet tx_status \\ --hash TX_HASH \\ --contracts ${CONTRACT_ADDRESS}:user_auth_compiled.json \\ --error_message The output should look like: Error at pc=0:28: Got an exception while executing a hint. Cairo traceback (most recent call last): Unknown location (pc=0:494) Unknown location (pc=0:453) Unknown location (pc=0:510) Error in the called contract (0x29cd5db92729052b3268471cf1b2327b61523565adeaa1d659236e806bd4b97): math.cairo:47:5: Error at pc=0:6: a = [range_check_ptr]; ^*******************^ Got an exception while executing a hint. Cairo traceback (most recent call last): user_auth.cairo:15:6 func increase_balance{syscall_ptr: felt*, pedersen_ptr: HashBuiltin*, range_check_ptr}( ^**************^ Error message: Amount must be positive. Got: -1000. user_auth.cairo:20:9 assert_nn(amount); ^***************^ Traceback (most recent call last): File \"\", line 3, in AssertionError: a = 3618502788666131213697322783095070105623107215331596699973092056135872019481 is out of range. You should ignore the first part (before Error in the called contract) – it is caused by the account contract.","title":"Adding user authentication","component":"documentation","version":"","name":"user_auth","url":"/documentation/getting_started/user_auth/","titles":[{"text":"Storage maps","hash":"storage-maps","id":1},{"text":"Getting the caller address","hash":"getting-the-caller-address","id":2},{"text":"Modifying the contract’s functions","hash":"modifying-the-contract-s-functions","id":3},{"text":"Compile and deploy","hash":"compile-and-deploy","id":4},{"text":"Interacting with the contract","hash":"interacting-with-the-contract","id":5},{"text":"Retrieving the revert reason","hash":"retrieving-the-revert-reason","id":6}]},"18":{"id":18,"text":"Starknet alpha currently has a number of limits and triggers in place in order to keep the network stable and optimized for best performance. These are subject to revisions and change on a regular basis Table 1. Starknet current limits and triggers Entity Goerli Mainnet Block limit (Cairo steps) 2.5M 8M Block limit (gas) 2M 3M Mempool size limit No limitation 1000 unbatched transactions IP address limits (read) 100 per min 200 per min IP address limits (write) 10 per min / per ip address 10 per min / per ip address","title":"Current limits and triggers","component":"documentation","version":"","name":"limits_and_triggers","url":"/documentation/starknet_versions/limits_and_triggers/","titles":[]},"19":{"id":19,"text":"Pathfinder is a Starknet full node giving you a safe view into Starknet. It provides the following features: Access the full Starknet state history Verifies state using Ethereum Implements the Starknet JSON-RPC API Run Starknet functions without requiring a Starknet transaction Ability to do fee estimation for transactions See the official Pathfinder Github repository for more details. Hotfix for a bug introduced in the previous version v0.4.4, which prevented a new node from syncing on blocks near genesis. Added Newton FAQ links to readme Node fails to sync old blocks @SecurityQQ made their first contribution in #799 This minor release contains some nice performance improvements for starknet_call and starknet_estimateFee as well as some minor bug fixes. Also included is a major new feature: storage proofs - big thanks @pscott for his hard work on this feature! This is available via the pathfinder_getProof method which is served from both the pathfinder and Starknet endpoints for convenience: /rpc/pathfinder/v0.1/pathfinder_getProof /rpc/v0.2/pathfinder_getProof The method is specified here. Its results can be used to formally verify what a contract’s storage values are without trusting the pathfinder node. This is achieved by validating the merkle-proof that pathfinder returns and confirming that it correctly matches the known Starknet state root. storage proofs via pathfinder_getProof by @pscott starknet_getEvents returns all events when from_block=\"latest\" v0.1 starknet_getStateUpdate does not contain nonces Improved performance for starknet_call and starknet_estimateFee by caching classes Improved performance for starknet_call and starknet_estimateFee by using Rust for hashing @pscott made their first contribution in #726 The primary purpose of this release is to properly support testnet2 after the Starknet v0.10.3 update. The v0.10.3 update changed the testnet2 chain ID which impacts transaction signatures which in turn meant that starknet_estimateFee would fail for any signed transaction. This release updates pathfinder to use the correct chain ID. Testnet2 and integration flags are ignored starknet_estimateFee uses wrong chain ID for testnet2 Updated to cairo-lang 0.10.3 Contains several bug fixes, mostly hotfixes for bugs introduced in v0.4.1. Document that --chain-id expects text as input Testnet2 and integration L1 addresses are swapped (bug introduced in v0.4.1) Proxy network setups can’t sync historical blocks (bug introduced in v0.4.1) ABI serialization for starknet_estimateFee for declare transactions Soft deprecation of some configuration options Support custom Starknet gateways Pathfinder RPC extensions at /rpc/pathfinder/ with pathfinder_version method starknet_events optimisations fix block timestamp in pending calls Custom Starknet gateway support This release introduces support for custom Starknets. You can select this network by setting --network custom and specifying the --gateway-url and --feeder-gateway-url options. Several configuration options have been soft deprecated. This means using them will continue to work as before (no breaking change), but they will emit a warning when used. They will be removed in a future version, so please migrate to the newer options. To re-emphasize: your current configuration setup will continue to work as is. --testnet2 and --integration have been deprecated in favor of --network testnet2 and --network integration. --sequencer-url has been deprecated in favor of --network custom along with --gateway-url, --feeder-gateway-url and --chain-id. In addition, you will need to rename your existing database file to custom.sqlite as this will be the expected filename for custom networks. --config has been deprecated and will not be supported in the future. The utility this provided was valuable. Unfortunately it is starting to severely hinder how fast we can implement configuration changes and we decided to remove it. We suggest using environment variables along with environment files to configure pathfinder in a similar fashion. The following configuration options are now marked as deprecated: --testnet2, --integration, --config, --sequencer-url Optimized starknet_events for queries with both a block range and a from address Block timestamps for pending in starknet_call and starknet_estimateFee were using the latest timestamp instead of the pending one. This meant contracts relying on accurate timestamps could sometimes fail unexpectedly. Custom Starknet support Pathfinder specific RPC extensions hosted at /rpc/pathfinder/v0.1. Currently, this only contains pathfinder_version which returns the pathfinder version of the node. This release contains a breaking change, and also adds support for Starknet v0.10.2. The changes themselves are quite simple, but please read through each section as there are some caveats which might impact you when you apply this update. This release changes the version of the RPC that is served at the root route, from v0.1 to v0.2 of the RPC specification. Version v0.1 is still available at the /rpc/v0.1/ endpoint. This is the only breaking change in this release. Here is a summary of what routes are currently available, and what’s changed: / serves v0.2 (changed from v0.1) /rpc/v0.1 serves v0.1 (no change) /rpc/v0.2 serves v0.2 (no change) If possible, we recommend that you use the version specific routes as this will prevent such breaking changes from impacting you. This release includes an update to the cairo-vm embedded in pathfinder in order to support the upcoming v0.10.2 Starknet release. This bundled vm is a pre-release and may therefore contain differences to the final version used once Starknet updates testnet and mainnet. We will of course issue a new release if / when there is a new vm. Since these changes are not yet live on testnet nor mainnet, this means upgrading to this release will cause deviations between what pathfinder outputs and what can be expected on the network. More specifically, starknet_estimateFee will compute different fees until the network has upgraded to Starknet v0.10.2. If you don’t need the RPC route changes, it may be pertinent to delay updating until closer to the v0.10.2 release dates on testnet and mainnet. The expected timeline for these upgrades is ~17/11 for testnets and ~24/11 for mainnet.","title":"Pathfinder versions","component":"documentation","version":"","name":"pathfinder_versions","url":"/documentation/starknet_versions/pathfinder_versions/","titles":[{"text":"v0.4.5 (latest)","hash":"v0_4_5_latest","id":1},{"text":"Added","hash":"added","id":2},{"text":"Fixed","hash":"fixed","id":3},{"text":"New contributors","hash":"new_contributors","id":4},{"text":"v0.4.4","hash":"v0_4_4","id":5},{"text":"Added","hash":"added_2","id":6},{"text":"Fixed","hash":"fixed_2","id":7},{"text":"Changed","hash":"changed","id":8},{"text":"New contributors","hash":"new_contributors_2","id":9},{"text":"v0.4.3","hash":"v0_4_3","id":10},{"text":"Fixed","hash":"fixed_3","id":11},{"text":"Changed","hash":"changed_2","id":12},{"text":"v0.4.2","hash":"v0_4_2","id":13},{"text":"Added","hash":"added_3","id":14},{"text":"Fixed","hash":"fixed_4","id":15},{"text":"v0.4.1","hash":"v0_4_1","id":16},{"text":"Highlights","hash":"highlights","id":17},{"text":"Configuration option deprecation","hash":"configuration_option_deprecation","id":18},{"text":"Network selection","hash":"network_selection","id":19},{"text":"Gateway proxy","hash":"gateway_proxy","id":20},{"text":"Configuration file","hash":"configuration_file","id":21},{"text":"Changed","hash":"changed_3","id":22},{"text":"Fixed","hash":"fixed_5","id":23},{"text":"Added","hash":"added_4","id":24},{"text":"v0.4.0- (breaking release)","hash":"v0_4_0_breaking_release","id":25},{"text":"Default RPC version change","hash":"default_rpc_version_change","id":26},{"text":"Starknet v0.10.2 support","hash":"starknet_v0_10_2_support","id":27},{"text":"Please take note of the following","hash":"please_take_note_of_the_following","id":28}]},"20":{"id":20,"text":"Starknet Alpha 0.11.0 introduces Cairo 1.0 smart contracts. Until regenesis, old and new contracts will co-exist and will be able to interact with each other. On the regenesis, classes (and contracts that are instances of those classes) written in older Cairo versions will no longer be supported. The path to regenesis In Starknet v0.11.0, you can declare, deploy and run Cairo 1.0 smart contracts. We also introduce a new system call that allows a smooth transitioning of existing contracts to a Cairo 1.0 implementation. Historically, contract classes have been defined in terms of Cairo assembly, or Casm for short (the class definition also included more information needed for execution, e.g., hint data). The novelty of Cairo 1.0 is the introduction of Sierra (Safe Intermediate Representation), an intermediate layer between Cairo 1.0 and Casm. The role of Sierra is to guarantee that every contract execution can be proven. With Cairo 0, you may write contracts that fail ungracefully, e.g., via an assert instruction, which will result in unprovable transactions. In such cases, it is impossible to trustlessly charge a fee for the failed transaction, which creates a potential DOS vector on Starknet sequencers. Conversely, Sierra is guaranteed to compile to “safe Casm,” i.e., a subset of Casm that cannot fail (the simplest example that illustrates the restrictions of safe Casm is the usage of if/else instructions rather than asserts). To guarantee that all classes in the system originated from Sierra, users will send a new contract class structure (one that corresponds to Sierra), and the Starknet sequencer will compile it to Casm. In the future, this compilation step will be proven inside the Starknet OS. In the meantime, users have to perform this compilation and produce the Casm hash locally in order to sign it in the DECLARE transaction. Note that the user’s approval here is vital; if the compilation to Casm is not verified, nothing enforces the generated Casm to correspond to the (Sierra) contract class. Cairo is only required for proving. In order to prove the validity of blocks, we need to be able to represent every contract execution in Cairo. For sequencers, that are responsible for block production, proving may be out of scope. Thus, the compilation of the contract class to Casm may not be important for them. In the future, one can imagine a Sierra VM or compilation from Sierra to different CPU architectures, e.g., x86). However, for the time being, different components in the ecosystem (the sequencer, full nodes, etc.) will keep using the generated Casm for contract execution. The introduction of Cairo 1.0 and Sierra has several effects on the system. Below we list the effects on each component; of particular note are: A new version of the DECLARE transaction, which allows sending the new class structure The state commitment will now include contract classes Changes to the on-chain data format New system call - replace_class Starknet API (feeder gateway/gateway) and JSON-RPC updates The following is an example of the new version of the DECLARE transaction: { \"version\": \"0x2\", \"max_fee\": \"0xf99ee42792c\", \"signature\": [ \"0x1e3207935d3ab611b30bf486915b3d2f7ddb5eaa00c1fca2ec73343babbe434\", \"0x418a33a22ccba3c743d0a097bd61d749527f4d460bd3317e904762d91eebc05\" ], \"nonce\": \"0x1\", \"contract_class\": { ... }, \"compiled_class_hash\": \"0x418a33a22ccba3c743d0a097bd61d749527f4d460bd3317e904762d91eebc05\", \"sender_address\": \"0x706064eb9da21c692ef9a6b9f19d671b718e3bea99926ba6b6ad938c049fcbe\", \"type\": \"DECLARE\" } Upon receiving a DECLARE v2 transaction, the sequencer will run __validate_declare__ (similarly to version 1). If the transaction is found valid, the sequencer will compile the contract class to Casm and ensure that the resulting compiled class hash equals the given compiled_class_hash. If the hashes do not match, the sequencer is elligible to charge a fee for the transaction (this is necessary to prevent a potential DOS on the sequencer). If the validation was success and the compilation resulted in a matching compiled class hash, the sequencer proceeds to store the given class in its DB and updates the classes tree with the (class_hash, compiled_class_hash) pair. After the class was declared, it can be used either in deploying new instances or via library calls. Note that to specify the class (either for deploy or library_call), one has to send class_hash and NOT compiled_class_hash. The sequencer and full nodes may internally maintain a mapping between the two, but a reference to a declared class has to be via its class hash. New classes declared by v2 Declare transactions will be included in the state commitment. To this end, we change the state commitment from global_tree_root to h(global_tree_root, classes_root, commitment_version), where: * global_tree_root is the usual contracts tree * classes_root is a height 251 Patricia tree constructed from the key-value pairs (class_hash, h(compiled_class_hash, leaf_version)) * commitment_version and leaf_version are news field added to allow forward compatability and are currently set to 0 * h is the link:Poseidon hash function New class hash computation will migrate from Pedersen to Poseidon hash functions in this version. Old classes, or new ones declared via a DECLARE v1 transaction, do not affect the state commitment. We add a new system call that allows changing a contract’s class to a Cairo 1.0 class: replace_class(class_hash: felt) Once replace_class is called, the class of the calling contract (i.e. the contract whose address is returned by get_contract_address at the time the syscall is called) will be replaced by class whose hash is given by the class_hash argument (this class must be previously declared). This change will not affect the currently running function, i.e. the execution of the calling function will continue as usual with the old code. However, call_contract will now use the new class. Consider the following example: @external swap(assetA: felt, assetB: felt) let get_price_selector = 0x... let address = get_contract_address() let pA = get_price(assetA) replace_class(new_class_hash) let pA = get_price(assetA) let calldata = alloc() calldate[0] = assetB let pB = call_contract(address, get_price_selector, 1, calldata) @external get_price(assetId: felt) ... The swap function calls get_price three times: In the first call, the original implementation is used, as expected. In the second call, after replace_class, we also use the original implementation since we continue the current execution with the existing code. In the third call, pB will use get_price from the new class (if it exists, otherwise the call will fail). The following flow is only applicable to upgradable contracts. If your contract is upgradable, then upgrading the implementation class to Cairo 1.0 doesn’t require anything new, and can be done with a regular transaction which upgrades the implementation. The problem is thus “upgrading” the proxy itself to the Cairo 1.0 implementation. Suppose that you have an account proxy, or a DeFi app proxy, that you want to migrate to Cairo 1.0. To migrate it to Cairo 1.0 and keep the same address and state, you can do the following: Declare your new Cairo 1.0 proxy class (if not already declared, as can be the case with standard implementations). Upgrade the implementation to add a function that uses the new replace_class system call. Call the new function from the previous step. Now, replace_class(new_class_hash) is called, where new_class_hash is the class hash of the new Cairo 1.0 proxy class. Starting from the next transaction, the class of the calling contract is now replaced (with the old one having no effect). Will I be able to replace the class to any previously declared class? Yes Can I only use it for proxy contracts? No, we will not enforce anything about the contents of the old/new class How much will replacing the class cost? The dominant cost of this system call is sending two words as calldata, which is ~1.2k gas How do I declare Cairo 1.0 classes? In Starknet v0.11.0 we will introduce declare v2 transactions, that are used for this purpose. For more details, see here. What happens if I use call_contract (on the feeder gateway / Json RPC) and replace_class is called? The effect of the replacement will only last throughout the call (the Starknet state remains untouched, like in any other call) The data published on L1 should allow everyone to construct the Starknet state locally. The introduction of the replace_class system call and the separation between classes (Sierra) and compiled classes (Casm) induces some changes to our on chain data format: The deployment info section is removed The first word will be the number of contracts affected by the block (this includes storage updates, nonce updates, class updates, or deployments). For each affected contract, the first word will encode the new nonce and number of storage updates. Additionally, it will use one bit to determine whether or not the contract was deployed or if its class was updated. The specific encoding is given by: \\[\\underbrace{0\\cdots0}_{\\text{127 bits}} |\\underbrace{\\text{flag}}_{\\text{1 bit}} | \\underbrace{\\text{new nonce}}_{\\text{64 bits}} | \\underbrace{\\text{# of storage updates}}_{\\text{64 bits}}\\] If the above flag is turned on, then the next word is the new contract class (whether it was just deployed or replaced). Otherwise, you can skip to the next bullet. For each storage update, we send to L1 the key and the new value (this part remains unchanged) Following the updated contracts section, we have a section of newly declared classes (only Cairo 1 classed declared via a declare v2 transactions, as old classes don’t affect the commitment): The first word in this section is the number of declared classes For every newly declared class, two felts will be posted: The class hash The compiled class hash New endpoint: get_compiled_class_by_class_hash. The purpose of this endpoint is to return the Cairo assembly associated with the Class. This is the data needed for contract execution. You can find an example of the relevant structure here get_class_by_hash - the structure of the returned class will depend on whether or not it is a new type of class, compiled from Cairo 1.0. You can find an example of the new class structure here. get_full_contract - same as above get_state_update added replaced_classes section declared_classes is split into old_declared_classes and declared_classes old_declared_classes is a list of class hashes declared_classes is a list of (class_hash,compiled_class_hash) pairs get_block The transactions field is subject to the same changes in get_transaction get_transaciton contract_address is changed to sender_address in invoke transactions Declare v2 transaction may be returned estimate_fee Can now take an additional skip_validate flag in the URL. If set to true, then __validate__ execution will be skipped. This can assist hardware wallets in not having to sign for fee estimations. add_transaction Can now take a Declare v2 transaction contract_address is changed to sender_address in Invoke transactions The new class structure and Declare V2 are added to the JSON-RPC. You can track the changes in this pull request. INVOKE and DECLARE transactions of version 0 will no longer be supported in Starknet Alpha v0.11.0 As of this version, L1→L2 message fees will become mandatory, i.e., the sequencer will no longer process messages sent with zero ETH. In this section we will cover the changes in the above document up to the release to Testnet/Mainnet. If this is your first time encountering the document, then you can ignore this section. Nothing will be enforced regarding the old/new class. In partiular, it can be used even with Cairo 0 target classes (note that such classes will no longer be supported after regenesis). In Starknet v0.11.0 we will start using the Poseidon hash function, which can be proven much more effeciently than Pedersen due to its algebaric nature. We will start by using Poseidon in the following places: class_hash (only new Cairo 1.0 classes will be hashed with Poseidon, Cairo 0 class hashes will continue to use Pedersen) compiled class hash (see declare v2 for more details) classes commitment tree (see the state commitment updates for more details) You can find the specification of the Poseidon hash function that will be used in Starknet here. The changes in the commitment scheme has been slightly modified as follows: The classes tree will be computed with the Poseidon hash function, while the global state tree will continue to use Pedersen The leaves in the classes tree will be h(compiled_class_hash, leaf_version) where leaf_version is a field added to allow forward compatability and is currently set to 0 If the classes tree is none empty, the state commitment will be computed by h(global_tree_root, classes_root, commitment_version) where h is the Poseidon hash function and commitment_version is a field added to allow forward compatability and is currently set to 0 The changes in the on chain data format have been slightly modified as follows: We will have an additional section for the newly declared (Cairo 1) classes in the block. This section will contain: The number of declared (Cairo 1) classes For every newly declared class, two felts will be posted: The class hash The compiled class hash To avoid ambiguity, get_compiled_class will be renamed to get_compiled_class_by_class_hash Starknet blocks will still have the state_root field (it will not be renamed to state commitment at this time) declared_classes inside the state update response will be a list of pairs (class hash and compiled class hash) rather than a dictionary The gateway will expect the sierra_program field of declare v2 transactions in a compressed form, in the same manner as done today for declare v1 transactions","title":"Starknet Alpha v0.11.0","component":"documentation","version":"","name":"upcoming_versions","url":"/documentation/starknet_versions/upcoming_versions/","titles":[{"text":"What to expect","hash":"what_to_expect","id":1},{"text":"Notable changes","hash":"notable_changes","id":2},{"text":"Declare v2","hash":"declare_v2","id":3},{"text":"Transaction structure","hash":"transaction_structure","id":4},{"text":"Transaction flow","hash":"transaction_flow","id":5},{"text":"Deploy and library_call","hash":"deploy_and_library_call","id":6},{"text":"State commitment","hash":"commitment","id":7},{"text":"Replace class syscall","hash":"replace_class_syscall","id":8},{"text":"Semantics of the new system call","hash":"semantics_of_the_new_system_call","id":9},{"text":"Replace class flow","hash":"replace_class_flow","id":10},{"text":"FAQ","hash":"faq","id":11},{"text":"On-Chain data","hash":"ocd","id":12},{"text":"API changes","hash":"api_changes","id":13},{"text":"Feeder gateway","hash":"feeder_gateway","id":14},{"text":"Gateway","hash":"gateway","id":15},{"text":"JSON-RPC changes","hash":"json_rpc_changes","id":16},{"text":"Version 0 Removal","hash":"version_0_removal","id":17},{"text":"Mandatory message fees","hash":"mandatory_message_fees","id":18},{"text":"Document changelog","hash":"document_changelog","id":19},{"text":"update (16/02/2021)","hash":"update_16022021","id":20},{"text":"Replace class syscall","hash":"replace_class_syscall_2","id":21},{"text":"Poseidon hash","hash":"poseidon_hash","id":22},{"text":"State commitment","hash":"state_commitment","id":23},{"text":"On-Chain data","hash":"on_chain_data","id":24},{"text":"API changes","hash":"api_changes_2","id":25}]},"21":{"id":21,"text":"The following version notes cover the ongoing version changes to Starknet. To get the latest version updates delivered to you, please subscribe to our mailing list here. Within Starknet’s deployment pipeline there are separate and distinct networks that operate independently of each other for testing before deployment. For more information see the useful information section. Version 0.11.0 is the next major release version for Starknet. For more detailed information regarding this version, see upcoming versions. The deploy transaction is no longer supported on this version. Starknet Performance - Separate the state commitment computation from the execution of the transactions Add starknet-class-hash command to compute the class hash of a compiled Starknet contract Cairo: Autoformatter: Automatically break lines inside expressions This version introduces sequencer parallelization! This is the first step in our roadmap of performance upgrades. Details about the specific mechanism of parallelization and the roadmap in general are described in this medium post. A new endpoint, estimate_fee_bulk, is added to the feeder gateway. This will allow estimating the fee of several transactions at once, where each transaction is executed relative to the resulting state from applying the previous one. Sequencing performance improvements Builtin ratio changes, which affects builtin costs Add estimate_fee_bulk API that computes the fee of multiple transactions that will be executed consecutively As part of this version, we will also increase the finality of transactions in the pending block, by fixing the timestamp at the time of the block creation. This will solve the issue of transactions moving from pending to rejected on account of too old timestamp Starknet: Add DeployAccount transaction (which will replace the Deploy transaction for deploying account contracts). To use it, you should first add enough funds to your account address to pay the transaction fee, and then you can invoke DeployAccount Split the starknet deploy_account CLI command into starknet new_account and starknet deploy_account Account contracts that are expected to be deployed this way should implement the`validate_deploy()` entry point, which should check the signature of the DeployAccount transaction Improve L1 fee computation: the fee is computed according to the diff of the storage state API: Remove entry_point_type field from transaction information Cairo: Add uint256_mul_div_mod to uint256.cairo This version introduces the next step in Starknet’s account abstraction design, specifically the validate/execute separation. See here for more information. Starknet: Contract (breaking changes): @external and @view functions should be imported directly by the main compiled file. Otherwise, they will not be usable as external functions Forbid using the same storage variable name in two modules New transaction version (version 1) for invoke and declare transactions: Transactions of version 0 are deprecated and will not be supported in Starknet from the next version (v0.11.0). Please update your systems to use the new version In order to use transactions of version 1 you will need to upgrade your account contracts Add nonce field to the transactions. Nonce validation is now part of the Starknet protocol and is enforced to be executed sequentially Invoke: Split execute to two functions:` validate` (only validates the transaction) and execute (only executes the transaction) Remove the selector (which is now always execute) field, following the above change. Declare: declare transaction should now be sent from an account (and is validated using validate_declare in the account contract) Support fee for sending L1 messages. At this point, it’s not mandatory and messages with no fee will still be handled. Starting from the next version it will become mandatory. Cairo: Syntax changes in Cairo (to make it more similar to rust and C++): You can use the cairo-migrate script to convert old code to the new syntax. Use the -i flag to apply the changes to the files End statements with ; New lines are still part of the language at this point, and you cannot put more than one instruction per line. This will change in Cairo1.0. Use { … } for code blocks (instead of : and end) Add () around the condition of if statements Remove the member keyword in structs Change comment to use // instead of # Use …​, ap` instead of `...; ap in low level Cairo code Support return types that are not tuples. For example, func foo() → felt (instead of func foo() → (r: felt)) As a result, it’s now mandatory to specify return types. func foo() → (res) should be replaced by func foo() → (res: felt). The cairo-migrate tool does that automatically. Return statement accepts expressions, rather than only tuples. For example, you can write let x = (5,); return x; A few standard library functions were changed to return felt. The cairo-migrate script also fixes calls to those functions Support using functions as expressions This only applies to functions with → felt signature`, whose ap change is known at compile-time (e.g., recursive functions cannot be used this way) Fix a bug in the secp signature verification code that allowed a malicious prover to ignore the value of v (this does not let the prover fake a signature, but allows it to claim that a valid signature is invalid). Add Cairo code for the recursive STARK verifier Technical changes: * Move from python3.7 to python3.9 Starknet: API changes: Add get_block_traces API - returns all the transaction traces of a given block Add a list of declared contracts in get_state_update Add a 0x prefix for class hash in the API Add starknet_version field for blocks (only applies to new blocks) Starknet CLI: Change the default block number to pending Using a wallet is the default, --no_wallet must be specified explicitly to override this Deploying contracts: Add deploy_contract function to the account contract created by starknet deploy_account Use this function to deploy contract (unless using --no_wallet). In particular, deploy should be used after declaring the contract (it expects the contract class hash) Support --dry_run to get the transaction information without signing or sending it Support deploy_from_zero in the deploy syscall to deploy a contract to an address that does not depend on the deployer Cairo: * Support and in if statements (if x == y and z == w). At the moment other boolean combinations are not supported This version introduces the contract class/instance paradigm into Starknet. See here for more information. Starknet: Enforce fees - max_fee must not be set to zero, and selector must be execute Split the concepts of contract class and contract instance. Add declare transaction type New API and CLI commands: declare - Declares a contract class get_class_by_hash - Returns the contract class given its hash get_class_hash_at - Returns the class hash for a given contract instance address Rename delegate_call to library_call, and change the contract address argument to class hash. Add a deploy system call. Rename ContractDefinition to ContractClass Reduce the compiled contract file’s size by removing unnecessary identifiers (this optimization can be disabled using --dont_filter_identifiers) Cairo: Initial support for the EC-op builtin (scalar multiplication over the STARK curve). Not supported in Starknet yet. Add additional helper methods to blake2s.cairo, including big-endian support Technical changes: * Change function’s return type from a struct to a named tuple. In particular, foo.Return.SIZE is no longer supported.","title":"Version notes","component":"documentation","version":"","name":"version_notes","url":"/documentation/starknet_versions/version_notes/","titles":[{"text":"Starknet Environments","hash":"starknet_environments","id":1},{"text":"Starknet v0.11.0 (Feb, 23)","hash":"version0.11.0","id":2},{"text":"Starknet v0.10.3 (Dec 12, 22)","hash":"version0.10.3","id":3},{"text":"Technical release notes","hash":"technical_release_notes","id":4},{"text":"Starknet v0.10.2 (Nov 29, 22)","hash":"version0.10.2","id":5},{"text":"Technical release notes","hash":"technical_release_notes_2","id":6},{"text":"Starknet v0.10.1 (Oct 25, 22)","hash":"version0.10.1","id":7},{"text":"Technical release notes","hash":"technical_release_notes_3","id":8},{"text":"Starknet v0.10.0 (Sept 05, 22)","hash":"version0.10.0","id":9},{"text":"Technical release notes","hash":"technical_release_notes_4","id":10},{"text":"Starknet v0.9.1 (July 20, 22)","hash":"version0.9.1","id":11},{"text":"Technical release notes","hash":"technical_release_notes_5","id":12},{"text":"Starknet v0.9.0 (June 06, 22)","hash":"version0.9.0","id":13},{"text":"Technical release notes","hash":"technical_release_notes_6","id":14}]},"22":{"id":22,"text":"A block explorer, or blockchain explorer, enables you to see transactions, blockchain metrics and other information. The following block explorers provide information on Starknet. Table 1. Starknet block explorers, in alphabetical order Block explorer name URL Starkscan https://starkscan.co ViewBlock https://v2.viewblock.io/starknet Voyager https://voyager.online","title":"Starknet block explorers","component":"documentation","version":"","name":"ref_block_explorers","url":"/documentation/tools/ref_block_explorers/","titles":[]},"23":{"id":23,"text":"The Starknet core contract 0xc662c410C0ECf747543f5bA90660f6ABeBD9C8c4 Verifier address 0x47312450B3Ac8b5b8e247a6bB6d523e7605bDb60 Sequencer base URL for API routing https://alpha-mainnet.starknet.io The Starknet core contract 0xde29d060D45901Fb19ED6C6e959EB22d8626708e Verifier address 0xAB43bA48c9edF4C2C4bB01237348D1D7B28ef168 Sequencer base URL for API routing https://alpha4.starknet.io The Starknet core contract 0xa4eD3aD27c294565cB0DCc993BDdCC75432D498c Verifier address 0xAB43bA48c9edF4C2C4bB01237348D1D7B28ef168 Sequencer base URL for API routing https://alpha4-2.starknet.io The tokens that are currently bridged to Starknet are listed in the following .json files: mainnet.json The addresses of the tokens currently bridged to Starknet Mainnet. goerli.json The addresses of the tokens currently bridged to Starknet testnet. goerli2.json The addresses of the tokens currently bridged to Starknet testnet2. Each token has the following parameters: Name token name Symbol token symbol Decimals number of decimal places used to get the user representation l1_token_address address of the L1 ERC-20 contract l2_token_address address of the L2 ERC-20 contract l1_bridge_address address of the L1 bridge contract l2_bridge_address address of the L2 bridge contract The field element type in Starknet is based on the field in the underlying Cairo VM. In other words, a value \\(x\\) of a field element type is an integer in the range of \\(0≤x<P\\). \\(P\\) is currently defined as \\(2^{251} + 17*2^{192} + 1\\)","title":"Useful info","component":"documentation","version":"","name":"index","url":"/documentation/useful_info/","titles":[{"text":"Starknet Alpha on Mainnet","hash":"starknet_alpha_on_mainnet","id":1},{"text":"Starknet Alpha version on Goerli testnet 1","hash":"starknet_alpha_version_on_goerli_testnet_1","id":2},{"text":"Starknet Alpha version on Goerli testnet 2","hash":"starknet_alpha_version_on_goerli_testnet_2","id":3},{"text":"Bridged Tokens","hash":"bridged_tokens","id":4},{"text":"P value","hash":"p_value","id":5}]},"24":{"id":24,"text":"A Starknet account contract must include the following two functions: __validate__ __execute__ These serve distinct purposes to ensure that only the account owner can initiate transactions and that fees can be charged for the resources you use. Starknet’s account type is inspired by Ethereum’s EIP-4337, where instead of EOAs, you now use smart contract accounts with arbitrary verification logic. Through the use of smart contracts, you are provided with complete flexibility within your account implementation. While not mandatory at the protocol level, a richer standard interface for accounts was developed by the community. This standard was developed by OpenZeppelin, in a close collaboration with wallet teams and other Core Starknet developers. You can see the IAccount interface here. In Starknet, similar to Ethereum, every contract has a nonce. This nonce is sequential; when a transaction is sent from an account, its nonce must match the account’s nonce and it’s incremented after the transaction is executed (whether or not it was reverted). Note that, similar to Ethereum, only the nonce of account contracts (that is, those adhering to the above structure) can be non-zero. A nonce serves two important roles: It guarantees transaction hash uniqueness (this is important for good UX) It provides replay protection to the account (since the signature refers to a particular nonce, the transaction can’t be replayed by a malicious party) As seen above, Starknet currently determines the nonce structure (sequential) at the protocol level. In the future, Starknet will consider a more flexible design, extending account abstraction to nonce management (previously referred to as \"nonce abstraction\").","title":"Starknet account interface","component":"documentation","version":"","name":"approach","url":"/documentation/architecture_and_concepts/Account_Abstraction/approach/","titles":[{"text":"Replay protection","hash":"replay_protection","id":1}]},"25":{"id":25,"text":"An account is a user’s representation on-chain and the way of interacting with the blockchain. Through an account, you may send transactions and interact with other contracts. To \"own\" an on-chain asset (e.g. ERC20 token or an NFT), it has to be associated with your account address. Within Ethereum individual user accounts are known as Externally Owned Accounts (EOAs). EOAs differ from smart contracts in that they are not controlled by code. An EOA is determined by a pair of private and public keys. The account’s address is derived from those keys and only by possessing the private key can you initiate transactions from an account. While Ethereum contracts are \"passive\", i.e., they can only change if they were called inside a transaction, EOAs can initiate transactions. While simple, EOAs have a major drawback i.e there’s no flexibility in the account behavior, the Ethereum protocol dictates what it means for a transaction initiated by an EOA to be valid (the signature scheme is fixed). In particular, control over the public key gives complete control over the account. Although this is theoretically a secure method of account management, in practice it has some drawbacks, such as requiring you to keep your seed phrase secure yet accessible to you and limited flexibility surrounding wallet functionality. EIP-4337, a design proposal for Ethereum outlines account abstraction whereby all accounts are managed via a dedicated smart contract on the Ethereum network, as a way to increase flexibility and usability. You can add custom logic on top of the basic EOA functionality, thereby bringing account abstraction into Ethereum. The idea behind account abstraction is to allow more flexibility in the management of accounts rather than have their behavior determined at the protocol level. This can be achieved by introducing account contracts - smart contracts with programmable logic that determines the user’s account. Using account abstraction you can now program how your account functions. For example, you can: Determine what it means for a signature to be valid or what contracts your account is allowed to interact with. This is known as \"signature abstraction\" Pay transaction fees in different tokens - this is sometimes known as \"fee abstraction\" Design your own replay protection mechanism and allow sending multiple uncoupled transactions in parallel. Compare this to the sequential nonce solution used in Ethereum, which results in transactions being inherently sequential, i.e., even if you want to send two transactions in parallel, you must wait for some confirmation on the first before sending the second. Otherwise, the second transaction may be rejected due to an invalid nonce. With account abstraction, one can discuss different solutions that bypass the need for a sequential nonce. This is known as \"nonce abstraction\" Today, Starknet offers signature abstraction. In the future, we will enrich the current account abstraction design (see e.g. the paymaster proposal for fee abstraction). Two examples of how you might program an account to function using account abstraction are: Social recovery A process where if you lose your wallet, you are able to retrieve it via a selected social network, vastly improving the typical experience of wallet recovery. Operating your account via facial recognition With signature abstraction, you can use your phone’s native hardware to sign transactions, making it practically impossible to take control of another user’s account (even in the case of the phone itself being stolen).","title":"What is an account?","component":"documentation","version":"","name":"introduction","url":"/documentation/architecture_and_concepts/Account_Abstraction/introduction/","titles":[{"text":"Ethereum account structure","hash":"ethereum_account_structure","id":1},{"text":"What is Account Abstraction?","hash":"account_abstraction","id":2},{"text":"Examples of customizing account functionality","hash":"examples","id":3}]},"26":{"id":26,"text":"The key stages of transaction lifetime are: The sequencer selects a transaction from the mempool and executes __validate__ If the transaction was valid, the __execute__ function is called If __execute__ ran successfully, the sequencer includes the transaction in the block, charges the fee and proceeds to work on the next transaction (once the block is concluded, it will be sent to the prover) The sequencer receives fees in ETH in return for including transactions in a block. For more details on how the transaction fee is computed, see the fees section","title":"Simplified transaction flow","component":"documentation","version":"","name":"simplified_transaction_flow","url":"/documentation/architecture_and_concepts/Account_Abstraction/simplified_transaction_flow/","titles":[{"text":"The payment mechanism","hash":"a_payment_mechanism","id":1}]},"27":{"id":27,"text":"As previously stated, Starknet’s account structure is not completely arbitrary, but must include the following two functions, which account transactions call: __validate__ __execute__ Separating the __validate__ and __execute__ functions guarantees payment to sequencers for work completed and protects them from Denial of Service (DoS) attacks. The __validate__ function ensures that any transaction submitted was indeed initiated by the account owner and therefore will not take up unjustified resources during the execution process. Without this mechanism, a forged transaction can result in the sequencer stealing the user’s funds. In short, __validate__ ensures that the sequencer may only include transactions that were approved by the account owner. The arbitrary logic allowed in the __validate__ function gives the account’s designer the ability to determine what it means to him for a transaction to be valid. This gives rise to the usage of different signature schemes and other exotic accounts. When the __validate__ function fails, no fee will be taken from the account in question. There are some limitations set on the __validate__ function. The purpose of these limitations is twofold: We want to avoid the sequencer having to do a lot of work only to discover that the validation failed and the sequencer is then not eligible to charge a fee (if this was possible, the sequencer would be completely exposed to DOS attacks). Validation, while now abstract and in control of the account owner rather than the protocol, should still be a simple operation. This is why in the future, Starknet will place max steps limitation upon the __validate__ function. Even if the validation is simple, we could still face the following attack: An attacker fills the mempool with transactions that are valid at time T. A sequencer may start executing them, thinking that at the time he will produce his block, they will still be valid. However, shortly after, at time T', the attacker sends one transaction that somehow invalidates all the previous ones and makes sure it’s included before the sequencer gets to publish his block (the attacker may do this by offering higher fees for this one transaction). As a concrete example, think of many __validate__ functions checking that the value of a storage slot is 1 and the attacker’s transaction later sets it to 0. To handle this issue, we add some further limitations. Currently, Starknet enforces that __validate__ does not call external contracts. The property that we achieve with the above restrictions is that a single storage update may only invalidate transactions from a single account (this is the best we can do, an account can always invalidate its own past transactions by changing its keys). Thus, the price (in fees) required to invalidate transactions in the mempool is linear in the number of unique accounts that we want to invalidate. The purpose of the __execute__ function is to abstract away the remaining actions performed by a transaction. In Ethereum, a transaction is necessarily a call to a specific function in a smart contract. With the __execute__ abstraction, the account designer controls the flow of the transaction. For example, multicalls can be natively supported in your account, saving the need to send multiple transactions (in practice, this is even harder to manage without multicalls due to nonces). A transaction is considered reverted when the __execute__ function failed. Today, reverted transactions are not included in blocks, but in the future, they will be and the sequencer will be eligible to charge a fee for the work done up to the point of failure, similar to Ethereum. Currently, the sequencer charges only for successful transactions that result from the successful completion of the __execute__ function.","title":"Validate and execute","component":"documentation","version":"","name":"validate_and_execute","url":"/documentation/architecture_and_concepts/Account_Abstraction/validate_and_execute/","titles":[{"text":"The validate function","hash":"the_validate_function","id":1},{"text":"Invalid transactions","hash":"invalid_transactions","id":2},{"text":"Validate limitations","hash":"validate_limitations","id":3},{"text":"The execute function","hash":"the_execute_function","id":4},{"text":"Reverted transactions","hash":"reverted_transactions","id":5}]},"28":{"id":28,"text":"In Starknet, the block is defined as a list of transactions and a block header. The following fields define the block header: Name Type Description Implemented parent_block_hash FieldElement The hash of this block’s parent ✓ block_number Integer The number (height) of this block ✓ global_state_root FieldElement The state commitment after this block ✓ sequencer_address FieldElement The Starknet address of the sequencer who created this block ✓ block_timestamp Timestamp The time the sequencer created this block before executing transactions ✓ transaction_count Integer The number of transactions in a block ✓ transaction_commitment FieldElement A commitment to the transactions included in the block ✓ event_count Integer The number of events ✓ event_commitment FieldElement A commitment to the events produced in this block ✓ protocol_version Integer The version of the Starknet protocol used when creating this block extra data FieldElement Extraneous data that might be useful for running transactions The commitment fields event_commitment and transaction_commitment are the roots of a height 64 binary Merkle Patricia tree. The leaf at index \\(i\\) corresponds to the hash of the \\(i'th\\) event for event_commitment and \\(h(transaction \\ hash, signature)\\) for invoke transaction_commitment. For other types of transactions, we use \\(h(0,0)\\). The block hash is defined as the Pedersen hash over the header’s elements. \\[\\begin{aligned} h(B)=h(&\\text{block_number}, \\text{ global_state_root}, \\text{ sequencer_address}, \\text{ block_timestamp}, \\\\ &\\text{transaction_count}, \\text{ transaction_commitment}, \\text{ event_count},\\\\ & \\text{event_commitment}, 0, 0, \\text{ parent_block_hash}) \\end{aligned}\\] Where \\(h\\) is the Pedersen hash. Zeroes inside the hash computation of an object are used as placeholders, to be replaced in the future by meaningful fields.","title":"Block structure","component":"documentation","version":"","name":"header","url":"/documentation/architecture_and_concepts/Blocks/header/","titles":[{"text":"Block header","hash":"block_header","id":1},{"text":"Block hash","hash":"block_hash","id":2}]},"29":{"id":29,"text":"The following are the possible statuses of a transaction from the moment it’s sent by the user to the moment it’s validated by L1. Transaction is not yet known to the sequencer Transaction was received by the sequencer. Transaction will now either execute successfully or be rejected. Transaction executed successfully and entered the pending block. Transaction executed unsuccessfully and thus was skipped (applies both to a pending and an actual created block). Possible reasons for transaction rejection: An assertion failed during the execution of the transaction (in Starknet, unlike in Ethereum, transaction executions do not always succeed). The block may be rejected on L1, thus changing the transaction status to REJECTED Transaction passed validation and entered an actual created block on L2. Transaction was accepted on-chain. Today, Starknet supports querying the new block before its construction is complete. This feature improves the responsiveness of the system prior to the decentralization phase, but will probably become obsolete once the system is decentralized, as full nodes will only propagate finalized blocks through the network. During the construction of the block, as it is accumulating new transactions, the block’s status is PENDING. While status is PENDING, new transactions are dynamically added to the block. Once the sequencer decides to close the block, it becomes ACCEPTED_ON_L2 and its hash is computed. The following example is a query for the pending mainnet block: https://alpha-mainnet.starknet.io/feeder_gateway/get_block?blockNumber=pending See the CLI section on how to call the gateway with respect to the pending block. The transaction receipt contains basic transaction details (block identifiers and the index within the block), a summary of the execution resources used by the transaction, the events emitted, a list of messages sent to L1, and a consumed L1 message (in case the transaction invokes an L1 handler). The following is an example of a receipt: { \"execution_resources\": { \"builtin_instance_counter\": { \"pedersen_builtin\": 0, \"range_check_builtin\": 0, \"bitwise_builtin\": 0, \"output_builtin\": 0, \"ecdsa_builtin\": 0, \"ec_op_builtin\": 0 }, \"n_steps\": 178, \"n_memory_holes\": 0 }, \"block_number\": 6807, \"transaction_index\": 0, \"transaction_hash\": \"0x3f187b7522320f1c87271772fedd6ad119f62595e2d9208824367463df94a5d\", \"status\": \"PENDING\", \"block_hash\": \"0x23173d4e2d5c0ecc1376b8dbe345c028aa424048c67f68812a9a83873a2d87f\", \"l2_to_l1_messages\": [], \"events\": [ { \"data\": [\"0\", \"4321\"], \"from_address\": \"0x14acf3b7e92f97adee4d5359a7de3d673582f0ce03d33879cdbdbf03ec7fa5d\", \"keys\": [ \"1744303484486821561902174603220722448499782664094942993128426674277214273437\" ] } ] }","title":"Transaction Lifecycle","component":"documentation","version":"","name":"transaction-life-cycle","url":"/documentation/architecture_and_concepts/Blocks/transaction-life-cycle/","titles":[{"text":"Transaction status","hash":"transaction_status","id":1},{"text":"NOT_RECEIVED","hash":"not_received","id":2},{"text":"RECEIVED","hash":"received","id":3},{"text":"PENDING","hash":"pending","id":4},{"text":"REJECTED","hash":"rejected","id":5},{"text":"ACCEPTED_ON_L2","hash":"accepted_on_l2","id":6},{"text":"ACCEPTED_ON_L1","hash":"accepted_on_l1","id":7},{"text":"The pending block","hash":"the_pending_block","id":8},{"text":"Transaction receipt","hash":"transaction_receipt","id":9}]},"30":{"id":30,"text":"Starknet supports the following types of transactions: invoke transaction declare transaction This topic describes the available fields for these transaction types and how each transaction hash is calculated. The deploy transaction has now been removed in the current release of Starknet. To deploy new contract instances, you can use the deploy syscall. Starknet supports the transaction versions described here. When the fields that comprise a transaction change, either with the addition of a new field or the removal of an existing field, then the transaction version increases. Do not submit a transaction that uses an unsupported transaction type, because it cannot be included in a proof, and so cannot become part of a Starknet block. In order to calculate the transaction hash, we first need to obtain the deployed contract address. The Deploy transaction’s hash is calculated as follows: \\[\\begin{aligned} \\text{deploy_tx_hash} = h( & \\text{\"deploy\"}, \\text{version}, \\text{ contract_address}, \\text{sn_keccak}(\\text{\"constructor\"}), \\\\ & h(\\text{constructor_calldata}), 0, \\text{chain_id}) \\end{aligned}\\] Where: The placeholder zero is used to align the hash computation for the different types of transactions. “deploy” and “constructor” are constant strings encoded in ASCII. \\(h\\) is the Pedersen hash and \\(sn\\_keccak\\) is Starknet Keccak chain_id is a constant value that specifies the network to which this transaction is sent. See Chain-Id. contract_address is calculated as described here. The invoke transaction is the main transaction type used to invoke contract functions in Starknet. Transaction version 0 is deprecated and will be removed in a future release of Starknet. Table 1. Transaction fields Name Type Description sender_address FieldElement The address of the sender of this transaction. calldata List The arguments that are passed to the validate and execute functions. signature List Additional information given by the sender, used to validate the transaction. max_fee FieldElement The maximum fee that the sender is willing to pay for the transaction nonce FieldElement The transaction nonce. version FieldElement The transaction’s version. The value is 1. When the fields that comprise a transaction change, either with the addition of a new field or the removal of an existing field, then the transaction version increases. Table 2. Transaction fields Name Type Description contract_address FieldElement The address of the contract invoked by this transaction. entry_point_selector FieldElement The encoding of the selector for the function invoked (the entry point in the contract) calldata List The arguments that are passed to the invoked function signature List Additional information given by the sender, used to validate the transaction. max_fee FieldElement The maximum fee that the sender is willing to pay for the transaction version FieldElement The transaction’s version. The value is 0. Transaction version 0 is deprecated and will be removed in a future version of Starknet. When the fields that comprise a transaction change, either with the addition of a new field or the removal of an existing field, then the transaction version increases. The invoke transaction hash is calculated as a hash over the given transaction elements, specifically: \\[\\begin{aligned} \\text{invoke_v1_tx_hash} = h( & \\text{\"invoke\"}, \\text{version}, \\text{sender_address}, 0, h(\\text{calldata}), \\\\ & \\text{max_fee}, \\text{chain_id}, \\text{nonce}) \\end{aligned}\\] Where: \\(\\text{invoke}\\) is a constant prefix string, encoded in ASCII. The placeholder zero is used to align the hash computation for the different types of transactions. \\(\\text{chain_id}\\) is a constant value that specifies the network to which this transaction is sent. See Chain-Id. \\(h\\) is the Pedersen hash The hash of a v0 invoke transaction is computed as follows: \\[\\begin{aligned} \\text{invoke_v0_tx_hash} = h( & \\text{\"invoke\"}, \\text{version}, \\text{contract_address}, \\text{entry_point_selector}, \\\\ & h(\\text{calldata}), \\text{max_fee}, \\text{chain_id}) \\end{aligned}\\] Where: \\(\\text{invoke}\\) is a constant prefix string, encoded in (ASCII). \\(\\text{chain_id}\\) is a constant value that specifies the network to which this transaction is sent. See Chain-Id. \\(h\\) is the Pedersen hash The declare transaction is used to introduce new classes into the state of Starknet, enabling other contracts to deploy instances of those classes or using them in a library call. For more information, see contract classes. A declare transaction has the following fields: Name Type Description contract_class ContractClass The class object. sender_address FieldElement The address of the account initiating the transaction. max_fee FieldElement The maximum fee that the sender is willing to pay for the transaction. signature List Additional information given by the sender, used to validate the transaction. nonce FieldElement The transaction nonce. version FieldElement The transaction’s version. Possible values are 1 or 0. When the fields that comprise a transaction change, either with the addition of a new field or the removal of an existing field, then the transaction version increases. Transaction version 0 is deprecated and will be removed in a future version of Starknet. The hash of a v1 declare transaction is computed as follows: \\[\\begin{aligned} \\text{declare_v1_tx_hash} = h( & \\text{\"declare\"}, \\text{version}, \\text{sender_address}, 0, \\text{class_hash}, \\text{max_fee}, \\text{chain_id}, \\text{nonce}) \\end{aligned}\\] Where: \\(\\text{declare}\\) is a constant prefix string, encoded in ASCII. \\(\\text{class_hash}\\) is the hash of the contract class. See Contract Hash for details about how the hash is computed. The placeholder zero is used to align the hash computation for the different types of transactions. \\(\\text{chain_id}\\) is a constant value that specifies the network to which this transaction is sent. See Chain-Id. \\(h\\) is the Pedersen hash The hash of a v0 declare transaction is computed as follows: \\[\\begin{aligned} \\text{declare_v0_tx_hash} = h( & \\text{\"declare\"}, \\text{version}, \\text{sender_address}, 0, 0, \\text{max_fee}, \\text{chain_id}, \\text{class_hash}) \\end{aligned}\\] Where: \\(\\text{declare}\\) is a constant prefix string, encoded in ASCII. The placeholder zeros are used to align the hash computation for the different types of transactions. \\(\\text{class_hash}\\) is the hash of the contract class. See Contract Hash for details about how the hash is computed. \\(\\text{chain_id}\\) is a constant value that specifies the network to which this transaction is sent. See Chain-Id. \\(h\\) is the Pedersen hash While Starknet does not have a specific signature scheme built into the protocol, the Cairo language, in which smart contracts are written, does have an efficient implementation for ECDSA signature with respect to a STARK-friendly curve. The generator used in the ECDSA algorithm is \\(G=\\left(g_x, g_y\\right)\\) where: \\(g_x=874739451078007766457464989774322083649278607533249481151382481072868806602\\) \\(g_y=152666792071518830868575557812948353041420400780739481342941381225525861407\\) Starknet currently supports three chain IDs. Chain IDs are given as numbers, representing the ASCII encoding of specific constant strings, as illustrated by the following Python snippet: chain_id = int.from_bytes(value, byteorder=\"big\", signed=False) Three constants are currently used: SN_MAIN for Starknet’s main network. SN_GOERLI for Starknet’s public testnet. SN_GOERLI2 for Starknet developers.","title":"Transaction structure","component":"documentation","version":"","name":"transactions","url":"/documentation/architecture_and_concepts/Blocks/transactions/","titles":[{"text":"Transaction versioning","hash":"transaction_versioning","id":1},{"text":"Calculating the hash of a deploy transaction","hash":"deploy_transaction","id":2},{"text":"Invoke Transaction","hash":"invoke_transaction","id":3},{"text":"Invoke transaction version 1","hash":"invoke_transaction_version_1","id":4},{"text":"Invoke transaction version 0","hash":"invoke_transaction_version_0","id":5},{"text":"Calculating the hash of a v1 invoke transaction","hash":"calculating_the_hash_of_a_v1_invoke_transaction","id":6},{"text":"Calculating the hash of a v0 invoke transaction","hash":"calculating_the_hash_of_a_v0_invoke_transaction","id":7},{"text":"Declare transaction","hash":"declare_transaction","id":8},{"text":"Calculating the hash of a v1 declare transaction","hash":"calculating_the_hash_of_a_v1_declare_transaction","id":9},{"text":"Calculating the hash of a v0 declare transaction","hash":"calculating_the_hash_of_a_v0_declare_transaction","id":10},{"text":"Signature","hash":"signature","id":11},{"text":"Chain-Id","hash":"chain-id","id":12}]},"31":{"id":31,"text":"Contract ABI is a representation of a Starknet contract’s interface. It is formatted as a JSON and describes the functions, structs and events which are defined in the contract. You can get the contract’s ABI by compiling: starknet-compile contract.cairo \\ --output contract_compiled.json \\ --abi contract_abi.json The following is an example contract ABI: [ { \"members\": [ { \"name\": \"x\", \"offset\": 0, \"type\": \"felt\" }, { \"name\": \"y\", \"offset\": 1, \"type\": \"felt\" } ], \"name\": \"Point\", \"size\": 2, \"type\": \"struct\" }, { \"members\": [ { \"name\": \"x\", \"offset\": 0, \"type\": \"felt\" }, { \"name\": \"p\", \"offset\": 1, \"type\": \"Point\" } ], \"name\": \"Test\", \"size\": 3, \"type\": \"struct\" }, { \"data\": [ { \"name\": \"a\", \"type\": \"felt\" }, { \"name\": \"b\", \"type\": \"felt\" } ], \"keys\": [], \"name\": \"status_update\", \"type\": \"event\" }, { \"inputs\": [ { \"name\": \"a_len\", \"type\": \"felt\" }, { \"name\": \"a\", \"type\": \"felt*\" } ], \"name\": \"constructor\", \"outputs\": [], \"type\": \"constructor\" }, { \"inputs\": [ { \"name\": \"user\", \"type\": \"felt\" } ], \"name\": \"extend_range\", \"outputs\": [], \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"points_len\", \"type\": \"felt\" }, { \"name\": \"points\", \"type\": \"(felt, Point, Point)*\" } ], \"name\": \"input_arrays\", \"outputs\": [], \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"nested_len\", \"type\": \"felt\" }, { \"name\": \"nested\", \"type\": \"Test*\" } ], \"name\": \"input_nested_arrays\", \"outputs\": [ { \"name\": \"res\", \"type\": \"felt\" } ], \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"array_len\", \"type\": \"felt\" }, { \"name\": \"array\", \"type\": \"felt*\" } ], \"name\": \"output_arrays\", \"outputs\": [ { \"name\": \"array_len\", \"type\": \"felt\" }, { \"name\": \"array\", \"type\": \"felt*\" } ], \"type\": \"function\" }, { \"inputs\": [ { \"name\": \"points\", \"type\": \"(Point, Point)\" } ], \"name\": \"input_output_struct\", \"outputs\": [ { \"name\": \"res\", \"type\": \"Point\" } ], \"type\": \"function\" } ]","title":"Contract ABI","component":"documentation","version":"","name":"contract-abi","url":"/documentation/architecture_and_concepts/Contracts/contract-abi/","titles":[]},"32":{"id":32,"text":"The contract address is a unique identifier of the contract on Starknet. It is a chain hash of the following information: prefix - the ASCII encoding of the constant string “STARKNET_CONTRACT_ADDRESS” caller_address - currently always zero salt - part of the deploy transaction contract_hash - see the docs calldata_hash - array hash of the inputs to the constructor The computation is roughly the following: contract_address := pedersen( “STARKNET_CONTRACT_ADDRESS”, caller_address, salt, pedersen(contract_code), pedersen(constructor_calldata)) You can find the address computation on our repo here.","title":"Contract Address","component":"documentation","version":"","name":"contract-address","url":"/documentation/architecture_and_concepts/Contracts/contract-address/","titles":[]},"33":{"id":33,"text":"Taking inspiration from object-oriented programming, Starknet distinguishes between a contract and its implementation by separating contracts into classes and instances. A contract class is the definition of the contract: Cairo byte code, hint information, entry point names, and everything that defines its semantics unambiguously. Each class is identified by its class hash, which is analogous to a class name in an object oriented programming language. A contract instance is a deployed contract corresponding to some class. Notice that only contract instances behave as contracts in that they have their own storage and can be called by transactions or other contracts. A contract class does not necessarily have a deployed instance in Starknet. New classes can be added to the state of Starknet with the declare transaction. New instances of a previously declared class can be deployed via the deploy system call. To use the functionality of a declared class, without deploying an instance of that class, you can use the library_call system call. This system call is an analogue of Ethereum’s delegate call in the world of classes. You can use class code directly, instead of having a placeholder contract deployed, which is used only for its code.","title":"Contract Classes","component":"documentation","version":"","name":"contract-classes","url":"/documentation/architecture_and_concepts/Contracts/contract-classes/","titles":[{"text":"Using Classes","hash":"using_classes","id":1}]},"34":{"id":34,"text":"The class hash is a hash chain of the definition of the class. The elements that define a class are: API version The version of the class, currently always 0. Array of external functions entry points An entry point is a pair (selector, offset), where offset is the offset of the instruction that should be called inside the class’s bytecode. The selector is an identifier through which the function is callable in transactions or in other classes. The selector is the starknet_keccak hash of the function name, encoded in ASCII. Array of L1 handlers entry points Array of constructors entry points Currently, the compiler allows only one constructor. Array of used builtin names An ASCII-encode array, ordered by declaration. Program hash The starknet_keccak of the class’s program. The class’s program is the abi and program part of the .json file that the Starknet compiler outputs when you run the following command: $ starknet-compile --no_debug_info The compiler outputs abi, entrypoint selectors and the program. For program hash, starknet_keccak of only abi and program needs to be calculated. To see the exact computation of this field, see contract_hash.py. Bytecode Represented by an array of field elements. The hash of the class is the chain hash, that is, the Pedersen hash, of the above, computed as follows: Start with \\(h(0,\\text{api_version})\\). For every line in the above, excluding the first, compute \\(h(h(previous\\_line), new\\_line)\\), where the hash of an array is defined as Array Hashing. Let \\(c\\) denote the cumulative hash that results from applying the above process; the class’s hash is then \\(h(c, \\textrm{number_of_lines})\\), where \\(\\text{number_of_lines}\\) is 7. For more details, see the Cairo implementation.","title":"Class hash","component":"documentation","version":"","name":"contract-hash","url":"/documentation/architecture_and_concepts/Contracts/contract-hash/","titles":[{"text":"Definition of a class","hash":"definition_of_a_class","id":1},{"text":"How the class hash is computed","hash":"how_the_class_hash_is_computed","id":2}]},"35":{"id":35,"text":"The contract’s storage is a persistent storage space where you can read, write, modify, and persist data. The storage is a map with \\(2^{251}\\) slots, where each slot is a felt which is initialized to 0. The basic function for reading storage returns value stored in key is: let (value) = storage_read(key) The basic function for writing to storage writes value to key is: storage_write(key, value); Both are system calls that can be imported by adding the line: from starkware.starknet.common.syscalls import storage_read, storage_write Another basic function is used for getting the storage address, this function is created by the compiler when defining a storage variable, as explained below. This function returns the address of the storage variable. Below we discuss how this address is determined from the variable’s name and keys. The most common way for interacting with a contract’s storage is through storage variables. The @storage_var decorator declares a variable that will be kept as part of the contract storage. The variable can consist of a single felt, or it can be a mapping from multiple arguments to a tuple of felts or structs. To use this variable, the var.read(args), var.write(args, value) and var.addr(args) functions are automatically created by the @storage_var decorator, for reading the storage value, writing the storage value and getting the storage address, respectively. The Starknet contract compiler generates the Cairo code that maps the storage variable’s name and argument values to an address — so that it can be part of the generated proof. The address of a storage variable is computed as follows: If it is a single value, then the address is sn_keccak(variable_name), where variable_name is the ASCII encoding of the variable’s name. If it is a (nested) mapping, then the address of the value at key k_1,...,k_n is h(...h(h(sn_keccak(variable_name),k_1),k_2),...,k_n) where \\(h\\) is the Pedersen hash and the final value is taken \\(\\bmod (2^{251-256})\\) If it is a mapping to complex values (e.g., tuples or structs), then this complex value lies in a continuous segment starting from the address calculated in the previous point. Note that 256 field elements is the current limitation on the maximal size of a complex storage value. Note that when calling var.addr(args) for a storage variable with complex values, the returned value is the address of the first element in the storage. Roughly, we can summarize the above as follows: storage variable address := pedersen(keccak(variable name), keys) In the following example we define a storage variable named range that is a mapping from a key to a Tuple of two values. @storage_var func range(user : felt) -> (res : (felt, felt)): end","title":"Contract Storage","component":"documentation","version":"","name":"contract-storage","url":"/documentation/architecture_and_concepts/Contracts/contract-storage/","titles":[{"text":"Storage Layout","hash":"storage_layout","id":1},{"text":"Storage Low Level Functions","hash":"storage_low_level_functions","id":2},{"text":"Storage Variables","hash":"storage_variables","id":3}]},"36":{"id":36,"text":"Starknet smart contracts are written in Cairo. However, Cairo is a general purpose language that you can use for much more than just contract language. For details, see Cairo – a Turing-complete STARK-friendly CPU architecture. So writing smart contracts requires some operations, such as calling another contract or accessing the contract’s storage, that standalone programs do not require. The Starknet contract language supports these operations by using system calls. System calls enable a contract to require services from the Starknet OS. You can use system calls in a function to get information that depends on the broader state of Starknet, which would otherwise be inaccessible, rather than local variables that appear in the function’s scope. Syntax func call_contract{syscall_ptr : felt*}( contract_address : felt, function_selector : felt, calldata_size : felt, calldata : felt* ) -> (retdata_size : felt, retdata : felt*) Description Calls a given contract. This system call expects the address of the called contract, a selector for a function within that contract, and call arguments. This is considered a lower level syntax for calling contracts. If the interface of the called contract is available, then you can use a more straightforward syntax. For more information, see the Calling another contract section in the Getting Started tutorial. Arguments contract_address The address of the contract you want to call. function_selector A selector for a function within that contract. calldata_size The size, in number of felts, of the calldata. calldata The calldata. Return values retdata_size The size, in number of felts, of the return data. retdata The return data. Common library syscalls.cairo Syntax func deploy{syscall_ptr : felt*}( class_hash : felt, contract_address_salt : felt, constructor_calldata_size : felt, constructor_calldata : felt*, ) -> (contract_address : felt) Description Deploys a new instance of a previously declared class. Arguments class_hash The class hash of the contract to be deployed contract_address_salt The salt, an arbitrary value provided by the sender, used in the computation of the contract’s address. constructor_calldata_size The number of arguments to pass to the constructor, equal to the number of felts in constructor_calldata. constructor_calldata The constructor’s calldata. An array of felts. Return values contract_address The address of the deployed contract. Common library syscalls.cairo Syntax func emit_event{syscall_ptr : felt*}(keys_len : felt, keys : felt*, data_len : felt, data : felt*) Description Emits an event with a given set of keys and data. For more information, and for a higher level syntax for emitting events, see Starknet events. Arguments keys_len The number of keys in the event. Analogous to Ethereum’s event topics, you can use the starknet_getEvents method to filter by these keys. keys The event’s keys data_len The number of data elements in the event. data The event’s data Return values None. Common library syscalls.cairo Example The following example emits an event with two keys, the strings status and deposit and three data elements: 1, 2, and 3. let (keys : felt*) = alloc() assert keys[0] = 'status' assert keys[1] = 'deposit' let (data : felt*) = alloc() assert data[0] = 1 assert data[1] = 2 assert data[2] = 3 emit_event(2, keys, 3, data) func get_block_number{syscall_ptr : felt*}() -> (block_number : felt) Description Gets the number of the block in which the transaction is executed. Arguments None. Return values block_number The number of the block in which the transaction is executed. Common library syscalls.cairo Syntax func get_block_timestamp{syscall_ptr : felt*}() -> (block_timestamp : felt) Description Gets the timestamp of the block in which the transaction is executed. Arguments None. Return values 'block_timestamp' The timestamp of the block in which the transaction is executed Common library syscalls.cairo Syntax func get_caller_address{syscall_ptr : felt*}() -> (caller_address : felt) Description Returns the address of the calling contract, or 0 if the call was not initiated by another contract. Arguments None. Return values caller_address The address of the calling contract, or 0 if the call was not initiated by another contract. Common library syscalls.cairo Syntax func get_contract_address{syscall_ptr : felt*}() -> (contract_address : felt) Description Gets the address of the contract who raised the system call. Arguments None. Return values contract_address The address of the contract who raised the system call. Common library syscalls.cairo Syntax func get_sequencer_address{syscall_ptr : felt*}() -> (sequencer_address : felt) Description Returns the address of the sequencer that generated the current block. Arguments None. Return values sequencer_address The address of the sequencer that generated the current block. Common library syscalls.cairo Gets information about the original transaction. Syntax func get_tx_info{syscall_ptr : felt*}() -> (tx_info : TxInfo*) Description Gets information about the original transaction. Arguments None. Return values tx_info The following information about the original transaction: the version of the transaction the address of the account that initiated this transaction the maximum fee that is allowed to be charged for the inclusion of this transaction the signature of the account that initiated this transaction the transaction’s hash the intended chain id Common library syscalls.cairo Syntax func library_call{syscall_ptr : felt*}( class_hash : felt, function_selector : felt, calldata_size : felt, calldata : felt* ) -> (retdata_size : felt, retdata : felt*) Description Calls the requested function in any previously declared class. This system call replaces the known delegate call functionality from Ethereum, with the important difference that there is only one contract involved. The class is only used for its logic. Arguments class_hash The hash of the class you want to use. function_selector A selector for a function within that class. calldata_size The size, in number of felts, of the calldata. calldata The calldata. Return values retdata_size The size, in number of felts, of the return data. retdata The return data. Common library syscalls.cairo Syntax func library_call_l1_handler{syscall_ptr : felt*}( class_hash : felt, function_selector : felt, calldata_size : felt, calldata : felt* ) -> (retdata_size : felt, retdata : felt*) Description Calls the requested L1 handler in any previously declared class. Same as the library_call system call, but also enables you to call an L1 handler that cannot otherwise be called directly. For more information, see Starknet’s messaging mechanism. When you invoke an L1 handler with this system call, the sequencer does not consume an L1→L2 message. This system call enables an L1 handler to use the logic inside an L1 handler in a different class. It is recommended to raise this system call only inside an L1 handler. Arguments class_hash The hash of the class you want to use. function_selector A selector for an L1 handler function within that class. calldata_size The size, in number of felts, of the calldata. calldata The calldata. Return values retdata_size The size, in number of felts, of the return data. retdata The return data. Common library syscalls.cairo Syntax func send_message_to_l1{syscall_ptr : felt*}( to_address : felt, payload_size : felt, payload : felt* ) Description Sends a message to L1. This system call includes the message parameters as part of the proof’s output, and exposes these parameters to the Starknet Core contract on L1 once the state update, including the transaction, is received. For more information, see Starknet’s messaging mechanism. Arguments to_address The recipient’s L1 address. payload_size The size of the message payload. payload A pointer to an array containing the contents of the message. Return values None. Common library messages.cairo Example The following example sends a message whose content is (1,2) to the L1 contract whose address is 3423542542364363. let payload = alloc() payload[0] = 1 payload[1] = 2 send_message_to_l1(3423542542364363,2,payload) Syntax func storage_read{syscall_ptr : felt*}(address : felt) -> (value : felt) Description Gets the value of a key in the storage of the calling contract. This system call provides direct access to any possible key in storage, in contrast with balance.read(), which enables you to read storage variables that are defined explicitly in the contract. For information on accessing storage by using the storage variables, see storage variables. Arguments address The address of the storage key you want to read. Return values value The value of the key. Common library syscalls.cairo Example let value = storage_read(3534535754756246375475423547453) Sets the value of a key in the storage of the calling contract. Syntax func storage_write{syscall_ptr : felt*}(address : felt, value : felt) Description Sets the value of a key in the storage of the calling contract. This system call provides direct access to any possible key in storage, in contrast with balance.write(), which enables you to write to storage variables that are defined explicitly in the contract. For information on accessing storage by using the storage variables, see storage variables. Arguments address The address of the storage key to which you want to write. .value The value to write to the key. Return values None. Common library syscalls.cairo","title":"System Calls","component":"documentation","version":"","name":"system-calls","url":"/documentation/architecture_and_concepts/Contracts/system-calls/","titles":[{"text":"call_contract","hash":"call_contract","id":1},{"text":"deploy","hash":"deploy","id":2},{"text":"emit_event","hash":"emit_event","id":3},{"text":"get_block_number","hash":"get_block_number","id":4},{"text":"get_block_timestamp","hash":"get_block_timestamp","id":5},{"text":"get_caller_address","hash":"get_caller_address","id":6},{"text":"get_contract_address","hash":"get_contract_address","id":7},{"text":"get_sequencer_address","hash":"get_sequencer_address","id":8},{"text":"get_transaction_info","hash":"get_transaction_info","id":9},{"text":"library_call","hash":"library_call","id":10},{"text":"library_call_l1_handler","hash":"library_call_l1_handler","id":11},{"text":"send_message_to_L1","hash":"send_message_to_L1","id":12},{"text":"storage_read","hash":"storage_read","id":13},{"text":"storage_write","hash":"storage_write","id":14}]},"37":{"id":37,"text":"In the current stage of the Alpha, Starknet operates in a ZK-Rollup mode. This means that upon the acceptance of a state update on-chain, the state diff between the previous and new state is sent as calldata to Ethereum. This data allows anyone that observes Ethereum to reconstruct the current state of Starknet. Note that to update the Starknet state on L1, it suffices to send a valid proof — without information on the transactions or particular changes that this update caused. Consequently, more information must be provided in order to allow other parties to locally track Starknet’s state. The state diffs contain information on every contract whose storage was updated and additional information on contract deployments. Those differences are sent as uint256[] array as part of the calldata, and are encoded as follows: Number of cells that encode contract deployments For each deployed contract, we have: contract_address - the address of the deployed contract contract_hash - the hash of the contract Number of contracts whose storage is updated For each such contract, we have: contract_address - the address of the contract num_of_storage_updates - number of storage updates `nonce, num_of_storage_updates ` - a uint256 value that encodes both the number of storage updates for that contract and the updated nonce: \\[\\underbrace{0\\cdots0}_{\\text{128 bits}} | \\underbrace{\\text{new nonce}}_{\\text{64 bits}} | {\\underbrace{\\text{# of storage updates}}_{\\text{64 bits}}}_{\\text{LSB}}\\] For each storage update: key - the address inside the contract’s storage where the value is updated value - the new value Below we show an example of on chain data which was extracted from L1, and proceed to decode it according to the above format. [ 2, 2472939307328371039455977650994226407024607754063562993856224077254594995194, 1336043477925910602175429627555369551262229712266217887481529642650907574765, 5, 2019172390095051323869047481075102003731246132997057518965927979101413600827, 18446744073709551617, 5, 102, 2111158214429736260101797453815341265658516118421387314850625535905115418634, 2, 619473939880410191267127038055308002651079521370507951329266275707625062498, 1471584055184889701471507129567376607666785522455476394130774434754411633091, 619473939880410191267127038055308002651079521370507951329266275707625062499, 541081937647750334353499719661793404023294520617957763260656728924567461866, 2472939307328371039455977650994226407024607754063562993856224077254594995194, 1, 955723665991825982403667749532843665052270105995360175183368988948217233556, 2439272289032330041885427773916021390926903450917097317807468082958581062272, 3429319713503054399243751728532349500489096444181867640228809233993992987070, 1, 5, 1110, 3476138891838001128614704553731964710634238587541803499001822322602421164873, 6, 59664015286291125586727181187045849528930298741728639958614076589374875456, 600, 221246409693049874911156614478125967098431447433028390043893900771521609973, 400, 558404273560404778508455254030458021013656352466216690688595011803280448030, 100, 558404273560404778508455254030458021013656352466216690688595011803280448031, 200, 558404273560404778508455254030458021013656352466216690688595011803280448032, 300, 1351148242645005540004162531550805076995747746087542030095186557536641755046, 500 ] The first element, 2, is the number of cells that encode contracts deployment. The next two elements describe a single contract deployment with the following parameters: contract_address: 2472939307328371039455977650994226407024607754063562993856224077254594995194 contract_hash: 1336043477925910602175429627555369551262229712266217887481529642650907574765 The next element, 5 (index 6 in the array), is the number of contracts whose storage was updated. We will take only the first contract as an example. contract_address: 2019172390095051323869047481075102003731246132997057518965927979101413600827 One update (indicated by the cell at index 8): Following the above contract address, we have 18446744073709551617 (index 8 in the array), which is \\(2^{64}+1\\), thus: The new contract nonce is 1 One storage key is updated The value at key 5 was changed to 102. The next 4 contracts storage updates are interpreted in the same manner. The data described above is sent across several Ethereum transactions, each holding a part of this array as calldata. Each new Starknet block has its associated state diff transactions. You can find the code for extracting this data from Ethereum in Pathfinder’s repo. Pathfinder is the first Starknet full node implementation. You may also take a look at the python script which extracts the same information.","title":"On-Chain Data","component":"documentation","version":"","name":"on-chain-data","url":"/documentation/architecture_and_concepts/Data_Availability/on-chain-data/","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Format","hash":"format","id":2},{"text":"Example","hash":"example","id":3},{"text":"Extract from Ethereum","hash":"extract_from_ethereum","id":4}]},"38":{"id":38,"text":"A contract may emit events throughout its execution. Each event contains the following fields: from_address: address of the contract emitting the events keys: a list of field elements data: a list of field elements The keys can be used for indexing the events, while the data may contain any information that we wish to log (note that we are dealing with two separate lists of possibly varying size, rather than a list of key-value pairs). Events can be defined in a contract using the @event decorator. Once an event E has been defined, the compiler automatically adds the function E.emit(). The following example illustrates how an event is defined and emitted: @event func message_received(a : felt, b: felt): end message_received.emit(1, 2); The emit function emits an event with a single key, which is an identifier of the event, given by \\(\\text{sn_keccak(event_name)}\\), where \\(\\text{event_name}\\) is the ASCII encoding of the event’s name and \\(\\text{sn_keccak}\\) is defined here. To emit custom keys, one should use the low level emit_event system call: from starkware.starknet.common.syscalls import emit_event # ... let (keys : felt*) = alloc() assert keys[0] = 'status' assert keys[1] = 'deposit' let (data : felt*) = alloc() assert data[0] = 1 assert data[1] = 2 assert data[2] = 3 emit_event(2, keys, 3, data) The above code emits an event with two keys, the strings \"status\" and \"deposit\" (think of those as identifiers of the event that can be used for indexing) and three data elments 1, 2, 3. When using the higher level emit syntax, the event’s data may be of complex types, for example: struct Point: member x : felt member y : felt end @event func message_received(arr_len : felt, arr: felt*, p: Point): end # ... let (data : felt*) = alloc() assert data[0] = 1 assert data[1] = 2 let p = Point(3,4) message_received.emit(2, data, p) The emitted events are part of the transaction receipt. The event definition appears in the contract’s ABI. It contains the list of data fields (name and type) and the list of the custom keys (that is, all keys except the event identifier discussed above). Below is an example of an event inside the ABI: { \"data\": [ { \"name\": \"a\", \"type\": \"felt\" }, { \"name\": \"b\", \"type\": \"felt\" } ], \"keys\": [], \"name\": \"message_received\", \"type\": \"event\" } The event hash is given by: \\[h(h(h(h(0,\\text{from_address}),\\text{keys_hash}),\\text{data_hash}),3)\\] Where: \\(\\text{keys_hash}\\), \\(\\text{data_hash}\\) are the hashes of the keys list and data list correspondingly (see array hashing). \\(h\\) is the pedersen hash function The event hashes are included in the event_commitment field of a block.","title":"Starknet Events","component":"documentation","version":"","name":"starknet-events","url":"/documentation/architecture_and_concepts/Events/starknet-events/","titles":[{"text":"Emitting events","hash":"emitting_events","id":1},{"text":"Event ABI","hash":"event_abi","id":2},{"text":"Event hash","hash":"event_hash","id":3}]},"39":{"id":39,"text":"In this section, we will review Starknet Alpha fee mechanism. If you want to skip the motivation and deep dive into the mechanism, you can skip directly to the final formula. This section focuses on fees paid by an account on L2. For information about messaging fees that are paid on L1, see L1 → L2 message fees. Users can specify the maximum fee that they are willing to pay for a transaction via the max_fee field. The only limitation on the sequencer (enforced by the Starknet OS) is that the actual fee charged is bounded by max_fee, but for now, StarkWare’s sequencer will only charge the fee required to cover the proof cost (potentially less than the max fee). Presently, the sequencer only takes into account L1 costs involving proof submission. There are two components affecting the L1 footprint of a transaction: computational complexity: the heavier the transaction, the larger its portion in the proof verification cost. on chain data: L1 calldata cost originating from data availability and L2→L1 messages. The fee is denominated in ETH (this may change in future versions). Each transaction is associated with a gas estimate (explained below), and combining this with the gas price yields the estimated fee. Let’s analyze the correct metric for measuring transaction complexity. For simplicity, we will ignore Cairo’s builtins for the sake of the explanation, then see later how to refer to them. Recall that a Cairo program execution yields an execution trace. When proving a Starknet block, we aggregate all the transactions appearing in that block to the execution trace. Starknet’s prover generates proofs for execution traces, up to some maximal length \\(L\\) (Derived from the specs of the proving machine and the desired proof latency). Tracking the execution trace length associated with each transaction is simple. Each assertion over field elements (such as verifying addition/multiplication over the field) requires the same, constant number of trace cells (this is where our “no-builtins” assumption kicks in! Obviously Pedersen occupies more trace cells than addition). Therefore, in a world without builtins, the fee of the transaction is correlated with \\(\\text{TraceCells}[tx]/L\\). The Cairo execution trace is separated — and each builtin has its own slot. We have to mind this slot allocation when determining the fee. Let’s go over a concrete example first. For example, imagine the following trace that the prover will occupy: (up to) 500,000,000 Cairo Steps (up to) 20,000,000 Pedersen hashes (up to) 4,000,000 signature verifications (up to) 10,000,000 range checks The proof will be closed and sent to L1 when any of these components becomes full. It’s important to realize that the division to builtins must be predetermined! We can’t decide on the fly to have proof with 20,000,001 Pedersen and nothing else. Suppose, for example, that a transaction uses 10,000 Cairo steps and 500 Pedersen hashes. We can squeeze at most 40,000 such transactions into our hypothetical trace (20,000,000/500). Therefore, its gas price will be correlated with 1/40,000 the cost of submitting proof. Notice we completely ignored the number of Cairo steps this transaction performance estimation, as it is not the limiting factor (since 500,000,000/10,000 > 20,000,000/500). With this example in mind, we can now formulate the exact fee associated with L2 computation. For each transaction, the sequencer calculates a vector CairoResourceUsage holding: Number of Cairo steps Number of applications of each Cairo builtin (e.g., five range checks and two Pedersens) The sequencer crosses this information with the CairoResourceFeeWeights vector. For each resource type (step or a specific builtin application), CairoResourceFeeWeights has an entry that specifies the relative gas cost of that component in the proof. Going back to the above example, if the cost of submitting a proof with 20,000,000 Pedersen hashes is roughly 5m gas, then the weight of the Pedersen builtin is 0.25 gas per application (5,000,000/20,000,000). The sequencer has a pre-defined weights vector, in accordance with the proof parameters. The sequencer will charge only according to the limiting factor! Therefore the fee is correlated with: \\[\\max_k[\\text{CairoResourceUsage}_k \\cdot \\text{CairoResourceFeeWeights}_k]\\] Where \\(k\\) here enumerates the Cairo resource components, namely: number of steps and built-ins used. The weights are: Cairo step Pedersen Range check ECDSA Bitwise EC_OP 0.05 gas/step 1.6 gas/application 0.8 gas/application 102.4 gas/application 3.2 gas/application 51.2 gas/application The on-chain data associated with a transaction is composed of three parts storage updates l2→l1 messages deployed contracts Whenever a transaction updates a key at the storage of some contract, the following 32 byte words reach L1 as calldata: contract_address number of updated keys in that contract key to update new value Note that only the most recent value reaches L1. That is, the transaction’s fee only depends on the number of unique storage updates (if the same storage cell is updated multiple times within the transaction, the fee remains that of a single update). For more information, see the exact format. Let \\(c_w\\) denote the L1 calldata cost of a 32 byte word, measured in gas. With 16 gas per byte we have \\(c_w=16\\cdot 32=512\\). Consequently, the associated storage update fee for a transaction updating \\(n\\) unique contracts and \\(m\\) unique keys is: \\[\\text{gas_price}\\cdot c_w\\cdot\\underbrace{(2n+2m)}_{\\text{number of words}}\\] Note that there are many possible improvements to the above pessimistic estimation that will be gradually presented in future versions of Starknet. For example, if different transactions within the same block update the same storage cell, there is no need to charge both of them (only the latest value reaches L1). In the future, Starknet may include a refund mechanism for such cases. When a transaction which raises the send_message_to_l1 syscall is included in a state update, the following data reaches L1: l2 sender address l1 destination address payload size payload (list of field elements) Consequently, the fee associated with a single l2→l1 message is: \\[\\text{gas_price}\\cdot c_w\\cdot(3+\\text{payload_size})\\] When a transactions which raises the deploy syscall is included in a state update, the following data reaches L1: contract addresss class hash Consequently, the fee associated with a single deployment is: \\[\\text{gas_price}\\cdot 2 c_w\\] The fee for a transaction with: Cairo usage represented by the vector \\(v\\) (the entries of \\(v\\) correspond to the number of steps and number of applications per builtin) \\(n\\) unique contract updates \\(m\\) unique key updates \\(t\\) messages with payload sizes \\(q_1,...,q_t\\) \\(\\ell\\) contract deployments is given by: \\[F = \\text{gas_price}\\cdot\\left(\\max_k v_k w_k + c_w\\left(2(n+m) + 3t + \\sum\\limits_{i=1}^t q_i + 2\\ell\\right)\\right)\\] where \\(w\\) is the weights vector discussed above and \\(c_w\\) is the calldata cost (in gas) per 32 byte word. The fee is charged atomically with the transaction execution on L2. The Starknet OS injects a transfer of the fee-related ERC-20, with an amount equal to the fee paid, sender equals to the transaction submitter, and the sequencer as a receiver.","title":"Fee Mechanism","component":"documentation","version":"","name":"fee-mechanism","url":"/documentation/architecture_and_concepts/Fees/fee-mechanism/","titles":[{"text":"Introduction","hash":"introduction","id":1},{"text":"Fee Units","hash":"fee_units","id":2},{"text":"How much fee is charged? High-level overview","hash":"how_much_fee_is_charged_high_level_overview","id":3},{"text":"Computation","hash":"computation","id":4},{"text":"Without builtins","hash":"without_builtins","id":5},{"text":"Adding builtins","hash":"adding_builtins","id":6},{"text":"General Case","hash":"general_case","id":7},{"text":"On Chain Data","hash":"on_chain_data","id":8},{"text":"Storage Updates","hash":"storage_updates","id":9},{"text":"L2→L1 Messages","hash":"l2l1_messages","id":10},{"text":"Deployed Contracts","hash":"deployed_contracts","id":11},{"text":"Overall Fee","hash":"overall_fee","id":12},{"text":"When is the fee charged?","hash":"when_is_the_fee_charged","id":13}]},"40":{"id":40,"text":"All hashes outputs are eventually mapped to elements in \\(\\mathbb{F}_p\\) with \\(p=2^{251}+17\\cdot 2^{192}+1\\). There are two hash functions used throughout Starknet’s specifications: \\(sn\\_keccak: \\{0,1\\}^* \\rightarrow \\mathbb{F}_p\\) \\(pedersen: \\mathbb{F}_p\\times\\mathbb{F}_p\\rightarrow\\mathbb{F}_p\\) Starknet keccak, usually denoted by \\(sn\\_keccak\\), is defined as the first 250 bits of the Keccak256 hash (this is just Keccak256 augmented in order to fit into a field element). Pedersen hash makes use of the following STARK friendly elliptic curve over \\(\\mathbb{F}_p^2\\): \\[y^2=x^3+\\alpha x +\\beta\\] where \\(\\alpha=1\\) \\(\\beta = 3141592653589793238462643383279502884197169399375105820974944592307816406665\\) Given an input \\((a,b)\\in\\mathbb{F}_p^2\\), we begin by breaking it into \\(a_{low}, a_{high}, b_{low}, b_{high}\\), where the low part consists of the low 248 bits of the element and the high part consists of the high 4 bits of the element. Our Pedersen hash is then defined by: \\[h(a,b) = \\left[shift\\_point + a_{low} \\cdot P_0 + a_{high} \\cdot P1 + b_{low} \\cdot P2 + b_{high} \\cdot P3\\right]_x\\] where the values of the constants \\(shift\\_point, P_0, P_1, P_2, P_3\\) can be found in fast_pedersen_hash.py, and \\([P]_x\\) denotes the \\(x\\) coordinate of the point \\(P\\). Let \\(h\\) denote the pedersen hash function, then given an array \\(a_1,...,a_n\\) of \\(n\\) field elements we define \\(h(a_1,...,a_n)\\) to be: \\[h(...h(h(0, a_1),a_2),...,a_n),n)\\]","title":"Hash functions","component":"documentation","version":"","name":"hash-functions","url":"/documentation/architecture_and_concepts/Hashing/hash-functions/","titles":[{"text":"domain and range","hash":"domain_and_range","id":1},{"text":"Starknet Keccak","hash":"starknet_keccak","id":2},{"text":"Pedersen hash","hash":"pedersen_hash","id":3},{"text":"STARK curve","hash":"stark_curve","id":4},{"text":"Definition","hash":"definition","id":5},{"text":"Array hashing","hash":"array_hashing","id":6}]},"41":{"id":41,"text":"Contracts on L2 can interact asynchronously with contracts on L1 via the L2→L1 messaging protocol. During the execution of a Starknet transaction, a contract on Starknet sends an L2→L1 message by calling the send_message_to_L1 syscall. The message parameters (which contain the recipient contract on L1 and the relevant data) are then attached to the relevant state update that includes this syscall invocation. For example: let (message_payload : felt*) = alloc() assert message_payload[0] = // potentially add more elements to message_payload (message_payload[1], message_payload[2], etc.) assert_lt_felt(to_address, ETH_ADDRESS_BOUND) assert_not_zero(to_address) send_message_to_l1(to_address=to_address, payload_size=1, payload=message_payload) After the state update that included this transaction is proved and the L1 state is updated, the message is stored on L1 in the Starknet Core Contract (and the relevant counter is increased), and the LogMessageToL1 event (which contains the message parameters) is emitted. Later, the recipient address on L1 can access and consume the message as part of an L1 transaction by re-supplying the message parameters. This is done by calling consumeMessageFromL2 in the Starknet Core Contract, who verifies that the hash corresponds to a stored message and that the caller is indeed the recipient on L1. In such a case, the reference count of the message hash in the Starknet Core Contract decreases by 1. The above flow is illustrated in the following diagram: As demonstrated above, the structure of an L2 → L1 message is given by: Table 1. L2 → L1 Message FromAddress ToAddress Payload FieldElement EthereumAddress Payload The hash of an L2 → L1 message is computed on L1 as follows: keccak256( abi.encodePacked( FromAddress, ToAddress, Payload.length, Payload ) ); As the hash of the message being sent needs to be written to L1 storage (in the Starknet Core contract) there is always a fixed 20k gas cost associated with sending an L2 to L1 message. Contracts on L1 can interact asynchronously with contracts on L2 via the L1→L2 messaging protocol. The protocol consists of the following stages: 1. An L1 contract initiates a message to an L2 contract on Starknet. It does so by calling the sendMessageToL2 function on the Starknet Core Contract with the message parameters. 1.1 The Starknet Core Contract hashes the message parameters and updates the L1→L2 message mapping to indicate that a message with this hash was indeed sent. In fact, the L1 contract records the fee that the sender paid. For more information, see L1 → L2 message fees. 2. The message is then decoded into a Starknet transaction that invokes a function annotated with the l1_handler decorator on the target contract. Transactions like this on L2 are called L1 handler transactions. 2.1. The Starknet sequencer, upon seeing enough L1 confirmations for the transaction that sent the message, initiates the corresponding L2 transaction. 2.2. The L2 transaction invokes the relevant l1_handler. 3. The L1 Handler transaction that was created in the previous step is added to a proof. 4. The state update is received on the Core contract 5. the message is cleared from the Core contract’s storage. At this point the message is handled. The above flow is illustrated in the following diagram: An L1→L2 message consists of: The L1 sender address The recipient contract address on Starknet Function selector Calldata array Message nonce Message nonce The message nonce is maintained on the Starknet Core contract on L1, and is bumped whenever a message is sent to L2. It is used to avoid hash collisions between different L1 handler transactions who are induced by the same message being sent on L1 multiple times (see below). Imagine a scenario where a user transfers an asset from L1 to L2. The flow starts with the user sending the asset to a Starknet bridge and the corresponding L1→L2 message generation. Now, imagine that the L2 message consumption doesn’t function (this might happen due to a bug in the dApps’s Cairo contract). This could result in the user losing custody over their asset forever. To mitigate this risk, we allow the contract that initiated the L1→L2 message to cancel it — after declaring the intent and waiting a suitable amount of time. The user starts by calling startL1ToL2MessageCancellation with the relevant message parameters in the Starknet Core Contract. Then, after a five days delay, the user can finalize the cancellation by calling cancelL1ToL2Message. The reason for the delay is to protect the sequencer from a DOS attack in the form of repeatedly sending and canceling a message — before it is included in L1, rendering the L2 block which contains the activation of the corresponding L1 handler invalid. Note that this flow should only be used in edge cases such as bugs on the Layer 2 contract preventing message consumption. An L1 → L2 message induces a transaction on L2, which, unlike regular transactions, is not sent by an account. This calls for a different mechanism for paying the transaction’s fee, for otherwise the sequencer has no incentive of including L1 handler transactions inside a block. To avoid having to interact with both L1 and L2 when sending a message, L1 → L2 messages are payable on L1, by sending ETH with the call to the payable function sendMessageToL2 on the Starknet Core contract. The sequencer takes this fee in exchange for handling the message. The sequencer charges the fee in full upon updating the L1 state with the consumption of this message. The fee itself is calculated in the same manner as \"regular\" L2 transactions. You can use the CLI to get an estimate of an L1 → L2 message fee. For completeness, we describe the precise structure of both the message as it appears on L1 and the induced transaction as it appears on L2. Table 2. L1 → L2 Message FromAddress ToAddress Selector Payload Nonce EthereumAddress FieldElement FieldElement List FieldElement The hash of the message is computed on L1 as follows: keccak256( abi.encodePacked( uint256(FromAddress), ToAddress, Nonce, Selector, Payload.length, Payload ) ); Table 3. L1 handler transaction Version ContractAddress Selector Calldata Nonce FieldElement FieldElement FieldElement List FieldElement The hash of the corresponding L1 handler transaction on L2 is computed as follows: \\[\\begin{aligned} \\text{l1_handler_tx_hash} = h( & \\text{\"l1_handler\"}, \\text{ version}, \\text{ contract_address}, \\text{ entry_point_selector}, \\\\ & h(\\text{ calldata}), \\text{ max_fee}, \\text{ chain_id}, \\text{ nonce}) \\end{aligned}\\] Where: \\(\\text{l1_handler}\\) is a constant prefix, encoded in bytes (ASCII), with big-endian. \\(\\text{chain_id}\\) is a constant value that specifies the network to which this transaction is sent. See Chain-Id. \\(h\\) is the Pedersen hash In a l1_handler transaction, the first element of the calldata is always the Ethereum address of the sender.","title":"Messaging Mechanism","component":"documentation","version":"","name":"messaging-mechanism","url":"/documentation/architecture_and_concepts/L1-L2_Communication/messaging-mechanism/","titles":[{"text":"L2 → L1 Messages","hash":"l2-l1_messages","id":1},{"text":"L2 → L1 Structure And Hashing","hash":"structure_and_hashing_l2-l1","id":2},{"text":"L1 → L2 Messages","hash":"l1-l2_messages","id":3},{"text":"L1 → L2 Message Cancellation","hash":"l2-l1_message_cancellation","id":4},{"text":"L1 → L2 Message Fees","hash":"l1-l2_message_fees","id":5},{"text":"L1 → L2 Structure And Hashing","hash":"structure_and_hashing_l1-l2","id":6}]},"42":{"id":42,"text":"StarkGate is the Ethereum↔Starknet token bridge developed by StarkWare. Each supported token is associated with an L1 and L2 bridge contracts that are communicating via Starknet’s messaging mechanism. The bridges facilitate a user’s ability to conduct their transactions with their ETH and ERC-20 tokens that reside on L1, via the Starknet Alpha network and its STARK-based computational compression capabilities. For simplicity, we use terms such as “deposit”, “transact”, and “transfer” to refer to various operations involving a bridge, even though ETH and ERC20 tokens never actually leave Ethereum. The user calls the function deposit (see ERC-20 deposit and ETH deposit), supplying as parameters the recipient address on Starknet and the amount to transfer in the case of ERC-20 token. The deposit function then: Checks that the funds transferred are within the Alpha limitations Transfers the funds from the user account to the Starknet bridge Emits a deposit event with the sender address on L1, the recipient address on L2, and the amount Sends a message to the relevant L2 bridge with the amount to be transferred, and the recipient address as parameters. Note that, since every single bridge is dedicated to one token type, the token type doesn’t have to be explicit here. At the end of this step (i.e., after the execution on L1) the deposit transaction is known to Starknet’s sequencer, yet sequencers may wait for enough L1 confirmations before corresponding deposit transaction is initated on L2. During this step, the status of the L2 deposit transaction is NOT_RECEIVED. Once enough block confirmations are received for step 1, the sequencers may refer to the deposit request by triggering the L1 handler \"` handle_deposit on the L2 bridge. The function handle_deposit verifies that the deposit indeed came from the corresponding L1 bridge. It then calls to the relevant ERC-20 contract (e.g. the ERC-20 representing ETH on Starknet) and mints the tokens for the user. At the end of this step (i.e., after the sequencer processed this transaction, but before a proof is generated), the status of the deposit request will be ACCEPTED_ON_L2. Once the sequencer completes the block construction, Starknet’s provers will prove its validity and submit a state update to L1. When this happens, the message confirming the funds transfer will be cleared from the Starknet Core Contract, and the fact that the user has transferred their funds will be part of the now finalized state of Starknet. Note that if the message wasn’t on L1 to begin with (meaning Starknet “invented” a deposit request), the state update would fail. To initiate a withdraw, a user calls the initiate_withdraw function on the L2 bridge contract, supplying as parameters the recipient address on Ethereum, as well as the amount to transfer. The withdraw function then: Burns the transferred amount of tokens from the balance of the withdrawal’s initiator Sends a message to the relevant L1 bridge with the amount to be transferred, and the recipient address as parameters. As before, since the bridges are token-specific, the token itself is implicit here. Once the sequencer completes the block construction, Starknet’s provers will prove the validity of the block and submit a state update to L1. When this happens, the message from the previous step is stored in the Starknet Core Contract. After the withdraw message has been recorded on the Starknet Core Contract, anyone can finalize the transfer on L1 from the bridge back to the user, by calling the withdraw function (see ERC-20 withdraw and ETH withdraw). This step is permissionless, and may be performed by anyone. Since the user’s address is part of the recorded message on L1, he will be the recepient of the funds, regardless of who called the withdraw function on L1. In order to reduce the risks involved in using an Alpha version, StarkGate Alpha on Mainnet has limitations involving the deposit amount and total value locked in the L1 bridge contract: Token Max single deposit Max total value locked ETH No limit 4,500 Eth DAI 1,000 Dai 200,000 Dai USDC No limit 2,000,000 USDC USDT No limit 100,000 USDT WBTC No limit 5 WBTC We plan to gradually ease these limitations and lift them completely, as confidence grows. Changes will be updated here, stay tuned.","title":"StarkGate — Token Bridge","component":"documentation","version":"","name":"token-bridge","url":"/documentation/architecture_and_concepts/L1-L2_Communication/token-bridge/","titles":[{"text":"StarkGate General Architecture","hash":"starkgate_general_architecture","id":1},{"text":"L1→L2 Transfer (Deposit)","hash":"l1l2_transfer_deposit","id":2},{"text":"Step 1: Call The Deposit Function on L1","hash":"step_1_call_the_deposit_function_on_l1","id":3},{"text":"Step 2: Deposit Triggered on Starknet","hash":"step_2_deposit_triggered_on_starknet","id":4},{"text":"Step 3: The Block That Includes The Transfer Is Proved","hash":"step_3_the_block_that_includes_the_transfer_is_proved","id":5},{"text":"L2→L1 Transfer (Withdraw)","hash":"l2l1_transfer_withdraw","id":6},{"text":"Step 1: Call The Withdraw Function on L2","hash":"step_1_call_the_withdraw_function_on_l2","id":7},{"text":"Step 2: The Block That Includes The Transaction Is Proved","hash":"step_2_the_block_that_includes_the_transaction_is_proved","id":8},{"text":"Step 3: Transfering The Funds On L1","hash":"step_3_transfering_the_funds_on_l1","id":9},{"text":"StarkGate Alpha Limitations","hash":"starkgate_alpha_limitations","id":10}]},"43":{"id":43,"text":"The state of Starknet consists of: contract instances: a mapping between addresses (251 bit field elements) and contract’s state. contract classes: a mapping between class hash and the class definition A contract state consists of: class_hash (defines the functionality) contract storage (a key-value mapping where the key/values are field elements) contract nonce - the number of transactions sent from this contract nonce Similarly to Ethereum, the contract’s nonce is used to provide replay protection at the protocol level. When a transaction is sent to a given contract, the transaction’s nonce must match the nonce of the contract. After the transaction is executed, the contract’s nonce is increased by one. Note that while on Ethereum, only EOAs can send transactions and consequently have a non-zero nonce, on Starknet, only account contracts can send transactions and have a non-zero nonce. With the above definition, we can provide a brief sketch of Starknet’s transition function. A transaction \\(tx\\) transitions the system from state \\(S\\) to state \\(S'\\) if: \\(tx\\) is an invoke transaction, and the storage of \\(S'\\) is the result of executing the target contract code with respect to the previous state \\(S\\) (the arguments, contract address, and the specific entry point are part of the transaction) \\(tx\\) is a deploy transaction, and \\(S'\\) contains the new contract’s state at the contract’s address. Additionally, the storage of \\(S\\) is updated according to the execution of the contract’s constructor. \\(tx\\) is a declare transaction, and \\(S'\\) contains the class hash and definition in the contract classes mapping The state commitment is a digest which uniquely (up to hash collisions) encodes the state. In Starknet, the commitment is the root of a binary Merkle-Patricia tree of height 251. Like Ethereum, this is a 2-level structure where the contract address determines the path from the root to the leaf encoding the contract state. The information stored in the leaf is: \\[h(h(h(\\text{class_hash}, \\text{storage_root}), \\text{nonce}),0)\\] Where: \\(\\text{class_hash}\\) is the hash of the contract’s definition discussed here \\(\\text{storage_root}\\) is the root of another Merkle-Patricia tree of height 251 that is constructed from the contract’s storage \\(\\text{nonce}\\) is the current nonce of the contract \\(h\\) is the Pedersen hash function. The commitment does not include class information. This will be added in future versions. As mentioned above, our commitment scheme uses a binary Merkle-Patricia tree with the Pedersen hash function. Each node in the tree is represented by a triplet \\((length, path, bottom)\\). The actual data is placed in the leaves, and a leaf node with data \\(x\\) is encoded by the triplet \\((0,0,x)\\). Empty nodes (leaves or internal) are encoded by the zero triplet \\((0,0,0)\\). A subtree rooted at a node \\((length, path, bottom)\\) has a single non-empty subtree, rooted at the node obtained by following the path specified by \\(path\\). \\(path\\) is an integer in \\([0, 2^{length}-1]\\), and the binary expansion of \\(path\\) indicates how should we proceed along the tree, where the first step is indicated by the most significant bit, and \\(0,1\\) are interpreted as left, right correspondingly. Note that the reason that length is specified and cannot be deduced from \\(path\\) is that we’re dealing with field elements of fixed size (251 bits each). For a node with \\(length>0\\), following \\(path\\) leads the highest node whose both right and left child are none empty. The following rules specify how the tree is constructed from a given set of leaves: The hash of a node \\(N =(length, path, bottom)\\), denoted by \\(H(N)\\), is: \\[H(N)=\\begin{cases} bottom, & \\text{if } length = 0 \\\\ h(bottom, path) + length, & \\text{otherwise} \\end{cases}\\] Note that any arithmetic operations in the above are done in our field. We can now proceed to recursively define the nodes in the trie. The triplet representing the parent of the nodes \\(left=(\\ell_L, p_L, b_L)\\), \\(right=(\\ell_R, p_R, b_R)\\) is given by: \\[parent= \\begin{cases} (0,0,0), & \\text{if } left=right=(0,0,0)\\\\ (\\ell_L + 1, p_L, b_L), & \\text{if } right=(0,0,0) \\text{ and } left \\neq (0,0,0)\\\\ (\\ell_R + 1, p_R + 2^{\\ell_R}, b_R), & \\text{if } right\\neq (0,0,0) \\text{ and } left = (0,0,0)\\\\ (0, 0, h(H(left), H(right))), & \\text{otherwise} \\end{cases}\\] Example Trie We now show an example of the construction of a height 3 Merkle-Patricia tree from the leaves \\([0,0,1,0,0,1,0,0]\\): Where \\(r=h(H(2,2,1),H((2,1,1))\\). Note that in our example there is no skipping from the root (length is zero), so the final commitment to the tree will be \\(H((0,0,r))=r\\). Suppose that we want to prove, with respect to the commitment we have just computed, that the value of the leaf whose path is given by \\(101\\) is \\(1\\). In a standard Merkle tree, the proof would have consisted of data from three nodes (siblings along the path to the root). Here, since the tree is sparse, we only need to send the two children of the root \\((2,2,1), (2,1,1)\\). This suffices to reproduce the commitment \\(r\\), and since the height of the tree, \\(3\\), is known and fixed, we know that the path \\(01\\) of length \\(2\\) specified by the right child \\((2,1,1)\\) leads us to the desired leaf.","title":"Starknet State","component":"documentation","version":"","name":"starknet-state","url":"/documentation/architecture_and_concepts/State/starknet-state/","titles":[{"text":"State Commitment","hash":"state_commitment","id":1},{"text":"Merkle-Patricia tree","hash":"merkle_patricia_tree","id":2},{"text":"Specifications","hash":"specifications","id":3}]},"44":{"id":44,"text":"An asterisk (*) denotes required arguments. To enter a starknet command, use the following syntax: $ starknet Where: represents a single command that executes an operation on Starknet. represents zero or more command line options, each of which modifies the operation of the command. You need to set your Starknet network environment to use either testnet or Mainnet. You can set the environment using either a command-line option or an environment variable. Possible values are: alpha-goerli Sets the Starknet network to testnet alpha-mainnet Sets the Starknet network to Mainnet Setting the network environment using a command-line option When you enter any command, include the --network option. For example to use Mainnet, enter a command as follows: $ starknet --network alpha-mainnet You can place the --network option before or after any other option. Setting the network environment using an environment variable Set the STARKNET_NETWORK environment variable as follows: $ export STARKNET_NETWORK= For example, to use testnet, enter the following command: $ export STARKNET_NETWORK=alpha-goerli When working with the CLI, you can manually set the endpoints for the gateways that enable you to interact with Starknet, by including the following options: --feeder_gateway_url Sets the custom endpoint for read commands. --gateway_url Sets the custom endpoint for write commands. The following are the endpoints for Starknet testnet and Mainnet: Testnet feeder gateway URL: https://alpha4.starknet.io/feeder_gateway/ Mainnet feeder gateway URL: https://alpha-mainnet.starknet.io/feeder_gateway/ Testnet gateway URL: https://alpha4.starknet.io/gateway/ Mainnet gateway URL: https://alpha-mainnet.starknet.io/gateway/ Example: Setting a custom read endpoint The following command returns the ABI using the Mainnet feeder gateway. $ starknet get_code --feeder_gateway_url https://alpha-mainnet.starknet.io/feeder_gateway/ Example: Setting a custom write endpoint The following command sends a transaction to the Starknet sequencer using the Mainnet gateway. $ starknet invoke --gateway_url https://alpha-mainnet.starknet.io/gateway/ starknet call --address --abi --function --inputs --block_hash --block_number --signature --wallet --nonce Calls a Starknet contract without affecting the state, accepts the following arguments: contract_address* - address of the contract being called contract_abi* - a path to a JSON file that contains the abi of the contract being called function_name* - name of the function which is called arguments* - inputs to the function being called, represented by a list of space-delimited values block_hash - the hash of the block used as the context for the call operation. If this argument is omitted, the latest block is used block_number - same as block_hash, but specifies the context block by number or tag signature_information - list of field elements as described here wallet_name - the name of the desired wallet, use deploy_account to set-up new accounts in the CLI nonce - account nonce, only relevant if the call is going through an account Block Tag A block context can be specified via the latest or pending tags, where the former refers to the latest accepted on L2 block and the latter refers to the pending block. starknet declare --contract Declares a new contract class on Starknet, accepts the following arguement: contract_class - path to a JSON file containing the contract’s compiled code starknet deploy --salt --contract --inputs --token Deploys a new contract, accepts the following arguments: salt - a seed that is used in the computation of the contract’s address (if not specified, the sequencer will choose a random string) contract_definition* - path to a JSON file containing the contract’s bytecode and abi (can be obtained by executing starknet-compile) constructor_inputs* - the arguments given to the contract’s constructor, represented by a list of space-delimited values token - a token allowing contract deployment (can be obtained by applying here). Only used in the Alpha stages and will be deprecated in the future The deploy token is a temporary measure which will be deprecated when fees are incorporated in the system. Only relevant for Mainnet. starknet deploy_account --wallet --account Deploys an account contract, accepts the following arguments: account_name - the name given to the account, used for managing multiple accounts from the CLI (if not specified, the name __default__ is used. wallet_provider* - the path to module which manages the account (responsible for key generation, signing, etc.) Today, the Starknet CLI only works with the OpenZeppelin account contract. The CLI uses this specific wallet provider. To use this provider, either set up the following environment variable or pass the same value directly to the wallet_provider parameter: $ export STARKNET_WALLET=starkware.starknet.wallets.open_zeppelin.OpenZeppelinAccount Using the builtin wallet providers that are part of the cairo-lang package (starkware.starknet.wallets…​) is not secure (for example, the private key may be kept not encrypted and without backup in your home directory). You should only use them if you’re not overly concerned with losing access to your accounts (for example, for testing purposes). starknet estimate_fee --address --abi --function --inputs Returns the fee estimation for a given contract call. Accepts the following arguments: address* - the address of the contract being called contract_abi* - a path to a JSON file that contains the abi of the contract being called function_name*- the name of the function being called arguments* - inputs to the function being called, represented by a list of space-delimited values` starknet estimate_message_fee --from_address --to_address --function --inputs Returns the fee estimation for a given L1 handler application. Accepts the following arguments: from_address* - the L1 address of the sender to_address* - the L2 address of the recipient contract_abi* - a path to a JSON file containing the abi of the receiving contract on L2 function_name*- the name of the desired L1 handler arguments* - inputs to the called handler, represented by a list of space-delimited values starknet get_block --hash --number Returns the requested block, exactly one of the following arguments must be given: block_hash - hash of the requested block block_number - number or tag of the requested block starknet get_code --contract_address --block_hash --block_number Returns the ABI and the byte code of the requested contract, accepts the following arguments: contact_address* - address of the requested contract block_hash - the hash of the block used as the context for the operation. If this argument is omitted, the latest block is used block_number - same as block_hash, but specifies the context block by number or tag starknet get_storage_at --contract_address --key --block_hash --block_number Queries a contract’s storage at a specific key, accepts the following arguments: contract_address *- address of the requested contract key* - the requested key from the given contract’s storage block_hash - the hash of the block relative to which the storage will be provided. In case this argument is not given, the latest block is used block_number - same as block_hash, but specifies the context block by number or tag starknet get_transaction --hash Returns the requested transaction, expects the following argument: transaction_hash* - hash of the requested transaction starknet get_transaction_receipt --hash Returns the receipt associated with the transaction, expects the following argument: transaction_hash* - hash of the requested transaction starknet invoke starknet tx_status starknet invoke --address --abi --function --inputs --signature --wallet --nonce Sends a transaction to the Starknet sequencer, accepts the following arguments: address* - the address of the contract being called contract_abi* - a path to a JSON file that contains the abi of the contract being called function_name*- the name of the function being called arguments* - inputs to the function being called, represented by a list of space-delimited values signature_information - list of field elements as described here wallet_name - the name of the desired wallet, use deploy_account to set-up new accounts in the CLI. nonce - account nonce, only relevant if the call is going through an account Today, interaction with Starknet may be done either via account or by a direct call. The signature argument can only be provided in the case of a direct call, since otherwise providing the signature is the responsibility of the account module. To use an account you must specify wallet_name, otherwise a direct call will be used (you may also explicitly perform a direct call by adding --no_wallet to the command). Note that in the future direct calls will be deprecated and the only way to interact with the system would be through accounts. starknet tx_status --hash --contract --error_message Returns the transaction status, accepts the following arguments: transaction_hash* - hash of the requested transaction contract_definition - path to a JSON file containing the compiled contract to which the transaction was addressed. If supplied, the debug information from the compiled contract will be used to add error locations. error_message - if specified, only the error message will be returned (or empty response in case the transaction was successful) The possible statuses of a transaction are: NOT_RECEIVED RECEIVED PENDING REJECTED ACCEPTED_ON_L2 ACCEPTED_ON_L1 Refer to this section for more information about the transaction lifecycle.","title":"Commands","component":"documentation","version":"","name":"commands","url":"/documentation/tools/CLI/commands/","titles":[{"text":"Basic command line syntax","hash":"basic_command_line_syntax","id":1},{"text":"Setting the Starknet network environment","hash":"setting_the_starknet_network_environment","id":2},{"text":"Setting custom endpoints","hash":"setting_custom_endpoints","id":3},{"text":"starknet call","hash":"starknet_call","id":4},{"text":"starknet declare","hash":"starknet_declare","id":5},{"text":"starknet deploy","hash":"starknet_deploy","id":6},{"text":"starknet deploy_account","hash":"starknet_deploy_account","id":7},{"text":"starknet estimate_fee","hash":"starknet_estimate_fee","id":8},{"text":"starknet estimate_message_fee","hash":"starknet_estimate_message_fee","id":9},{"text":"starknet get_block","hash":"starknet_get_block","id":10},{"text":"starknet get_code","hash":"starknet_get_code","id":11},{"text":"starknet get_storage_at","hash":"starknet_get_storage_at","id":12},{"text":"starknet get_transaction","hash":"starknet_get_transaction","id":13},{"text":"starknet get_transaction_receipt","hash":"starknet_get_transaction_receipt","id":14},{"text":"starknet invoke","hash":"starknet_invoke","id":15},{"text":"starknet tx_status","hash":"starknet_tx_status","id":16}]},"45":{"id":45,"text":"When the Starknet compiler is installed, you can view this command-line help in a terminal by entering the following command: starknet-compile --help starknet-compile [-h] [--abi ABI] [--disable_hint_validation] [--account_contract] [--dont_filter_identifiers] [-v] [--prime PRIME] [--cairo_path CAIRO_PATH] [--preprocess] [--output OUTPUT] [--no_debug_info] [--debug_info_with_source] [--cairo_dependencies CAIRO_DEPENDENCIES] [--no_opt_unused_functions] file [file ...] The following example compiles the file contract.cairo. It generates two files: contract_compiled.json The contract class. This file contains the bytecode and all other information necessary to execute a contract. For information on contract classes, see Contract Classes. contract_abi.json The contract’s ABI. starknet-compile contract.cairo \\ --output contract_compiled.json \\ --abi contract_abi.json A tool to compile Starknet contracts. File names. Show this help message and exit. Output the contract’s ABI. Disable the hint validation. Compile as account contract. Disable the filter-identifiers-optimization.If True, all the identifiers will be kept, instead of just the ones mentioned in hints or 'with_attr' statements. show program’s version number and exit The size of the finite field. A list of directories, separated by \":\" to resolve import paths. The full list will consist of directories defined by this argument, followed by the environment variable CAIRO_PATH, the working directory and the standard library path. Stop after the preprocessor step and output the preprocessed program. The output file name (default: stdout). Don’t include debug information in the compiled file. Include debug information with a copy of the source code. Output a list of the Cairo source files used during the compilation as a CMake file. Disables unused function optimization.","title":"Starknet compiler options reference","component":"documentation","version":"","name":"starknet-compiler-options","url":"/documentation/tools/CLI/starknet-compiler-options/","titles":[{"text":"Usage","hash":"usage","id":1},{"text":"Example","hash":"example","id":2},{"text":"Description","hash":"description","id":3},{"text":"Positional arguments","hash":"positional_arguments","id":4},{"text":"file","hash":"file","id":5},{"text":"Optional arguments","hash":"optional_arguments","id":6},{"text":"-h, --help","hash":"h_help","id":7},{"text":"--abi ABI","hash":"abi_abi","id":8},{"text":"--disable_hint_validation","hash":"disable_hint_validation","id":9},{"text":"--account_contract","hash":"account_contract","id":10},{"text":"--dont_filter_identifiers","hash":"dont_filter_identifiers","id":11},{"text":"-v, --version","hash":"v_version","id":12},{"text":"--prime PRIME","hash":"prime_prime","id":13},{"text":"--cairo_path CAIRO_PATH","hash":"cairo_path_cairo_path","id":14},{"text":"--preprocess","hash":"preprocess","id":15},{"text":"--output OUTPUT","hash":"output_output","id":16},{"text":"--no_debug_info","hash":"no_debug_info","id":17},{"text":"--debug_info_with_source","hash":"debug_info_with_source","id":18},{"text":"--cairo_dependencies CAIRO_DEPENDENCIES","hash":"cairo_dependencies_cairo_dependencies","id":19},{"text":"--no_opt_unused_functions","hash":"no_opt_unused_functions","id":20}]}},"components":{},"componentVersions":{"documentation/":{"displayVersion":"default","title":"Starknet","version":"","name":"documentation","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"Starknet documentation","site-url":"https://docs.starknet.io/","idprefix":"","stem":"latexmath","page-pagination":"","experimental":""},"sourcemap":false},"url":"/documentation/","navigation":[{"items":[{"content":"Introduction","url":"/documentation/","urlType":"internal"}],"root":true,"order":0},{"items":[{"content":"Starknet versions","items":[{"content":"Starknet version notes","url":"/documentation/starknet_versions/version_notes/","urlType":"internal"},{"content":"Upcoming Starknet versions","url":"/documentation/starknet_versions/upcoming_versions/","urlType":"internal"},{"content":"Pathfinder version notes","url":"/documentation/starknet_versions/pathfinder_versions/","urlType":"internal"},{"content":"Current limits and triggers","url":"/documentation/starknet_versions/limits_and_triggers/","urlType":"internal"}]}],"root":true,"order":1},{"items":[{"content":"Architecture and concepts","items":[{"content":"Blocks and transactions","items":[{"content":"Block structure","url":"/documentation/architecture_and_concepts/Blocks/header/","urlType":"internal"},{"content":"Transaction lifecycle","url":"/documentation/architecture_and_concepts/Blocks/transaction-life-cycle/","urlType":"internal"},{"content":"Transaction structure","url":"/documentation/architecture_and_concepts/Blocks/transactions/","urlType":"internal"}]},{"content":"Contracts","items":[{"content":"Contract ABI","url":"/documentation/architecture_and_concepts/Contracts/contract-abi/","urlType":"internal"},{"content":"Contract address","url":"/documentation/architecture_and_concepts/Contracts/contract-address/","urlType":"internal"},{"content":"Contract classes","url":"/documentation/architecture_and_concepts/Contracts/contract-classes/","urlType":"internal"},{"content":"Contract hash","url":"/documentation/architecture_and_concepts/Contracts/contract-hash/","urlType":"internal"},{"content":"Contract storage","url":"/documentation/architecture_and_concepts/Contracts/contract-storage/","urlType":"internal"},{"content":"System calls","url":"/documentation/architecture_and_concepts/Contracts/system-calls/","urlType":"internal"}]},{"content":"Account abstraction","items":[{"content":"Introduction to account abstraction","url":"/documentation/architecture_and_concepts/Account_Abstraction/introduction/","urlType":"internal"},{"content":"Starknet account structure","url":"/documentation/architecture_and_concepts/Account_Abstraction/approach/","urlType":"internal"},{"content":"Validate and execute","url":"/documentation/architecture_and_concepts/Account_Abstraction/validate_and_execute/","urlType":"internal"},{"content":"Simplified transaction flow","url":"/documentation/architecture_and_concepts/Account_Abstraction/simplified_transaction_flow/","urlType":"internal"}]},{"content":"Data availability","items":[{"content":"On-chain data","url":"/documentation/architecture_and_concepts/Data_Availability/on-chain-data/","urlType":"internal"}]},{"content":"Hashing","items":[{"content":"Hash functions","url":"/documentation/architecture_and_concepts/Hashing/hash-functions/","urlType":"internal"}]},{"content":"Events","items":[{"content":"Starknet events","url":"/documentation/architecture_and_concepts/Events/starknet-events/","urlType":"internal"}]},{"content":"Fees","items":[{"content":"Fee mechanism","url":"/documentation/architecture_and_concepts/Fees/fee-mechanism/","urlType":"internal"}]},{"content":"L1-L2 Communication","items":[{"content":"Messaging mechanism","url":"/documentation/architecture_and_concepts/L1-L2_Communication/messaging-mechanism/","urlType":"internal"},{"content":"StarkGate – Token Bridge","url":"/documentation/architecture_and_concepts/L1-L2_Communication/token-bridge/","urlType":"internal"}]},{"content":"State","items":[{"content":"Starknet state","url":"/documentation/architecture_and_concepts/State/starknet-state/","urlType":"internal"}]}]}],"root":true,"order":2},{"items":[{"content":"Getting started","url":"/documentation/getting_started/","urlType":"internal","items":[{"content":"Setting up a Starknet account","url":"/documentation/getting_started/account_setup/","urlType":"internal","items":[{"content":"Installation","url":"/documentation/getting_started/account_setup/#installation","urlType":"internal","hash":"#installation"},{"content":"Setting up the network","url":"/documentation/getting_started/account_setup/#setting-up-the-network","urlType":"internal","hash":"#setting-up-the-network"},{"content":"Choosing a wallet provider","url":"/documentation/getting_started/account_setup/#choosing-a-wallet-provider","urlType":"internal","hash":"#choosing-a-wallet-provider"},{"content":"Creating an account","url":"/documentation/getting_started/account_setup/#creating-an-account","urlType":"internal","hash":"#creating-an-account"},{"content":"Transferring Goerli ETH to the account","url":"/documentation/getting_started/account_setup/#transferring-goerli-eth-to-the-account","urlType":"internal","hash":"#transferring-goerli-eth-to-the-account"},{"content":"Deploying an account","url":"/documentation/getting_started/account_setup/#deploying-an-account","urlType":"internal","hash":"#deploying-an-account"}]},{"content":"Writing Starknet contracts","url":"/documentation/getting_started/intro/","urlType":"internal","items":[{"content":"Your first contract","url":"/documentation/getting_started/intro/#your-first-contract","urlType":"internal","hash":"#your-first-contract"},{"content":"Compile the contract","url":"/documentation/getting_started/intro/#compile-the-contract","urlType":"internal","hash":"#compile-the-contract"},{"content":"The contract’s ABI","url":"/documentation/getting_started/intro/#the-contract-s-abi","urlType":"internal","hash":"#the-contract-s-abi"},{"content":"Declare the contract on the Starknet testnet","url":"/documentation/getting_started/intro/#declare-the-contract-on-the-starknet-testnet","urlType":"internal","hash":"#declare-the-contract-on-the-starknet-testnet"},{"content":"Deploy the contract on the Starknet testnet","url":"/documentation/getting_started/intro/#deploy-the-contract-on-the-starknet-testnet","urlType":"internal","hash":"#deploy-the-contract-on-the-starknet-testnet"},{"content":"Interact with the contract","url":"/documentation/getting_started/intro/#interact-with-the-contract","urlType":"internal","hash":"#interact-with-the-contract"},{"content":"Query the balance","url":"/documentation/getting_started/intro/#query-the-balance","urlType":"internal","hash":"#query-the-balance"}]},{"content":"More CLI commands","url":"/documentation/getting_started/cli/","urlType":"internal","items":[{"content":"get_transaction","url":"/documentation/getting_started/cli/#get-transaction","urlType":"internal","hash":"#get-transaction"},{"content":"get_transaction_receipt","url":"/documentation/getting_started/cli/#get-transaction-receipt","urlType":"internal","hash":"#get-transaction-receipt"},{"content":"get_transaction_trace","url":"/documentation/getting_started/cli/#get-transaction-trace","urlType":"internal","hash":"#get-transaction-trace"},{"content":"Estimate fee","url":"/documentation/getting_started/cli/#estimate-fee","urlType":"internal","hash":"#estimate-fee"},{"content":"Simulate transaction","url":"/documentation/getting_started/cli/#simulate-transaction","urlType":"internal","hash":"#simulate-transaction"},{"content":"get_code","url":"/documentation/getting_started/cli/#get-code","urlType":"internal","hash":"#get-code"},{"content":"get_class_by_hash","url":"/documentation/getting_started/cli/#get-class-by-hash","urlType":"internal","hash":"#get-class-by-hash"},{"content":"get_full_contract","url":"/documentation/getting_started/cli/#get-full-contract","urlType":"internal","hash":"#get-full-contract"},{"content":"get_class_hash_at","url":"/documentation/getting_started/cli/#get-class-hash-at","urlType":"internal","hash":"#get-class-hash-at"},{"content":"get_block","url":"/documentation/getting_started/cli/#get-block","urlType":"internal","hash":"#get-block"},{"content":"get_nonce","url":"/documentation/getting_started/cli/#get-nonce","urlType":"internal","hash":"#get-nonce"},{"content":"get_block_traces","url":"/documentation/getting_started/cli/#get-block-traces","urlType":"internal","hash":"#get-block-traces"},{"content":"get_state_update","url":"/documentation/getting_started/cli/#get-state-update","urlType":"internal","hash":"#get-state-update"},{"content":"get_storage_at","url":"/documentation/getting_started/cli/#get-storage-at","urlType":"internal","hash":"#get-storage-at"}]},{"content":"Adding user authentication","url":"/documentation/getting_started/user_auth/","urlType":"internal","items":[{"content":"Storage maps","url":"/documentation/getting_started/user_auth/#storage-maps","urlType":"internal","hash":"#storage-maps"},{"content":"Getting the caller address","url":"/documentation/getting_started/user_auth/#getting-the-caller-address","urlType":"internal","hash":"#getting-the-caller-address"},{"content":"Modifying the contract’s functions","url":"/documentation/getting_started/user_auth/#modifying-the-contract-s-functions","urlType":"internal","hash":"#modifying-the-contract-s-functions"},{"content":"Compile and deploy","url":"/documentation/getting_started/user_auth/#compile-and-deploy","urlType":"internal","hash":"#compile-and-deploy"},{"content":"Interacting with the contract","url":"/documentation/getting_started/user_auth/#interacting-with-the-contract","urlType":"internal","hash":"#interacting-with-the-contract"},{"content":"Retrieving the revert reason","url":"/documentation/getting_started/user_auth/#retrieving-the-revert-reason","urlType":"internal","hash":"#retrieving-the-revert-reason"}]},{"content":"Constructors","url":"/documentation/getting_started/constructors/","urlType":"internal"},{"content":"More features","url":"/documentation/getting_started/more_features/","urlType":"internal","items":[{"content":"Storage variable with multiple values","url":"/documentation/getting_started/more_features/#storage-variable-with-multiple-values","urlType":"internal","hash":"#storage-variable-with-multiple-values"},{"content":"Storage variable with struct arguments","url":"/documentation/getting_started/more_features/#storage-variable-with-struct-arguments","urlType":"internal","hash":"#storage-variable-with-struct-arguments"},{"content":"Array arguments in calldata","url":"/documentation/getting_started/more_features/#array-arguments-in-calldata","urlType":"internal","hash":"#array-arguments-in-calldata"},{"content":"Passing tuples and structs in calldata","url":"/documentation/getting_started/more_features/#passing-tuples-and-structs-in-calldata","urlType":"internal","hash":"#passing-tuples-and-structs-in-calldata"},{"content":"Passing arrays of structs","url":"/documentation/getting_started/more_features/#passing-arrays-of-structs","urlType":"internal","hash":"#passing-arrays-of-structs"},{"content":"Retrieving the transaction information","url":"/documentation/getting_started/more_features/#retrieving-the-transaction-information","urlType":"internal","hash":"#retrieving-the-transaction-information"},{"content":"Block number and timestamp","url":"/documentation/getting_started/more_features/#block-number-and-timestamp","urlType":"internal","hash":"#block-number-and-timestamp"}]},{"content":"Calling another contract","url":"/documentation/getting_started/calling_contracts/","urlType":"internal","items":[{"content":"Getting the current contract’s address","url":"/documentation/getting_started/calling_contracts/#getting-the-current-contract-s-address","urlType":"internal","hash":"#getting-the-current-contract-s-address"},{"content":"Library calls","url":"/documentation/getting_started/calling_contracts/#library-calls","urlType":"internal","hash":"#library-calls"}]},{"content":"Deploying a contract by another contract","url":"/documentation/getting_started/deploying_from_contracts/","urlType":"internal","items":[{"content":"The deploy system call","url":"/documentation/getting_started/deploying_from_contracts/#the-deploy-system-call","urlType":"internal","hash":"#the-deploy-system-call"},{"content":"Using the contract","url":"/documentation/getting_started/deploying_from_contracts/#using-the-contract","urlType":"internal","hash":"#using-the-contract"}]},{"content":"Events","url":"/documentation/getting_started/events/","urlType":"internal"},{"content":"Interacting with L1 contracts","url":"/documentation/getting_started/l1l2/","urlType":"internal","items":[{"content":"Background","url":"/documentation/getting_started/l1l2/#background","urlType":"internal","hash":"#background"},{"content":"An example of a simple token bridge","url":"/documentation/getting_started/l1l2/#an-example-of-a-simple-token-bridge","urlType":"internal","hash":"#an-example-of-a-simple-token-bridge"}]},{"content":"Default entry point","url":"/documentation/getting_started/default_entrypoint/","urlType":"internal"},{"content":"Writing unit tests","url":"/documentation/getting_started/unit_tests/","urlType":"internal"},{"content":"Signature verification","url":"/documentation/getting_started/signature_verification/","urlType":"internal","items":[{"content":"Compile and deploy","url":"/documentation/getting_started/signature_verification/#compile-and-deploy","urlType":"internal","hash":"#compile-and-deploy"},{"content":"Interacting with the contract","url":"/documentation/getting_started/signature_verification/#interacting-with-the-contract","urlType":"internal","hash":"#interacting-with-the-contract"}]},{"content":"A simple Automated Market Maker (AMM)","url":"/documentation/getting_started/amm/","urlType":"internal","items":[{"content":"AMM implementation in Starknet Alpha","url":"/documentation/getting_started/amm/#amm-implementation-in-starknet-alpha","urlType":"internal","hash":"#amm-implementation-in-starknet-alpha"},{"content":"The AMM state","url":"/documentation/getting_started/amm/#the-amm-state","urlType":"internal","hash":"#the-amm-state"},{"content":"Swapping tokens","url":"/documentation/getting_started/amm/#swapping-tokens","urlType":"internal","hash":"#swapping-tokens"},{"content":"Initializing the AMM","url":"/documentation/getting_started/amm/#initializing-the-amm","urlType":"internal","hash":"#initializing-the-amm"},{"content":"Interaction examples","url":"/documentation/getting_started/amm/#interaction-examples","urlType":"internal","hash":"#interaction-examples"}]}]}],"root":true,"order":3},{"items":[{"content":"Tools","items":[{"content":"Starknet block explorers","url":"/documentation/tools/ref_block_explorers/","urlType":"internal"},{"content":"Starknet CLI reference","url":"/documentation/tools/CLI/commands/","urlType":"internal"},{"content":"Starknet compiler reference","url":"/documentation/tools/CLI/starknet-compiler-options/","urlType":"internal"}]}],"root":true,"order":4},{"items":[{"content":"Useful info","url":"/documentation/useful_info/","urlType":"internal"}],"root":true,"order":5},{"items":[{"content":"Deprecated and obsolete features","url":"/documentation/end_of_life_and_deprecated_features/","urlType":"internal"}],"root":true,"order":6}]}}}})